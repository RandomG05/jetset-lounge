/**
 * Filename: cashier.billingCashier.js
 * Generated 2021-01-15 at 04:04:51 PM
 */
Ext.define('ExtApp.modules.master_pos.model.model_productCategory', {
    extend: 'Ext.data.Model',
    alias: 'model_productCategory',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'parent_id',
        type: 'int'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_category_code',
        type: 'string'
    }, {
        name: 'product_category_desc',
        type: 'string'
    }, {
        name: 'product_category_code_name',
        type: 'string'
    }, {
        name: 'from_item_category',
        type: 'int'
    }, {
        name: 'from_item_category_text',
        type: 'string'
    }, {
        name: 'list_no',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'product_category_color',
        type: 'string'
    }, {
        name: 'product_category_bg_color',
        type: 'string'
    }, {
        name: 'product_category_text_color',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/productCategory/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterSales', {
    extend: 'Ext.data.Model',
    alias: 'model_masterSales',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'sales_code',
        type: 'string'
    }, {
        name: 'sales_type',
        type: 'string'
    }, {
        name: 'sales_type_text',
        type: 'string'
    }, {
        name: 'sales_code_name',
        type: 'string'
    }, {
        name: 'sales_name',
        type: 'string'
    }, {
        name: 'sales_percentage',
        type: 'string'
    }, {
        name: 'sales_price',
        type: 'string'
    }, {
        name: 'sales_contract_type',
        type: 'string'
    }, {
        name: 'sales_phone',
        type: 'string'
    }, {
        name: 'sales_email',
        type: 'string'
    }, {
        name: 'sales_address',
        type: 'string'
    }, {
        name: 'sales_company',
        type: 'string'
    }, {
        name: 'date_start',
        type: 'string'
    }, {
        name: 'date_end',
        type: 'string'
    }, {
        name: 'source_from',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'sales_name_company_fee',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterSales/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterCustomer', {
    extend: 'Ext.data.Model',
    alias: 'model_masterCustomer',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'customer_code',
        type: 'string'
    }, {
        name: 'customer_name',
        type: 'string'
    }, {
        name: 'customer_contact_person',
        type: 'string'
    }, {
        name: 'customer_address',
        type: 'string'
    }, {
        name: 'customer_city',
        type: 'string'
    }, {
        name: 'customer_phone',
        type: 'string'
    }, {
        name: 'customer_email',
        type: 'string'
    }, {
        name: 'customer_status',
        type: 'string'
    }, {
        name: 'customer_status_text',
        type: 'string'
    }, {
        name: 'customer_representative',
        type: 'string'
    }, {
        name: 'keterangan_blacklist',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'source_from',
        type: 'string'
    }, {
        name: 'limit_kredit',
        type: 'string'
    }, {
        name: 'limit_kredit_show',
        type: 'string'
    }, {
        name: 'termin',
        type: 'string'
    }, {
        name: 'sales_id',
        type: 'int'
    }, {
        name: 'sales_name',
        type: 'string'
    }, {
        name: 'sales_code',
        type: 'string'
    }, {
        name: 'sales_code_name',
        type: 'string'
    }, {
        name: 'sales_price',
        type: 'string'
    }, {
        name: 'sales_percentage',
        type: 'string'
    }, {
        name: 'sales_type',
        type: 'string'
    }, ],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterCustomer/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterRepresentative', {
    extend: 'Ext.data.Model',
    alias: 'model_masterRepresentative',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'representative_name',
        type: 'string'
    }, {
        name: 'representative_email',
        type: 'string'
    }, {
        name: 'representative_address',
        type: 'string'
    }, {
        name: 'representative_phone',
        type: 'string'
    }, {
        name: 'representative_signature',
        type: 'string'
    }, ],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterRepresentative/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterBank', {
    extend: 'Ext.data.Model',
    alias: 'model_masterBank',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'bank_code',
        type: 'string'
    }, {
        name: 'bank_name',
        type: 'string'
    }, {
        name: 'payment_id',
        type: 'int'
    }, {
        name: 'payment_text',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterBank/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterFloorplan', {
    extend: 'Ext.data.Model',
    alias: 'model_masterFloorplan',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'floorplan_name',
        type: 'string'
    }, {
        name: 'floorplan_desc',
        type: 'string'
    }, {
        name: 'floorplan_image',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'floorplan_info',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterFloorplan/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterTable', {
    extend: 'Ext.data.Model',
    alias: 'model_masterTable',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'table_name',
        type: 'string'
    }, {
        name: 'table_desc',
        type: 'string'
    }, {
        name: 'table_no',
        type: 'string'
    }, {
        name: 'room_name',
        type: 'string'
    }, {
        name: 'room_no',
        type: 'string'
    }, {
        name: 'room_id',
        type: 'int'
    }, {
        name: 'floorplan_name',
        type: 'string'
    }, {
        name: 'floorplan_id',
        type: 'int'
    }, {
        name: 'kapasitas',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'table_tipe',
        type: 'string'
    }, {
        name: 'table_tipe_text',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterTable/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterTableInv', {
    extend: 'Ext.data.Model',
    alias: 'model_masterTableInv',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'table_id',
        type: 'int'
    }, {
        name: 'tanggal',
        type: 'string'
    }, {
        name: 'table_name',
        type: 'string'
    }, {
        name: 'table_tipe',
        type: 'string'
    }, {
        name: 'table_tipe_text',
        type: 'string'
    }, {
        name: 'table_desc',
        type: 'string'
    }, {
        name: 'table_no',
        type: 'string'
    }, {
        name: 'room_name',
        type: 'string'
    }, {
        name: 'room_no',
        type: 'string'
    }, {
        name: 'room_id',
        type: 'int'
    }, {
        name: 'floorplan_name',
        type: 'string'
    }, {
        name: 'floorplan_id',
        type: 'int'
    }, {
        name: 'kapasitas',
        type: 'int'
    }, {
        name: 'kapasitas_text',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'table_info',
        type: 'string'
    }, {
        name: 'table_color',
        type: 'string'
    }, {
        name: 'floorplan_button',
        type: 'int'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'billing_no',
        type: 'string'
    }, {
        name: 'billing_status',
        type: 'string'
    }, {
        name: 'table_status',
        type: 'string'
    }, {
        name: 'total_billing',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterTableInv/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_discountPlanner', {
    extend: 'Ext.data.Model',
    alias: 'model_discountPlanner',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'discount_type',
        type: 'string'
    }, {
        name: 'discount_type_text',
        type: 'string'
    }, {
        name: 'discount_name',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_max_price',
        type: 'string'
    }, {
        name: 'min_total_billing',
        type: 'int'
    }, {
        name: 'discount_date_type',
        type: 'string'
    }, {
        name: 'discount_product',
        type: 'int'
    }, {
        name: 'discount_desc',
        type: 'string'
    }, {
        name: 'date_start',
        type: 'string'
    }, {
        name: 'date_end',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'is_discount_billing',
        type: 'int'
    }, {
        name: 'is_discount_billing_text',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'is_promo_text',
        type: 'string'
    }, {
        name: 'is_buy_get',
        type: 'int'
    }, {
        name: 'is_buy_get_text',
        type: 'string'
    }, {
        name: 'discount_allow_day',
        type: 'string'
    }, {
        name: 'discount_allow_day_text',
        type: 'string'
    }, {
        name: 'use_discount_time',
        type: 'int'
    }, {
        name: 'use_discount_time_text',
        type: 'string'
    }, {
        name: 'discount_time_start',
        type: 'string'
    }, {
        name: 'discount_time_end',
        type: 'string'
    }, {
        name: 'is_sistem_tawar',
        type: 'int'
    }, {
        name: 'diskon_sebelum_pajak_service',
        type: 'int'
    }, ],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/discountPlanner/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_productVarian', {
    extend: 'Ext.data.Model',
    alias: 'model_productVarian',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'product_id',
        type: 'string'
    }, {
        name: 'has_varian',
        type: 'string'
    }, {
        name: 'varian_id',
        type: 'string'
    }, {
        name: 'varian_name',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'normal_price',
        type: 'string'
    }, {
        name: 'normal_price_show',
        type: 'string'
    }, {
        name: 'product_hpp',
        type: 'string'
    }, {
        name: 'product_hpp_show',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'tax_price',
        type: 'string'
    }, {
        name: 'service_price',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/productVarian/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_masterPrinter', {
    extend: 'Ext.data.Model',
    alias: 'model_masterPrinter',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'printer_name',
        type: 'string'
    }, {
        name: 'printer_ip',
        type: 'string'
    }, {
        name: 'printer_tipe',
        type: 'string'
    }, {
        name: 'printer_pin',
        type: 'string'
    }, {
        name: 'print_method',
        type: 'string'
    }, {
        name: 'print_logo',
        type: 'int'
    }, {
        name: 'print_logo_text',
        type: 'string'
    }, {
        name: 'is_print_anywhere',
        type: 'int'
    }, {
        name: 'is_print_anywhere_text',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterPrinter/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.model.model_orderNote', {
    extend: 'Ext.data.Model',
    alias: 'model_orderNote',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'order_note_text',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/orderNote/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.cashier.model.model_masterProductCashier', {
    extend: 'Ext.data.Model',
    alias: 'model_masterProductCashier',
    fields: [{
        name: 'product_id',
        type: 'int'
    }, {
        name: 'product_name',
        type: 'string'
    }, {
        name: 'product_name_show',
        type: 'string'
    }, {
        name: 'product_chinese_name',
        type: 'string'
    }, {
        name: 'product_desc',
        type: 'string'
    }, {
        name: 'normal_price',
        type: 'string'
    }, {
        name: 'product_normal_price',
        type: 'string'
    }, {
        name: 'normal_price_show',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'product_price_hpp',
        type: 'string'
    }, {
        name: 'product_hpp',
        type: 'string'
    }, {
        name: 'category_id',
        type: 'int'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_group',
        type: 'string'
    }, {
        name: 'product_type',
        type: 'string'
    }, {
        name: 'product_image',
        type: 'string'
    }, {
        name: 'product_image_show',
        type: 'string'
    }, {
        name: 'product_image_src',
        type: 'string'
    }, {
        name: 'has_varian',
        type: 'int'
    }, {
        name: 'hide_compliment_order',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'use_tax',
        type: 'int'
    }, {
        name: 'use_service',
        type: 'int'
    }, {
        name: 'is_buyget',
        type: 'int'
    }, {
        name: 'buyget_id',
        type: 'int'
    }, {
        name: 'buyget_tipe',
        type: 'string'
    }, {
        name: 'buyget_desc',
        type: 'string'
    }, {
        name: 'buyget_buy_qty',
        type: 'string'
    }, {
        name: 'buyget_qty',
        type: 'string'
    }, {
        name: 'buyget_percentage',
        type: 'string'
    }, {
        name: 'buyget_total',
        type: 'string'
    }, {
        name: 'buyget_item',
        type: 'string'
    }, {
        name: 'item_id',
        type: 'string'
    }, {
        name: 'item_code',
        type: 'string'
    }, {
        name: 'supplier_id',
        type: 'int'
    }, {
        name: 'is_kerjasama',
        type: 'int'
    }, {
        name: 'is_kerjasama_text',
        type: 'string'
    }, {
        name: 'persentase_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil_show',
        type: 'string'
    }, {
        name: 'product_name_code',
        type: 'string'
    }, {
        name: 'product_code',
        type: 'string'
    }, {
        name: 'product_bg_color',
        type: 'string'
    }, {
        name: 'product_text_color',
        type: 'string'
    }, {
        name: 'use_stok_kode_unik',
        type: 'string'
    }, {
        name: 'data_stok_kode_unik',
        type: 'string'
    }, {
        name: 'has_list_price',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'master_pos/masterProduct/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_dataBilling', {
    extend: 'Ext.data.Model',
    alias: 'model_dataBilling',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'table_id',
        type: 'string'
    }, {
        name: 'table_no',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'billing_no',
        type: 'string'
    }, {
        name: 'billing_representative',
        type: 'string'
    }, {
        name: 'billing_no_show',
        type: 'string'
    }, {
        name: 'billing_date',
        type: 'string'
    }, {
        name: 'created_datetime',
        type: 'string'
    }, {
        name: 'created_date',
        type: 'string'
    }, {
        name: 'updated_date',
        type: 'string'
    }, {
        name: 'updated_time',
        type: 'string'
    }, {
        name: 'payment_date',
        type: 'string'
    }, {
        name: 'payment_time',
        type: 'string'
    }, {
        name: 'billing_status',
        type: 'string'
    }, {
        name: 'billing_notes',
        type: 'string'
    }, {
        name: 'total_pembulatan',
        type: 'string'
    }, {
        name: 'total_billing',
        type: 'string'
    }, {
        name: 'total_billing_display',
        type: 'string'
    }, {
        name: 'total_billing_show',
        type: 'string'
    }, {
        name: 'grand_total',
        type: 'string'
    }, {
        name: 'grand_total_show',
        type: 'string'
    }, {
        name: 'total_paid',
        type: 'string'
    }, {
        name: 'total_paid_show',
        type: 'string'
    }, {
        name: 'payment_id',
        type: 'int'
    }, {
        name: 'payment_type_name',
        type: 'string'
    }, {
        name: 'bank_id',
        type: 'int'
    }, {
        name: 'bank_name',
        type: 'int'
    }, {
        name: 'card_no',
        type: 'string'
    }, {
        name: 'include_tax',
        type: 'int'
    }, {
        name: 'tax_percentage',
        type: 'string'
    }, {
        name: 'tax_total',
        type: 'string'
    }, {
        name: 'tax_total_show',
        type: 'string'
    }, {
        name: 'include_service',
        type: 'int'
    }, {
        name: 'service_percentage',
        type: 'string'
    }, {
        name: 'service_total',
        type: 'string'
    }, {
        name: 'service_total_show',
        type: 'string'
    }, {
        name: 'discount_id',
        type: 'int'
    }, {
        name: 'discount_notes',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_total',
        type: 'string'
    }, {
        name: 'discount_total_show',
        type: 'string'
    }, {
        name: 'total_discount_item',
        type: 'string'
    }, {
        name: 'total_discount_billing',
        type: 'string'
    }, {
        name: 'total_qty_order',
        type: 'float'
    }, {
        name: 'total_qty_deliver',
        type: 'float'
    }, {
        name: 'order_total',
        type: 'string'
    }, {
        name: 'order_total_show',
        type: 'string'
    }, {
        name: 'total_hpp',
        type: 'string'
    }, {
        name: 'total_hpp_show',
        type: 'string'
    }, {
        name: 'total_profit',
        type: 'string'
    }, {
        name: 'total_profit_show',
        type: 'string'
    }, {
        name: 'percent_status_order',
        type: 'string'
    }, {
        name: 'user_fullname',
        type: 'string'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'payment_note',
        type: 'string'
    }, {
        name: 'is_half_payment',
        type: 'int'
    }, {
        name: 'total_dp',
        type: 'string'
    }, {
        name: 'total_dp_show',
        type: 'string'
    }, {
        name: 'compliment_total',
        type: 'string'
    }, {
        name: 'compliment_total_show',
        type: 'string'
    }, {
        name: 'total_cash',
        type: 'string'
    }, {
        name: 'total_cash_show',
        type: 'string'
    }, {
        name: 'total_credit',
        type: 'string'
    }, {
        name: 'total_credit_show',
        type: 'string'
    }, {
        name: 'createdby',
        type: 'string'
    }, {
        name: 'updatedby',
        type: 'string'
    }, {
        name: 'merge_id',
        type: 'int'
    }, {
        name: 'merge_billing_no',
        type: 'string'
    }, {
        name: 'merge_main_status',
        type: 'int'
    }, {
        name: 'split_from_id',
        type: 'int'
    }, {
        name: 'split_merge_status',
        type: 'string'
    }, {
        name: 'max_pembulatan',
        type: 'int'
    }, {
        name: 'pembulatan_keatas',
        type: 'int'
    }, {
        name: 'total_guest',
        type: 'int'
    }, {
        name: 'total_crew',
        type: 'int'
    }, {
        name: 'total_gh',
        type: 'int'
    }, {
        name: 'signature',
        type: 'string'
    }, {
        name: 'sales_id',
        type: 'int'
    }, {
        name: 'sales_percent',
        type: 'string'
    }, {
        name: 'sales_price',
        type: 'string'
    }, {
        name: 'sales_type',
        type: 'string'
    }, {
        name: 'sales_name_company_fee',
        type: 'string'
    }, {
        name: 'lock_billing',
        type: 'int'
    }, {
        name: 'qc_notes',
        type: 'string'
    }, {
        name: 'time_in',
        type: 'string'
    }, {
        name: 'voucher_no',
        type: 'string'
    }, {
        name: 'is_sistem_tawar',
        type: 'int'
    }, {
        name: 'single_rate',
        type: 'int'
    }, {
        name: 'customer_id',
        type: 'int'
    }, {
        name: 'customer_name',
        type: 'string'
    },/*Addition*/ {
        name: 'representative_id',
        type: 'int'
    }, {
        name: 'representative_name',
        type: 'string'
    }, {
        name: 'block_table',
        type: 'int'
    }, {
        name: 'is_reservation',
        type: 'int'
    }, {
        name: 'group_date',
        type: 'string'
    }, {
        name: 'txmark',
        type: 'string'
    }, {
        name: 'txmark_no',
        type: 'string'
    }, {
        name: 'txmark_no_show',
        type: 'string'
    }, {
        name: 'payment_note2',
        type: 'string'
    }, {
        name: 'billing_info',
        type: 'string'
    }, {
        name: 'table_button',
        type: 'int'
    }, {
        name: 'billing_color',
        type: 'string'
    }, {
        name: 'billing_datetime',
        type: 'string'
    }, {
        name: 'billing_time',
        type: 'string'
    }, {
        name: 'billing_no_before',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_get_dataBilling', {
    extend: 'Ext.data.Model',
    alias: 'model_get_dataBilling',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'table_id',
        type: 'string'
    }, {
        name: 'table_no',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'billing_no',
        type: 'string'
    }, {
        name: 'billing_status',
        type: 'string'
    }, {
        name: 'merge_id',
        type: 'int'
    }, {
        name: 'merge_main_status',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_billingDetail', {
    extend: 'Ext.data.Model',
    alias: 'model_billingDetail',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'product_id',
        type: 'int'
    }, {
        name: 'product_detail_info',
        type: 'string'
    }, {
        name: 'product_name',
        type: 'string'
    }, {
        name: 'product_name_show',
        type: 'string'
    }, {
        name: 'product_desc',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_real',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'product_price_hpp',
        type: 'string'
    }, {
        name: 'product_normal_price',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'category_id',
        type: 'int'
    }, {
        name: 'has_varian',
        type: 'int'
    }, {
        name: 'product_varian_id',
        type: 'int'
    }, {
        name: 'varian_id',
        type: 'int'
    }, {
        name: 'varian_name',
        type: 'string'
    }, {
        name: 'include_tax',
        type: 'int'
    }, {
        name: 'tax_percentage',
        type: 'string'
    }, {
        name: 'tax_total',
        type: 'string'
    }, {
        name: 'tax_total_show',
        type: 'string'
    }, {
        name: 'include_service',
        type: 'int'
    }, {
        name: 'service_percentage',
        type: 'string'
    }, {
        name: 'service_total',
        type: 'string'
    }, {
        name: 'service_total_show',
        type: 'string'
    }, {
        name: 'discount_id',
        type: 'int'
    }, {
        name: 'discount_notes',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_price_show',
        type: 'string'
    }, {
        name: 'discount_total',
        type: 'string'
    }, {
        name: 'discount_total_show',
        type: 'string'
    }, {
        name: 'is_takeaway',
        type: 'int'
    }, {
        name: 'is_takeaway_text',
        type: 'string'
    }, {
        name: 'takeaway_no_tax',
        type: 'int'
    }, {
        name: 'takeaway_no_service',
        type: 'int'
    }, {
        name: 'is_compliment',
        type: 'int'
    }, {
        name: 'is_compliment_text',
        type: 'string'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_type',
        type: 'string'
    }, {
        name: 'product_image',
        type: 'string'
    }, {
        name: 'product_image_show',
        type: 'string'
    }, {
        name: 'product_image_src',
        type: 'string'
    }, {
        name: 'order_qty',
        type: 'float'
    }, {
        name: 'order_total',
        type: 'string'
    }, {
        name: 'order_total_show',
        type: 'string'
    }, {
        name: 'order_subtotal',
        type: 'string'
    }, {
        name: 'order_subtotal_show',
        type: 'string'
    }, {
        name: 'order_total_real',
        type: 'string'
    }, {
        name: 'order_total_real_show',
        type: 'string'
    }, {
        name: 'order_status',
        type: 'string'
    }, {
        name: 'order_status_text',
        type: 'string'
    }, {
        name: 'order_notes',
        type: 'string'
    }, {
        name: 'hide_compliment_order',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'retur_type',
        type: 'string'
    }, {
        name: 'retur_qty',
        type: 'float'
    }, {
        name: 'retur_reason',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'status_discount_text',
        type: 'string'
    }, {
        name: 'use_tax',
        type: 'int'
    }, {
        name: 'use_service',
        type: 'int'
    }, {
        name: 'is_buyget',
        type: 'int'
    }, {
        name: 'buyget_id',
        type: 'int'
    }, {
        name: 'buyget_tipe',
        type: 'string'
    }, {
        name: 'buyget_desc',
        type: 'string'
    }, {
        name: 'buyget_qty',
        type: 'float'
    }, {
        name: 'buyget_percentage',
        type: 'string'
    }, {
        name: 'buyget_total',
        type: 'string'
    }, {
        name: 'buyget_item',
        type: 'string'
    }, {
        name: 'ref_order_id',
        type: 'int'
    }, {
        name: 'free_item',
        type: 'int'
    }, {
        name: 'package_item',
        type: 'int'
    }, {
        name: 'total_taxservice_show',
        type: 'string'
    }, {
        name: 'supplier_id',
        type: 'int'
    }, {
        name: 'is_kerjasama',
        type: 'int'
    }, {
        name: 'is_kerjasama_text',
        type: 'string'
    }, {
        name: 'persentase_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil_show',
        type: 'string'
    }, {
        name: 'item_code',
        type: 'string'
    }, {
        name: 'product_code',
        type: 'string'
    }, {
        name: 'use_stok_kode_unik',
        type: 'string'
    }, {
        name: 'data_stok_kode_unik',
        type: 'string'
    }, {
        name: 'has_list_price',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData_billingDetail',
        extraParams: {
            new_order: 1
        },
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_billingDetail_split', {
    extend: 'Ext.data.Model',
    alias: 'model_billingDetail_split',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'product_id',
        type: 'int'
    }, {
        name: 'product_detail_info',
        type: 'string'
    }, {
        name: 'product_name',
        type: 'string'
    }, {
        name: 'product_name_show',
        type: 'string'
    }, {
        name: 'product_desc',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_real',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'product_price_hpp',
        type: 'string'
    }, {
        name: 'product_normal_price',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'category_id',
        type: 'int'
    }, {
        name: 'has_varian',
        type: 'int'
    }, {
        name: 'product_varian_id',
        type: 'int'
    }, {
        name: 'varian_id',
        type: 'int'
    }, {
        name: 'varian_name',
        type: 'string'
    }, {
        name: 'include_tax',
        type: 'int'
    }, {
        name: 'tax_percentage',
        type: 'string'
    }, {
        name: 'tax_total',
        type: 'string'
    }, {
        name: 'tax_total_show',
        type: 'string'
    }, {
        name: 'include_service',
        type: 'int'
    }, {
        name: 'service_percentage',
        type: 'string'
    }, {
        name: 'service_total',
        type: 'string'
    }, {
        name: 'service_total_show',
        type: 'string'
    }, {
        name: 'discount_id',
        type: 'int'
    }, {
        name: 'discount_notes',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_price_show',
        type: 'string'
    }, {
        name: 'discount_total',
        type: 'string'
    }, {
        name: 'discount_total_show',
        type: 'string'
    }, {
        name: 'is_takeaway',
        type: 'int'
    }, {
        name: 'is_takeaway_text',
        type: 'string'
    }, {
        name: 'takeaway_no_tax',
        type: 'int'
    }, {
        name: 'takeaway_no_service',
        type: 'int'
    }, {
        name: 'is_compliment',
        type: 'int'
    }, {
        name: 'is_compliment_text',
        type: 'string'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_type',
        type: 'string'
    }, {
        name: 'product_image',
        type: 'string'
    }, {
        name: 'product_image_show',
        type: 'string'
    }, {
        name: 'product_image_src',
        type: 'string'
    }, {
        name: 'order_qty',
        type: 'float'
    }, {
        name: 'order_qty_split',
        type: 'float'
    }, {
        name: 'order_total',
        type: 'string'
    }, {
        name: 'order_total_show',
        type: 'string'
    }, {
        name: 'order_subtotal',
        type: 'string'
    }, {
        name: 'order_subtotal_show',
        type: 'string'
    }, {
        name: 'order_total_real',
        type: 'string'
    }, {
        name: 'order_total_real_show',
        type: 'string'
    }, {
        name: 'order_status',
        type: 'string'
    }, {
        name: 'order_status_text',
        type: 'string'
    }, {
        name: 'order_notes',
        type: 'string'
    }, {
        name: 'hide_compliment_order',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'retur_type',
        type: 'string'
    }, {
        name: 'retur_qty',
        type: 'float'
    }, {
        name: 'retur_reason',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'status_discount_text',
        type: 'string'
    }, {
        name: 'use_tax',
        type: 'int'
    }, {
        name: 'use_service',
        type: 'int'
    }, {
        name: 'is_buyget',
        type: 'int'
    }, {
        name: 'buyget_id',
        type: 'int'
    }, {
        name: 'buyget_tipe',
        type: 'string'
    }, {
        name: 'buyget_desc',
        type: 'string'
    }, {
        name: 'buyget_qty',
        type: 'float'
    }, {
        name: 'buyget_percentage',
        type: 'string'
    }, {
        name: 'buyget_total',
        type: 'string'
    }, {
        name: 'buyget_item',
        type: 'string'
    }, {
        name: 'ref_order_id',
        type: 'int'
    }, {
        name: 'free_item',
        type: 'int'
    }, {
        name: 'package_item',
        type: 'int'
    }, {
        name: 'total_taxservice_show',
        type: 'string'
    }, {
        name: 'supplier_id',
        type: 'int'
    }, {
        name: 'is_kerjasama',
        type: 'int'
    }, {
        name: 'is_kerjasama_text',
        type: 'string'
    }, {
        name: 'persentase_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil_show',
        type: 'string'
    }, {
        name: 'item_code',
        type: 'string'
    }, {
        name: 'product_code',
        type: 'string'
    }, {
        name: 'use_stok_kode_unik',
        type: 'string'
    }, {
        name: 'data_stok_kode_unik',
        type: 'string'
    }, {
        name: 'has_list_price',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData_billingDetail_split',
        extraParams: {
            new_order: 1
        },
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_billingDetail_discount', {
    extend: 'Ext.data.Model',
    alias: 'model_billingDetail_discount',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'product_id',
        type: 'int'
    }, {
        name: 'product_detail_info',
        type: 'string'
    }, {
        name: 'product_name',
        type: 'string'
    }, {
        name: 'product_name_show',
        type: 'string'
    }, {
        name: 'product_desc',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_real',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'product_price_hpp',
        type: 'string'
    }, {
        name: 'product_normal_price',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'category_id',
        type: 'int'
    }, {
        name: 'has_varian',
        type: 'int'
    }, {
        name: 'product_varian_id',
        type: 'int'
    }, {
        name: 'varian_id',
        type: 'int'
    }, {
        name: 'varian_name',
        type: 'string'
    }, {
        name: 'include_tax',
        type: 'int'
    }, {
        name: 'tax_percentage',
        type: 'string'
    }, {
        name: 'tax_total',
        type: 'string'
    }, {
        name: 'tax_total_show',
        type: 'string'
    }, {
        name: 'include_service',
        type: 'int'
    }, {
        name: 'service_percentage',
        type: 'string'
    }, {
        name: 'service_total',
        type: 'string'
    }, {
        name: 'service_total_show',
        type: 'string'
    }, {
        name: 'discount_id',
        type: 'int'
    }, {
        name: 'discount_notes',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_price_show',
        type: 'string'
    }, {
        name: 'discount_total',
        type: 'string'
    }, {
        name: 'discount_total_show',
        type: 'string'
    }, {
        name: 'is_takeaway',
        type: 'int'
    }, {
        name: 'is_takeaway_text',
        type: 'string'
    }, {
        name: 'takeaway_no_tax',
        type: 'int'
    }, {
        name: 'takeaway_no_service',
        type: 'int'
    }, {
        name: 'is_compliment',
        type: 'int'
    }, {
        name: 'is_compliment_text',
        type: 'string'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_type',
        type: 'string'
    }, {
        name: 'product_image',
        type: 'string'
    }, {
        name: 'product_image_show',
        type: 'string'
    }, {
        name: 'product_image_src',
        type: 'string'
    }, {
        name: 'order_qty',
        type: 'float'
    }, {
        name: 'order_qty_discount',
        type: 'float'
    }, {
        name: 'order_total',
        type: 'string'
    }, {
        name: 'order_total_show',
        type: 'string'
    }, {
        name: 'order_subtotal',
        type: 'string'
    }, {
        name: 'order_subtotal_show',
        type: 'string'
    }, {
        name: 'order_total_real',
        type: 'string'
    }, {
        name: 'order_total_real_show',
        type: 'string'
    }, {
        name: 'order_status',
        type: 'string'
    }, {
        name: 'order_status_text',
        type: 'string'
    }, {
        name: 'order_notes',
        type: 'string'
    }, {
        name: 'hide_compliment_order',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'retur_type',
        type: 'string'
    }, {
        name: 'retur_qty',
        type: 'float'
    }, {
        name: 'retur_reason',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'status_discount_text',
        type: 'string'
    }, {
        name: 'use_tax',
        type: 'int'
    }, {
        name: 'use_service',
        type: 'int'
    }, {
        name: 'is_buyget',
        type: 'int'
    }, {
        name: 'buyget_id',
        type: 'int'
    }, {
        name: 'buyget_tipe',
        type: 'string'
    }, {
        name: 'buyget_desc',
        type: 'string'
    }, {
        name: 'buyget_qty',
        type: 'float'
    }, {
        name: 'buyget_percentage',
        type: 'string'
    }, {
        name: 'buyget_total',
        type: 'string'
    }, {
        name: 'buyget_item',
        type: 'string'
    }, {
        name: 'ref_order_id',
        type: 'int'
    }, {
        name: 'free_item',
        type: 'int'
    }, {
        name: 'package_item',
        type: 'int'
    }, {
        name: 'total_taxservice_show',
        type: 'string'
    }, {
        name: 'supplier_id',
        type: 'int'
    }, {
        name: 'is_kerjasama',
        type: 'int'
    }, {
        name: 'is_kerjasama_text',
        type: 'string'
    }, {
        name: 'persentase_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil_show',
        type: 'string'
    }, {
        name: 'item_code',
        type: 'string'
    }, {
        name: 'product_code',
        type: 'string'
    }, {
        name: 'use_stok_kode_unik',
        type: 'string'
    }, {
        name: 'data_stok_kode_unik',
        type: 'string'
    }, {
        name: 'has_list_price',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData_billingDetail_discount',
        extraParams: {
            new_order: 1
        },
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.billing.model.model_billingDetail_compliment', {
    extend: 'Ext.data.Model',
    alias: 'model_billingDetail_compliment',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'item_no',
        type: 'int'
    }, {
        name: 'product_id',
        type: 'int'
    }, {
        name: 'product_detail_info',
        type: 'string'
    }, {
        name: 'product_name',
        type: 'string'
    }, {
        name: 'product_name_show',
        type: 'string'
    }, {
        name: 'product_desc',
        type: 'string'
    }, {
        name: 'product_price',
        type: 'string'
    }, {
        name: 'product_price_real',
        type: 'string'
    }, {
        name: 'product_price_show',
        type: 'string'
    }, {
        name: 'product_price_hpp',
        type: 'string'
    }, {
        name: 'product_normal_price',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'category_id',
        type: 'int'
    }, {
        name: 'has_varian',
        type: 'int'
    }, {
        name: 'product_varian_id',
        type: 'int'
    }, {
        name: 'varian_id',
        type: 'int'
    }, {
        name: 'varian_name',
        type: 'string'
    }, {
        name: 'include_tax',
        type: 'int'
    }, {
        name: 'tax_percentage',
        type: 'string'
    }, {
        name: 'tax_total',
        type: 'string'
    }, {
        name: 'tax_total_show',
        type: 'string'
    }, {
        name: 'include_service',
        type: 'int'
    }, {
        name: 'service_percentage',
        type: 'string'
    }, {
        name: 'service_total',
        type: 'string'
    }, {
        name: 'service_total_show',
        type: 'string'
    }, {
        name: 'discount_id',
        type: 'int'
    }, {
        name: 'discount_notes',
        type: 'string'
    }, {
        name: 'discount_percentage',
        type: 'string'
    }, {
        name: 'discount_price',
        type: 'string'
    }, {
        name: 'discount_price_show',
        type: 'string'
    }, {
        name: 'discount_total',
        type: 'string'
    }, {
        name: 'discount_total_show',
        type: 'string'
    }, {
        name: 'is_takeaway',
        type: 'int'
    }, {
        name: 'is_takeaway_text',
        type: 'string'
    }, {
        name: 'takeaway_no_tax',
        type: 'int'
    }, {
        name: 'takeaway_no_service',
        type: 'int'
    }, {
        name: 'is_compliment',
        type: 'int'
    }, {
        name: 'is_compliment_text',
        type: 'string'
    }, {
        name: 'product_category_name',
        type: 'string'
    }, {
        name: 'product_type',
        type: 'string'
    }, {
        name: 'product_image',
        type: 'string'
    }, {
        name: 'product_image_show',
        type: 'string'
    }, {
        name: 'product_image_src',
        type: 'string'
    }, {
        name: 'order_qty',
        type: 'float'
    }, {
        name: 'order_qty_discount',
        type: 'float'
    }, {
        name: 'order_total',
        type: 'string'
    }, {
        name: 'order_total_show',
        type: 'string'
    }, {
        name: 'order_subtotal',
        type: 'string'
    }, {
        name: 'order_subtotal_show',
        type: 'string'
    }, {
        name: 'order_total_real',
        type: 'string'
    }, {
        name: 'order_total_real_show',
        type: 'string'
    }, {
        name: 'order_status',
        type: 'string'
    }, {
        name: 'order_status_text',
        type: 'string'
    }, {
        name: 'order_notes',
        type: 'string'
    }, {
        name: 'hide_compliment_order',
        type: 'int'
    }, {
        name: 'is_active',
        type: 'int'
    }, {
        name: 'is_active_text',
        type: 'string'
    }, {
        name: 'retur_type',
        type: 'string'
    }, {
        name: 'retur_qty',
        type: 'float'
    }, {
        name: 'retur_reason',
        type: 'string'
    }, {
        name: 'is_promo',
        type: 'int'
    }, {
        name: 'promo_id',
        type: 'int'
    }, {
        name: 'promo_tipe',
        type: 'int'
    }, {
        name: 'promo_percentage',
        type: 'string'
    }, {
        name: 'promo_price',
        type: 'string'
    }, {
        name: 'promo_price_show',
        type: 'string'
    }, {
        name: 'promo_desc',
        type: 'string'
    }, {
        name: 'status_discount_text',
        type: 'string'
    }, {
        name: 'use_tax',
        type: 'int'
    }, {
        name: 'use_service',
        type: 'int'
    }, {
        name: 'is_buyget',
        type: 'int'
    }, {
        name: 'buyget_id',
        type: 'int'
    }, {
        name: 'buyget_tipe',
        type: 'string'
    }, {
        name: 'buyget_desc',
        type: 'string'
    }, {
        name: 'buyget_qty',
        type: 'float'
    }, {
        name: 'buyget_percentage',
        type: 'string'
    }, {
        name: 'buyget_total',
        type: 'string'
    }, {
        name: 'buyget_item',
        type: 'string'
    }, {
        name: 'ref_order_id',
        type: 'int'
    }, {
        name: 'free_item',
        type: 'int'
    }, {
        name: 'package_item',
        type: 'int'
    }, {
        name: 'total_taxservice_show',
        type: 'string'
    }, {
        name: 'supplier_id',
        type: 'int'
    }, {
        name: 'is_kerjasama',
        type: 'int'
    }, {
        name: 'is_kerjasama_text',
        type: 'string'
    }, {
        name: 'persentase_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil',
        type: 'string'
    }, {
        name: 'total_bagi_hasil_show',
        type: 'string'
    }, {
        name: 'item_code',
        type: 'string'
    }, {
        name: 'product_code',
        type: 'string'
    }, {
        name: 'use_stok_kode_unik',
        type: 'string'
    }, {
        name: 'data_stok_kode_unik',
        type: 'string'
    }, {
        name: 'has_list_price',
        type: 'int'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'billing/dataBilling/gridData_billingDetail_compliment',
        extraParams: {
            new_order: 1
        },
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.reservation.model.model_reservation', {
    extend: 'Ext.data.Model',
    alias: 'model_reservation',
    fields: [{
        name: 'id',
        type: 'int'
    }, {
        name: 'reservation_id',
        type: 'string'
    }, {
        name: 'reservation_number',
        type: 'string'
    }, {
        name: 'reservation_number_show',
        type: 'string'
    }, {
        name: 'reservation_date',
        type: 'string'
    }, {
        name: 'reservation_time',
        type: 'string'
    }, {
        name: 'reservation_date_time',
        type: 'string'
    }, {
        name: 'preparing_date',
        type: 'string'
    }, {
        name: 'preparing_time',
        type: 'string'
    }, {
        name: 'preparing_date_time',
        type: 'string'
    }, {
        name: 'reservation_customer_name',
        type: 'string'
    }, {
        name: 'reservation_customer_address',
        type: 'string'
    }, {
        name: 'reservation_customer_name_address',
        type: 'string'
    }, {
        name: 'reservation_customer_phone',
        type: 'string'
    }, {
        name: 'reservation_customer_phone2',
        type: 'string'
    }, {
        name: 'reservation_customer_phone3',
        type: 'string'
    }, {
        name: 'reservation_customer_phone_all',
        type: 'string'
    }, {
        name: 'reservation_date_text',
        type: 'string'
    }, {
        name: 'reservation_memo',
        type: 'string'
    }, {
        name: 'reservation_status',
        type: 'string'
    }, {
        name: 'reservation_status_text',
        type: 'string'
    }, {
        name: 'reservation_tipe',
        type: 'string'
    }, {
        name: 'reservation_tipe_text',
        type: 'string'
    }, {
        name: 'reservation_from',
        type: 'string'
    }, {
        name: 'reservation_from_text',
        type: 'string'
    }, {
        name: 'reservation_total_qty',
        type: 'string'
    }, {
        name: 'reservation_sub_total',
        type: 'string'
    }, {
        name: 'reservation_sub_total_show',
        type: 'string'
    }, {
        name: 'reservation_discount',
        type: 'string'
    }, {
        name: 'reservation_discount_show',
        type: 'string'
    }, {
        name: 'reservation_tax',
        type: 'string'
    }, {
        name: 'reservation_tax_show',
        type: 'string'
    }, {
        name: 'reservation_service',
        type: 'string'
    }, {
        name: 'reservation_service_show',
        type: 'string'
    }, {
        name: 'reservation_dp',
        type: 'string'
    }, {
        name: 'reservation_dp_show',
        type: 'string'
    }, {
        name: 'reservation_total_price',
        type: 'string'
    }, {
        name: 'reservation_total_price_show',
        type: 'string'
    }, {
        name: 'reservation_total_hpp',
        type: 'string'
    }, {
        name: 'reservation_total_hpp_show',
        type: 'string'
    }, {
        name: 'reservation_payment',
        type: 'string'
    }, {
        name: 'reservation_payment_text',
        type: 'string'
    }, {
        name: 'sales_id',
        type: 'int'
    }, {
        name: 'sales_name',
        type: 'string'
    }, {
        name: 'sales_percent',
        type: 'string'
    }, {
        name: 'sales_price',
        type: 'string'
    }, {
        name: 'sales_type',
        type: 'string'
    }, {
        name: 'sales_name_company_fee',
        type: 'string'
    }, {
        name: 'customer_id',
        type: 'int'
    }, {
        name: 'bank_id',
        type: 'int'
    }, {
        name: 'bank_name',
        type: 'string'
    }, {
        name: 'card_no',
        type: 'string'
    }, {
        name: 'billing_id',
        type: 'int'
    }, {
        name: 'billing_no',
        type: 'string'
    }, {
        name: 'total_guest',
        type: 'string'
    }, {
        name: 'tanggal_pesan',
        type: 'string'
    }],
    proxy: {
        type: 'ajax',
        url: appUrl + 'reservation/reservation/gridData',
        extraParams: {},
        actionMethods: {
            read: 'POST'
        },
        reader: {
            type: 'json',
            root: 'data',
            idProperty: 'id',
            totalProperty: 'totalCount'
        }
    }
});
Ext.define('ExtApp.modules.master_pos.store.store_productCategory', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_productCategory',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterSales', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterSales',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterCustomer', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterCustomer',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterRepresentative', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterRepresentative',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterBank', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterBank',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterFloorplan', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterFloorplan',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterTable', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterTable',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterTableInv', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterTableInv',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_masterPrinter', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_masterPrinter',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_printerTipe', {
    extend: 'Ext.data.Store',
    fields: ['val', 'name'],
    data: [{
        "val": "BIRCH",
        "name": "BIRCH"
    }, {
        "val": "EPPOS",
        "name": "EPPOS"
    }, {
        "val": "EPSON",
        "name": "EPSON"
    }, {
        "val": "ENIBIT",
        "name": "ENIBIT"
    }, {
        "val": "GPRINTER",
        "name": "GPRINTER"
    }, {
        "val": "HSPOS",
        "name": "HSPOS"
    }, {
        "val": "IWARE",
        "name": "IWARE"
    }, {
        "val": "MINIPOS",
        "name": "MINIPOS"
    }, {
        "val": "PANDA",
        "name": "PANDA"
    }, {
        "val": "QPOS",
        "name": "QPOS"
    }, {
        "val": "SANTANG",
        "name": "SANTANG"
    }, {
        "val": "SEWOO",
        "name": "SEWOO"
    }, {
        "val": "STAR",
        "name": "STAR"
    }, {
        "val": "UNICORN",
        "name": "UNICORN"
    }, {
        "val": "VCS",
        "name": "VCS"
    }, {
        "val": "XPRINTER",
        "name": "XPRINTER"
    }, {
        "val": "ZJIANG",
        "name": "ZJIANG"
    }],
    autoLoad: false
});
Ext.define('ExtApp.modules.master_pos.store.store_printerPIN', {
    extend: 'Ext.data.Store',
    fields: ['val', 'name'],
    data: [{
        "val": "32 CHAR",
        "name": "32 CHAR/58mm"
    }, {
        "val": "40 CHAR",
        "name": "40 CHAR"
    }, {
        "val": "42 CHAR",
        "name": "42 CHAR"
    }, {
        "val": "46 CHAR",
        "name": "46 CHAR"
    }, {
        "val": "48 CHAR",
        "name": "48 CHAR"
    }],
    autoLoad: false
});
Ext.define('ExtApp.modules.master_pos.store.store_discountPlanner', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_discountPlanner',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_productVarian', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_productVarian',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_orderNote', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.master_pos.model.model_orderNote',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.master_pos.store.store_paymentTypeCashier', {
    extend: 'Ext.data.Store',
    fields: ['val', 'name'],
    data: [{
        "val": "credit_ar",
        "name": "Credit - AR",
        "id": 4
    }, {
        "val": "debit",
        "name": "Debit Card",
        "id": 2
    }, {
        "val": "credit",
        "name": "Credit Card",
        "id": 3
    },  {
        "val": "cash",
        "name": "Cash",
        "id": 1
    }],
    autoLoad: false
});
Ext.define('ExtApp.modules.cashier.store.store_masterProductCashier', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.cashier.model.model_masterProductCashier',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_get_dataBilling', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_get_dataBilling',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_dataBilling', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_dataBilling',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_billingDetail', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_billingDetail',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_billingDetail_split', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_billingDetail_split',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_billingDetail_discount', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_billingDetail_discount',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.billing.store.store_billingDetail_compliment', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.billing.model.model_billingDetail_compliment',
    autoLoad: false,
    remoteSort: true
});
Ext.define('ExtApp.modules.reservation.store.store_reservation', {
    extend: 'Ext.data.Store',
    model: 'ExtApp.modules.reservation.model.model_reservation',
    autoLoad: false,
    remoteSort: true
});
Ext.define("ExtApp.modules.cashier.view.billingCashier", {
    openWindow: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var v_this = this;
        var helperGrid = theApp.getHelper('Grid');
        var phpJs = theApp.getHelper('phpJs');
        me.store_billingCashierDetail = theApp.copyStore('billing', 'store_billingDetail', 'store_billingDetail');
        me.store_billingCashierDetail.proxy.extraParams.billing_id = -1;
        me.store_billingCashierDetail.proxy.extraParams.limit = 99999;
        me.store_billingCashierDetail.proxy.extraParams.keywords = '';
        var selModel_billingCashier_billingDetail = Ext.create('Ext.selection.CheckboxModel', {
            mode: 'SIMPLE',
            listeners: {
                selectionchange: function (sm, selections) {}
            }
        });
        me.store_productCategory_billingCashier = theApp.getStore('store_productCategory_billingCashier', false);
        if (me.store_productCategory_billingCashier == false) {
            me.store_productCategory_billingCashier = theApp.copyStore('master_pos', 'store_productCategory', 'store_productCategory_billingCashier');
        }
        me.store_productCategory_billingCashier.proxy.extraParams.limit = 9999;
        me.store_productCategory_billingCashier.proxy.extraParams.show_all_text = 1;
        me.store_productCategory_billingCashier.proxy.extraParams.show_choose_text = 0;
        me.store_productCategory_billingCashier.proxy.extraParams.is_dropdown = 1;
        me.store_productCategory_billingCashier.proxy.extraParams.is_active = 1;
        me.store_productCategory_billingCashier.proxy.extraParams.keywords = '';
        me.store_masterProduct_billingCashier = theApp.getStore('store_masterProduct_billingCashier', false);
        if (me.store_masterProduct_billingCashier == false) {
            me.store_masterProduct_billingCashier = theApp.copyStore('cashier', 'store_masterProductCashier', 'store_masterProduct_billingCashier');
        }
        me.store_masterProduct_billingCashier.proxy.extraParams.limit = 9999999;
        me.store_masterProduct_billingCashier.proxy.extraParams.show_all_text = 0;
        me.store_masterProduct_billingCashier.proxy.extraParams.show_choose_text = 0;
        me.store_masterProduct_billingCashier.proxy.extraParams.is_dropdown = 0;
        me.store_masterProduct_billingCashier.proxy.extraParams.product_type = '';
        me.store_masterProduct_billingCashier.proxy.extraParams.keywords = '';
        me.store_masterProduct_billingCashier.proxy.extraParams.is_active = 1;
        me.store_masterProduct_billingCashier.proxy.extraParams.from_module = 'cashier';
        me.store_billingCashier_MergeBill = theApp.getStore('store_billingCashier_MergeBill', false);
        if (me.store_billingCashier_MergeBill == false) {
            me.store_billingCashier_MergeBill = theApp.copyStore('billing', 'store_get_dataBilling', 'store_billingCashier_MergeBill');
        }
        me.store_billingCashier_MergeBill.proxy.extraParams.billing_id = '';
        me.store_billingCashier_MergeBill.proxy.extraParams.limit = 99999;
        me.store_billingCashierDetail_split = theApp.getStore('store_billingCashierDetail_split', false);
        if (me.store_billingCashierDetail_split == false) {
            me.store_billingCashierDetail_split = theApp.copyStore('billing', 'store_billingDetail_split', 'store_billingCashierDetail_split');
        }
        me.store_billingCashierDetail_split.proxy.extraParams.billing_id = '';
        me.store_billingCashierDetail_split.proxy.extraParams.limit = 99999;
        me.store_billingCashierDetail_discount = theApp.getStore('store_billingCashierDetail_discount', false);
        if (me.store_billingCashierDetail_discount == false) {
            me.store_billingCashierDetail_discount = theApp.copyStore('billing', 'store_billingDetail_discount', 'store_billingCashierDetail_discount');
        }
        me.store_billingCashierDetail_discount.proxy.extraParams.billing_id = '';
        me.store_billingCashierDetail_discount.proxy.extraParams.discount_id = '';
        me.store_billingCashierDetail_discount.proxy.extraParams.limit = 99999;
        me.store_billingCashierDetail_compliment = theApp.getStore('store_billingCashierDetail_compliment', false);
        if (me.store_billingCashierDetail_compliment == false) {
            me.store_billingCashierDetail_compliment = theApp.copyStore('billing', 'store_billingDetail_compliment', 'store_billingCashierDetail_compliment');
        }
        me.store_billingCashierDetail_compliment.proxy.extraParams.billing_id = '';
        me.store_billingCashierDetail_compliment.proxy.extraParams.limit = 99999;
        if (opt_reservation_cashier == '1') {
            var hide_reservationBilling = false;
        } else {
            var hide_reservationBilling = true;
        }
        var selModel_billingCashier_holdBilling = Ext.create('Ext.selection.CheckboxModel', {
            mode: 'SIMPLE',
            listeners: {
                selectionchange: function (sm, selections) {
                    if (selections.length > 0) {
                        if (selections.length == 1) {
                            Ext.getCmp('billingCashier_MergeBill').setDisabled(true);
                            Ext.getCmp('billingCashier_unMergeBill').setDisabled(false);
                            Ext.getCmp('billingCashier_SplitBill').setDisabled(false);
                        } else {
                            Ext.getCmp('billingCashier_MergeBill').setDisabled(false);
                            Ext.getCmp('billingCashier_unMergeBill').setDisabled(true);
                            Ext.getCmp('billingCashier_SplitBill').setDisabled(true);
                        }
                    } else {
                        Ext.getCmp('billingCashier_MergeBill').setDisabled(true);
                        Ext.getCmp('billingCashier_unMergeBill').setDisabled(true);
                        Ext.getCmp('billingCashier_SplitBill').setDisabled(true);
                    }
                }
            }
        });
        var store_billingCashier_holdBilling = theApp.getStore('store_billingCashier_holdBilling', false);
        if (store_billingCashier_holdBilling == false) {
            store_billingCashier_holdBilling = theApp.copyStore('billing', 'store_dataBilling', 'store_billingCashier_holdBilling');
        }
        var store_billingCashier_paidBilling = theApp.getStore('billingCashier_paidBilling', false);
        if (store_billingCashier_paidBilling == false) {
            store_billingCashier_paidBilling = theApp.copyStore('billing', 'store_dataBilling', 'billingCashier_paidBilling');
        }
        me.store_multiOrderList_billingCashier = theApp.getStore('store_multiOrderList_billingCashier', false);
        if (me.store_multiOrderList_billingCashier == false) {
            me.store_multiOrderList_billingCashier = theApp.copyStore('billing', 'store_dataBilling', 'store_multiOrderList_billingCashier');
        }
        var store_billingCashier_reservationList = theApp.getStore('store_billingCashier_reservationList', false);
        if (store_billingCashier_reservationList == false) {
            store_billingCashier_reservationList = theApp.copyStore('reservation', 'store_reservation', 'store_billingCashier_reservationList');
        }
        store_billingCashier_holdBilling.proxy.extraParams.billing_status = 'hold';
        store_billingCashier_holdBilling.proxy.extraParams.is_peruser = 0;
        store_billingCashier_holdBilling.proxy.extraParams.skip_date = 0;
        store_billingCashier_holdBilling.proxy.extraParams.use_payment_date = 0;
        store_billingCashier_holdBilling.proxy.extraParams.sorting_by = 'updated';
        store_billingCashier_holdBilling.proxy.extraParams.use_range_date = 1;
        store_billingCashier_holdBilling.proxy.extraParams.keywords = '';
        store_billingCashier_holdBilling.proxy.extraParams.table_id = 0;
        store_billingCashier_holdBilling.proxy.extraParams.limit = 25;
        store_billingCashier_paidBilling.proxy.extraParams.billing_status = 'paid';
        store_billingCashier_paidBilling.proxy.extraParams.is_peruser = 0;
        store_billingCashier_paidBilling.proxy.extraParams.skip_date = 0;
        store_billingCashier_paidBilling.proxy.extraParams.use_payment_date = 0;
        store_billingCashier_paidBilling.proxy.extraParams.sorting_by = 'payment_date';
        store_billingCashier_paidBilling.proxy.extraParams.use_range_date = 1;
        store_billingCashier_paidBilling.proxy.extraParams.keywords = '';
        store_billingCashier_paidBilling.proxy.extraParams.table_id = 0;
        store_billingCashier_paidBilling.proxy.extraParams.limit = 25;
        me.store_multiOrderList_billingCashier.proxy.extraParams.billing_status = 'hold';
        me.store_multiOrderList_billingCashier.proxy.extraParams.is_peruser = 0;
        me.store_multiOrderList_billingCashier.proxy.extraParams.skip_date = 0;
        me.store_multiOrderList_billingCashier.proxy.extraParams.use_payment_date = 0;
        me.store_multiOrderList_billingCashier.proxy.extraParams.sorting_by = 'payment_date';
        me.store_multiOrderList_billingCashier.proxy.extraParams.use_range_date = 1;
        me.store_multiOrderList_billingCashier.proxy.extraParams.keywords = '';
        me.store_multiOrderList_billingCashier.proxy.extraParams.table_id = 0;
        me.store_multiOrderList_billingCashier.proxy.extraParams.limit = 9999;
        store_billingCashier_reservationList.proxy.extraParams.not_cancel = 1;
        store_billingCashier_reservationList.proxy.extraParams.from_cashier = 1;
        store_billingCashier_reservationList.proxy.extraParams.limit = 9999;
        store_billingCashier_reservationList.proxy.extraParams.keywords = '';
        var add_parameter = '_dc=' + phpJs.mktime();
        add_parameter += '&tipe=';
        add_parameter += '&printer_id=';
        add_parameter += '&print_type=';
        add_parameter += '&id=';
        add_parameter += '&do=';
        add_parameter += '&initialize=1';
        var url_report = appUrl + 'cashier/billingCashier/doPrint?' + add_parameter;
        me.pagingtb_holdBilling = helperGrid.paging({
            ds: store_billingCashier_holdBilling,
            title: 'Hold Billing'
        });
        me.pagingtb_paidBilling = helperGrid.paging({
            ds: store_billingCashier_paidBilling,
            title: 'Paid Billing'
        });
        me.pagingtb_reservationList = helperGrid.paging({
            ds: store_billingCashier_reservationList,
            title: 'Reservation'
        });
        var hide_detail_taxservice_showhide = false;
        var hide_detail_takeaway_showhide = false;
        var hide_detail_compliment_showhide = false;
        if (opt_hide_detail_taxservice == 1) {
            var hide_detail_taxservice_showhide = true;
        }
        if (opt_hide_detail_takeaway == 1) {
            var hide_detail_takeaway_showhide = true;
        }
        if (opt_hide_detail_compliment == 1) {
            var hide_detail_compliment_showhide = true;
        }
        var tpl_menu_category_bg_color = '000000';
        var tpl_menu_category_text_color = 'FFFFFF';
        var tpl_menu_bg_color = '000000';
        var tpl_menu_text_color = 'FFFFFF';
        if (opt_cashier_menu_bg_text_color == 1) {
            tpl_menu_category_bg_color = '{product_category_bg_color}';
            tpl_menu_category_text_color = '{product_category_text_color}';
            tpl_menu_bg_color = '{product_bg_color}';
            tpl_menu_text_color = '{product_text_color}';
        }
        var tpl_menu_image = '<div class="ux-product-list-icon" style="background-color:#' + tpl_menu_bg_color + ';">';
        var tpl_menu_image_ = '</div>';
        var tpl_menu_image_default = '';
        var tpl_menu_text = '<div class="ux-product-list-text" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#' + tpl_menu_bg_color + '; color:#' + tpl_menu_text_color + '; text-align: center; font-size: 16px; height:auto; font-weight:bold; padding: 5px; line-height:20px;">{product_name_code}<div>Rp {product_price_show}</div></div>';
        var tpl_menu_category_box = '<div class="ux-product-list-icon" style="background-color:#' + tpl_menu_category_bg_color + ';">';
        var tpl_menu_category_box_ = '</div>';
        var tpl_menu_category_text = '<div class="ux-product-list-text" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#' + tpl_menu_category_bg_color + '; color:#' + tpl_menu_category_text_color + '; text-align: center; font-size: 16px; height:auto; font-weight:bold; padding: 5px; line-height:20px;"><div>{product_category_name}</div></div>';
        if (opt_cashier_display_menu_image == 1) {
            tpl_menu_image = '<div class="ux-product-list-icon" style="background:url({product_image_src}) center center no-repeat; background-color:#' + tpl_menu_bg_color + ';">';
            tpl_menu_image_default = '<img src="' + Ext.BLANK_IMAGE_URL + '" title="{product_name}">';
            tpl_menu_text = '<div class="ux-product-list-text" style="background-color:rgba(0,0,0,0.85); color:#FFFFFF; font-weight:bold;">{product_name_code}<div>Rp {product_price_show}</div></div>';
            if (opt_cashier_menu_bg_text_color == 1) {
                tpl_menu_text = '<div class="ux-product-list-text" style="opacity:0.80; text-shadow: none; background-color:#' + tpl_menu_bg_color + '; color:#' + tpl_menu_text_color + '; font-weight:bold;">{product_name_code}<div>Rp {product_price_show}</div></div>';
            }
            tpl_menu_image_ = '</div>';
        }
        me.store_tableFloorPlan_billingCashier = theApp.getStore('store_tableFloorPlan_billingCashier', false);
        if (me.store_tableFloorPlan_billingCashier == false) {
            me.store_tableFloorPlan_billingCashier = theApp.copyStore('master_pos', 'store_masterFloorplan', 'store_tableFloorPlan_billingCashier');
        }
        me.store_tableFloorPlan_billingCashier.proxy.extraParams.limit = 9999;
        me.store_tableFloorPlan_billingCashier.proxy.extraParams.purpose = 'floorplanList';
        me.store_tableList_billingCashier = theApp.getStore('store_tableList_billingCashier', false);
        if (me.store_tableList_billingCashier == false) {
            me.store_tableList_billingCashier = theApp.copyStore('master_pos', 'store_masterTableInv', 'store_tableList_billingCashier');
        }
        me.store_tableList_billingCashier.proxy.extraParams.limit = 9999;
        me.store_tableList_billingCashier.proxy.extraParams.show_available = 0;
        me.store_tableList_billingCashier.proxy.extraParams.show_selected = 0;
        me.store_tableList_billingCashier.proxy.extraParams.curr_billing = 0;
        me.store_tableList_billingCashier.proxy.extraParams.keywords = '';
        me.store_tableList_billingCashier.proxy.extraParams.purpose = 'tableList';
        me.store_tableList_billingCashier.proxy.extraParams.floorplan_id = 0;
        me.store_tableList_billingCashier.proxy.extraParams.floorplan_name = '';
        var thisDefaultFocusMainCashier = 'billingCashier_ProductList_ToolbarSearch_searchName';
        if (opt_from_apps == 1) {
            thisDefaultFocusMainCashier = '';
        }
        return desktop.createWindow({
            id: me.id,
            title: 'Cashier',
            width: 700,
            height: 400,
            iconCls: 'icon-grid',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            closable: false,
            border: 0,
            layout: {
                type: 'fit'
            },
            defaultFocus: thisDefaultFocusMainCashier,
            items: [{
                xtype: 'form',
                id: 'form_billingCashier',
                border: 0,
                height: 256,
                layout: {
                    type: 'border'
                },
                items: [{
                    xtype: 'panel',
                    flex: 1.2,
                    border: 0,
                    region: 'center',
                    margins: '0 5 0 0',
                    padding: '0 0 0 5',
                    layout: 'fit',
                    items: [{
                        xtype: 'gridpanel',
                        border: 0,
                        multiSelect: false,
                        id: 'grid_billingCashier_billingDetail',
                        store: me.store_billingCashierDetail,
                        scroll: true,
                        selModel: selModel_billingCashier_billingDetail,
                        columns: [{
                            xtype: 'actioncolumn',
                            width: 40,
                            align: 'center',
                            items: [{
                                iconCls: 'icon-list-order',
                                tooltip: 'Ubah Order/Pesanan',
                                handler: function (grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    me.formType_orderProduct = 'edit';
                                    me.data_orderProduct = rec.data;
                                    if (me.CURR_BILL_DATA.billing_status == 'paid') {} else {
                                        if (rec.data.order_status == 'done') {
                                            ExtApp.Msg.warning('Order/Pesanan sudah di print ke Bar/Kitchen<br/>Silahkan lakukan order/pesanan baru');
                                        } else {
                                            me.createWindow(me, 'orderProduct');
                                        }
                                    }
                                }
                            }]
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'item_no',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'item_code',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_code',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_total',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_subtotal',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_price',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_price_show',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_name',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_name_show',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_type',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'billing_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_price_hpp',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_varian_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'varian_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'has_varian',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'include_tax',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'tax_percentage',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'tax_total',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'tax_total_show',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'include_service',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'service_percentage',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'service_total',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'service_total_show',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_perbilling',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_notes',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_percentage',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_price',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_total',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_normal_price',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'is_promo',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_tipe',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_percentage',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_price',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_price_show',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'promo_desc',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'use_tax',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'use_service',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'is_kerjasama',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'supplier_id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'persentase_bagi_hasil',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'total_bagi_hasil',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'takeaway_no_tax',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'takeaway_no_service',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'product_detail_info',
                            text: 'NAMA MENU / ITEM',
                            width: 180,
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_qty',
                            text: 'QTY',
                            width: 50,
                            align: 'center',
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'discount_total_show',
                            text: 'DISC',
                            width: 85,
                            align: 'right',
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_total_show',
                            text: 'TOTAL',
                            width: 100,
                            align: 'right',
                            sortable: false,
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_subtotal_show',
                            text: 'TOTAL',
                            width: 100,
                            align: 'right',
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'total_taxservice_show',
                            text: 'TAX/SRV',
                            width: 85,
                            align: 'right',
                            sortable: false,
                            hidden: hide_detail_taxservice_showhide,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'order_status_text',
                            text: 'STATUS',
                            width: 90,
                            align: 'center',
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'is_takeaway_text',
                            text: 'T/A',
                            width: 40,
                            align: 'center',
                            sortable: false,
                            hidden: hide_detail_takeaway_showhide,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'is_compliment_text',
                            text: 'COMP',
                            width: 60,
                            align: 'center',
                            sortable: false,
                            hidden: hide_detail_compliment_showhide,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'retur_qty',
                            text: 'R.QTY',
                            width: 60,
                            align: 'center',
                            sortable: false,
                            hidden: true,
                            hideable: false
                        }],
                        dockedItems: [{
                            xtype: 'toolbar',
                            dock: 'bottom',
                            bodyPadding: '5 0 5 0',
                            height: 60,
                            border: 0,
                            items: [{
                                xtype: 'button',
                                name: 'deleteButton_billingCashier_billingDetail',
                                id: 'deleteButton_billingCashier_billingDetail',
                                text: 'CANCEL<br/>ORDER',
                                height: 50,
                                cls: 'button-billing',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa cancel order, silahkan lakukan Void Bill ke Hold Bill');
                                        } else {
                                            var getSelection = Ext.getCmp('grid_billingCashier_billingDetail').getSelectionModel().selected;
                                            if (getSelection.length > 0) {
                                                for (x in getSelection.items) {
                                                    if (getSelection.items[x].data.order_status == 'done' && getSelection.length > 1 && opt_mode_cashier_express == 0) {
                                                        ExtApp.Msg.warning('Status Pesanan: ' + getSelection.items[x].data.product_name + ' sudah selesai</br>tidak bisa di batalkan bersama dengan pesanan yg lain!');
                                                        return false;
                                                    }
                                                }
                                                me.deleteOrderDataTotal = getSelection.length;
                                                me.deleteOrderData = getSelection.items[0].data;
                                                if (opt_mode_cashier_express == 1) {
                                                    me.deleteConfirmOrderBillingDetail();
                                                } else {
                                                    me.createWindow(me, 'setCancelOrder');
                                                }
                                            } else {
                                                ExtApp.Msg.info('Silahkan pilih pesanan/order!');
                                            }
                                        }
                                    }
                                }
                            }/*, {
                                xtype: 'button',
                                name: 'setTableButton_billingCashier_billingDetail',
                                id: 'setTableButton_billingCashier_billingDetail',
                                text: 'SET<br/>TABLE',
                                height: 50,
                                cls: 'button-billing',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa set table');
                                        } else {
                                            me.source_loadDataViewTable = 'form_billingCashier';
                                            me.createWindow(me, 'loadDataViewTable');
                                        }
                                    }
                                }
                            }*/, {
                                xtype: 'button',
                                name: 'setGuestButton_billingCashier_billingDetail',
                                id: 'setGuestButton_billingCashier_billingDetail',
                                text: 'TOTAL<br/>GUEST',
                                height: 50,
                                cls: 'button-billing',
                                disabled: true,
                                hidden: true,
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa set total guest');
                                        } else {
                                            me.source_loadDataViewTotalGuest = 'form_billingCashier';
                                            me.createWindow(me, 'loadDataViewTotalGuest');
                                        }
                                    }
                                }
                            }, {
                                xtype: 'button',
                                name: 'setBillInfoButton_billingCashier_billingDetail',
                                id: 'setBillInfoButton_billingCashier_billingDetail',
                                text: 'BILL<br/>INFO',
                                height: 50,
                                cls: 'button-billing',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa set bill info');
                                        } else {
                                            me.createWindow(me, 'loadDataViewBillInfo');
                                        }
                                    }
                                }
                            }, {
                                xtype: 'button',
                                name: 'printInvoiceButton_billingCashier_billingDetail',
                                id: 'printInvoiceButton_billingCashier_billingDetail',
                                text: 'PRINT<br/>INVOICE',
                                height: 50,
                                cls: 'button-billing',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa print invoice');
                                        } else {
                                            me.printReceipt_printBilling(1);
                                        }
                                    }
                                }
                            }, '->', {
                                xtype: 'panel',
                                margin: '0',
                                layout: 'anchor',
                                border: false,
                                width: 160,
                                items: [{
                                    xtype: 'displayfield',
                                    height: 10,
                                    width: 155,
                                    margin: '0 5 0 0',
                                    labelSeparator: '',
                                    value: 'TOTAL ORDER',
                                    align: 'right',
                                    fieldStyle: 'font-weight:bold; font-size:14px; text-align:right; color:#666;',
                                    labelStyle: 'font-weight:bold; font-size:14px; text-align:right; color:#666;',
                                }, {
                                    xtype: 'displayfield',
                                    name: 'total_billingDetail',
                                    width: 155,
                                    labelSeparator: '',
                                    value: '',
                                    anchor: '100%',
                                    align: 'right',
                                    margin: '0 5 0 0',
                                    fieldStyle: 'font-weight:bold; font-size:20px; text-align:right;',
                                    labelStyle: 'font-weight:bold; font-size:20px; text-align:right;'
                                }]
                            }]
                        }],
                        listeners: {
                            itemdblclick: function (view, rec, item, index, eventObj) {
                                me.formType_orderProduct = 'edit';
                                me.data_orderProduct = rec.data;
                                if (me.CURR_BILL_DATA.billing_status == 'paid') {} else {
                                    if (rec.data.order_status == 'done') {
                                        ExtApp.Msg.warning('Order/Pesanan sudah di print ke Bar/Kitchen<br/>Silahkan lakukan order/pesanan baru');
                                    } else {
                                        me.createWindow(me, 'orderProduct');
                                    }
                                }
                            }
                        }
                    }, {
                        xtype: 'panel',
                        border: 0,
                        id: 'previewArea_billingCashier_billingDetail',
                        layout: 'fit',
                        hidden: true,
                        items: [{
                            xtype: "component",
                            id: 'print_area_billingCashier',
                            autoEl: {
                                tag: "iframe",
                                src: url_report
                            },
                            border: false,
                            height: 200,
                        }, {
                            xtype: "component",
                            id: 'print_area2_billingCashier',
                            autoEl: {
                                tag: "iframe",
                                src: url_report
                            },
                            border: false,
                            height: 200,
                        }],
                        dockedItems: [{
                            xtype: 'toolbar',
                            dock: 'bottom',
                            bodyPadding: '5 0 5 0',
                            height: 60,
                            border: 0,
                            items: [{
                                xtype: 'button',
                                name: 'showGrid_billingDetail',
                                id: 'showGrid_billingDetail',
                                labelWidth: 100,
                                text: 'EDIT ORDER',
                                height: 50,
                                cls: 'button-billing',
                                listeners: {
                                    click: function () {
                                        if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                            ExtApp.Msg.warning('Billing: ' + me.CURR_BILL_DATA.billing_no + ' sudah dibayar<br/>tidak bisa edit order');
                                        } else {
                                            me.previewListDetail(0);
                                        }
                                    }
                                }
                            }, '->', {
                                xtype: 'panel',
                                margin: '0',
                                layout: 'anchor',
                                border: false,
                                width: 160,
                                items: [{
                                    xtype: 'displayfield',
                                    height: 10,
                                    width: 155,
                                    margin: '0 5 0 0',
                                    labelSeparator: '',
                                    value: 'TOTAL ORDER',
                                    align: 'right',
                                    fieldStyle: 'font-weight:bold; font-size:14px; text-align:right; color:#666;',
                                    labelStyle: 'font-weight:bold; font-size:14px; text-align:right; color:#666;',
                                }, {
                                    xtype: 'displayfield',
                                    name: 'total_billingDetail_preview',
                                    width: 155,
                                    labelSeparator: '',
                                    value: '',
                                    anchor: '100%',
                                    align: 'right',
                                    margin: '0 5 0 0',
                                    fieldStyle: 'font-weight:bold; font-size:20px; text-align:right;',
                                    labelStyle: 'font-weight:bold; font-size:20px; text-align:right;'
                                }]
                            }]
                        }]
                    }],
                    dockedItems: [{
                        xtype: 'toolbar',
                        dock: 'top',
                        bodyPadding: '0 5 0 5',
                        items: [{
                            xtype: 'displayfield',
                            name: 'billingCashier_billing_no',
                            value: '',
                            fieldStyle: 'font-weight:bold; font-size:14px;',
                        }, ' | ', {
                            xtype: 'displayfield',
                            name: 'billingCashier_total_guest',
                            id: 'billingCashier_total_guest',
                            hidden: true,
                        }, {
                            xtype: 'displayfield',
                            name: 'billingCashier_total_crew',
                            id: 'billingCashier_total_crew',
                            hidden: true,
                        }, {
                            xtype: 'displayfield',
                            name: 'billingCashier_total_gh',
                            id: 'billingCashier_total_gh',
                            hidden: true,
                        }, {
                            xtype: 'displayfield',
                            name: 'billingCashier_table_id',
                            id: 'billingCashier_table_id',
                            hidden: true,
                        }, {
                            xtype: 'displayfield',
                            name: 'billingCashier_table_no',
                            id: 'billingCashier_table_no',
                            value: ' ',
                            fieldStyle: 'font-weight:bold; font-size:14px;',
                        }, '->', {
                            xtype: 'displayfield',
                            name: 'billingCashier_billing_datetime',
                            value: '',
                            fieldStyle: 'font-weight:bold; font-size:14px;',
                        }, '', {
                            xtype: 'button',
                            name: 'refreshButton_billingCashier_billingDetail',
                            id: 'refreshButton_billingCashier_billingDetail',
                            iconCls: 'btn-refresh',
                            listeners: {
                                click: function () {
                                    me.load_store_billingCashierDetail();
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'lockButton_billingCashier',
                            id: 'lockButton_billingCashier',
                            iconCls: 'btn-lock',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.lockBillingCashier(0);
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'unlockButton_billingCashier',
                            id: 'unlockButton_billingCashier',
                            iconCls: 'btn-lock-open',
                            listeners: {
                                click: function () {
                                    me.lockBillingCashier(1);
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'previewListButton_billingCashier',
                            id: 'previewListButton_billingCashier',
                            iconCls: 'icon-receipt',
                            listeners: {
                                click: function () {
                                    me.previewListDetail(1);
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'previewListButton2_billingCashier',
                            id: 'previewListButton2_billingCashier',
                            iconCls: 'icon-list-order',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.previewListDetail(0);
                                }
                            }
                        }]
                    }, {
                        xtype: 'toolbar',
                        dock: 'bottom',
                        height: 60,
                        bodyPadding: 5,
                        items: [{
                            xtype: 'button',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            text: 'NEW<br/>BILL',
                            cls: 'button-billing',
                            id: me.id + '_newBilling_button',
                            listeners: {
                                click: function () {
                                    me.confirmCreateNewBilling(0);
                                }
                            }
                        }, {
                            xtype: 'button',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            text: 'CANCEL<br/>BILL',
                            cls: 'button-billing',
                            id: me.id + '_cancelBilling_button',
                            listeners: {
                                click: function () {
                                    me.confirmCancelBilling();
                                }
                            }
                        }, {
                            xtype: 'button',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            text: 'CLOSE<br/>BILL',
                            cls: 'button-billing',
                            id: me.id + '_closeBilling_button',
                            listeners: {
                                click: function () {
                                    me.confirmCloseBilling();
                                }
                            }
                        }, {
                            xtype: 'button',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            text: 'HOLD<br/>BILL',
                            cls: 'button-billing',
                            id: me.id + '_holdBilling_button',
                            listeners: {
                                click: function () {
                                    me.confirmHoldBilling();
                                }
                            }
                        }, '->', {
                            xtype: 'button',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            text: 'EDIT<br/>BILL',
                            cls: 'button-billing',
                            id: me.id + '_payBilling_button',
                            listeners: {
                                click: function () {
                                    me.confirmPayBilling();
                                }
                            }
                        }, {
                            xtype: 'button',
                            id: me.id + '_cancelBillingPaid_save',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.doCancelBillingPaid();
                                }
                            }
                        }, {
                            xtype: 'button',
                            id: me.id + '_cancelBilling_save',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.doCancelBilling();
                                }
                            }
                        }, {
                            xtype: 'button',
                            id: me.id + '_holdBilling_save',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.doHoldBillingPaid();
                                }
                            }
                        }, {
                            xtype: 'button',
                            id: me.id + '_cancelOrder_save',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.deleteOrderBillingDetail();
                                }
                            }
                        }]
                    }]
                }, {
                    xtype: 'panel',
                    id: 'rightPanelCashier',
                    flex: 1.5,
                    border: 0,
                    padding: '0 5 0 0',
                    region: 'east',
                    layout: 'fit',
                    items: [{
                        xtype: 'panel',
                        id: 'billingCashier_ProductList_area',
                        border: 0,
                        layout: 'fit',
                        bodyStyle: 'background:url(' + appUrl + 'assets/desktop/wallpapers/wall_preferences.jpg) center center;',
                        items: [{
                            xtype: 'dataview',
                            autoScroll: true,
                            trackOver: true,
                            itemSelector: 'div.ux-product-list',
                            overItemCls: 'product-list-over',
                            id: 'billingCashier_ProductList',
                            store: me.store_masterProduct_billingCashier,
                            loadMask: false,
                            minHeight: 300,
                            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list" id="product-list-{id}">', tpl_menu_image, tpl_menu_image_default, tpl_menu_text, tpl_menu_image_, '</div>', '</tpl>', '<div class="x-clear"></div>'),
                            listeners: {
                                'itemclick': function (dataView, record) {
                                    me.formType_orderProduct = 'add';
                                    me.data_orderProduct = record;
                                    if (opt_mode_cashier_express == 1) {
                                        if (me.data_orderProduct.has_varian == 1) {
                                            me.createWindow(me, 'orderProduct');
                                        } else {
                                            me.save_orderProductExpress();
                                        }
                                    } else {
                                        me.createWindow(me, 'orderProduct');
                                    }
                                }
                            }
                        }, {
                            xtype: 'dataview',
                            autoScroll: true,
                            trackOver: true,
                            itemSelector: 'div.ux-product-list',
                            overItemCls: 'product-list-over',
                            id: 'billingCashier_CategoryList',
                            store: me.store_productCategory_billingCashier,
                            loadMask: false,
                            minHeight: 300,
                            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list" id="product-category-list-{id}">', tpl_menu_category_box, tpl_menu_category_text, tpl_menu_category_box_, '</div>', '</tpl>', '<div class="x-clear"></div>'),
                            listeners: {
                                'itemclick': function (dataView, record) {
                                    Ext.getCmp("billingCashier_ProductList").show();
                                    Ext.getCmp("billingCashier_CategoryList").hide();
                                    Ext.getCmp("billingCashier_TableList").hide();
                                    var data_selectCategory = record.data;
                                    var getCatID = data_selectCategory.id;
                                    var store = Ext.getCmp('billingCashier_ProductList').store,
                                        view = Ext.getCmp('billingCashier_ProductList'),
                                        selModel = view.getSelectionModel(),
                                        selection = selModel.getSelection()[0];
                                    store.suspendEvents();
                                    if (getCatID == -1) {
                                        store.clearFilter();
                                    } else {
                                        store.clearFilter(true);
                                        store.filter({
                                            filterFn: function (item) {
                                                return item.get("category_id") == getCatID;
                                            }
                                        });
                                    }
                                    store.resumeEvents();
                                    if (selection && store.indexOf(selection) === -1) {
                                        selModel.clearSelections();
                                    }
                                    view.refresh();
                                }
                            }
                        }, {
                            xtype: 'dataview',
                            autoScroll: true,
                            trackOver: true,
                            itemSelector: 'div.ux-product-list',
                            overItemCls: 'product-list-over',
                            id: 'billingCashier_TableList',
                            store: me.store_tableList_billingCashier,
                            loadMask: false,
                            hidden: true,
                            minHeight: 300,
                            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list" id="table-list-{id}">', '<div class="ux-product-list-icon" style="background-color:#{table_color};">', '<div class="ux-product-list-text" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#{table_color}; color:#FFFFF; text-align: center; height:120px; padding: 5px; line-height:20px;">{table_info}</div>', '</div>', '</div>', '</tpl>', '<div class="x-clear"></div>'),
                            listeners: {
                                'itemclick': function (dataView, record) {
                                    var data_selectTable = record.data;
                                    if (data_selectTable.floorplan_button == 1) {
                                        Ext.getCmp("billingCashier_ProductList").hide();
                                        Ext.getCmp("billingCashier_CategoryList").hide();
                                        Ext.getCmp("billingCashier_TableList").hide();
                                        Ext.getCmp("billingCashier_FloorplanList").show();
                                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                                        me.store_tableFloorPlan_billingCashier.load();
                                    } else {
                                        if (data_selectTable.table_status == 'booked') {
                                            if (data_selectTable.total_billing > 1) {
                                                Ext.getCmp("billingCashier_ProductList").hide();
                                                Ext.getCmp("billingCashier_CategoryList").hide();
                                                Ext.getCmp("billingCashier_TableList").hide();
                                                Ext.getCmp("billingCashier_FloorplanList").hide();
                                                Ext.getCmp("billingCashier_MultiOrderList").show();
                                                var myMask = new Ext.LoadMask(Ext.getCmp('billingCashier_MultiOrderList'), {
                                                    msg: "Loading Data Billing..."
                                                });
                                                myMask.show();
                                                me.store_multiOrderList_billingCashier.proxy.extraParams.table_id = data_selectTable.table_id;
                                                me.store_multiOrderList_billingCashier.load({
                                                    callback: function () {
                                                        myMask.hide();
                                                    }
                                                });
                                            } else {
                                                ExtApp.Msg.confirm('Buka Billing: ' + data_selectTable.billing_no + ', Table: <b>' + data_selectTable.table_no + '</b>', false, function (btn) {
                                                    if (btn == 'yes') {
                                                        me.CURR_BILL_DATA.billing_id = data_selectTable.billing_id;
                                                        me.CURR_BILL_DATA.billing_status = data_selectTable.billing_status;
                                                        me.loadBilling('tableList');
                                                    }
                                                });
                                            }
                                        } else {
                                            ExtApp.Msg.confirm('Buka Billing Baru di Table: <b>' + data_selectTable.table_no + '</b>', false, function (btn) {
                                                if (btn == 'yes') {
                                                    me.confirmCreateNewBilling(data_selectTable.id);
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        }, {
                            xtype: 'dataview',
                            autoScroll: true,
                            trackOver: true,
                            itemSelector: 'div.ux-product-list',
                            overItemCls: 'product-list-over',
                            id: 'billingCashier_FloorplanList',
                            store: me.store_tableFloorPlan_billingCashier,
                            loadMask: false,
                            hidden: true,
                            minHeight: 300,
                            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list" id="floorplan-list-{id}">', '<div class="ux-product-list-icon" style="background-color:#000000;">', '<div class="ux-product-list-text" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#6904a9; color:#FFFFF; text-align: center; height:120px; padding: 5px; line-height:20px;">{floorplan_info}</div>', '</div>', '</div>', '</tpl>', '<div class="x-clear"></div>'),
                            listeners: {
                                'itemclick': function (dataView, record) {
                                    var data_selectFloorplan = record.data;
                                    Ext.getCmp("billingCashier_ProductList").hide();
                                    Ext.getCmp("billingCashier_CategoryList").hide();
                                    Ext.getCmp("billingCashier_TableList").show();
                                    Ext.getCmp("billingCashier_FloorplanList").hide();
                                    Ext.getCmp("billingCashier_MultiOrderList").hide();
                                    me.store_tableList_billingCashier.proxy.extraParams.floorplan_id = data_selectFloorplan.id;
                                    me.store_tableList_billingCashier.proxy.extraParams.floorplan_name = data_selectFloorplan.floorplan_name;
                                    var myMask = new Ext.LoadMask(Ext.getCmp('rightPanelCashier'), {
                                        msg: "Loading Data Table..."
                                    });
                                    myMask.show();
                                    me.store_tableList_billingCashier.load({
                                        callback: function () {
                                            myMask.hide();
                                        }
                                    });
                                }
                            }
                        }, {
                            xtype: 'dataview',
                            autoScroll: true,
                            trackOver: true,
                            itemSelector: 'div.ux-product-list',
                            overItemCls: 'product-list-over',
                            id: 'billingCashier_MultiOrderList',
                            store: me.store_multiOrderList_billingCashier,
                            loadMask: false,
                            hidden: true,
                            minHeight: 300,
                            tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list" id="multiorder-list-{id}">', '<div class="ux-product-list-icon" style="background-color:#{billing_color};">', '<div class="ux-product-list-text" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#{billing_color}; color:#FFFFF; text-align: center; height:120px; padding: 5px; line-height:20px;">{billing_info}</div>', '</div>', '</div>', '</tpl>', '<div class="x-clear"></div>'),
                            listeners: {
                                'itemclick': function (dataView, record) {
                                    var data_multiOrderList = record.data;
                                    if (data_multiOrderList.table_button == 1) {
                                        Ext.getCmp("billingCashier_ProductList").hide();
                                        Ext.getCmp("billingCashier_CategoryList").hide();
                                        Ext.getCmp("billingCashier_TableList").show();
                                        Ext.getCmp("billingCashier_FloorplanList").hide();
                                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                                        me.store_tableList_billingCashier.load();
                                    } else {
                                        me.CURR_BILL_DATA.billing_id = data_multiOrderList.billing_id;
                                        me.CURR_BILL_DATA.billing_status = data_multiOrderList.billing_status;
                                        me.loadBilling('tableList');
                                    }
                                }
                            }
                        }],
                        dockedItems: [{
                            xtype: 'toolbar',
                            dock: 'bottom',
                            height: 60,
                            bodyPadding: 5,
                            id: 'billingCashier_ProductList_ToolbarSearch',
                            items: [{
                                text: 'MEJA &amp;<br/>LANTAI',
                                width: 80,
                                height: 45,
                                textAlign: 'center',
                                cls: 'button-billing',
                                id: 'billingCashier_TableList_ToolbarSearch_tableButton',
                                hidden: true,
                                listeners: {
                                    click: function () {
                                        Ext.getCmp("billingCashier_ProductList").hide();
                                        Ext.getCmp("billingCashier_CategoryList").hide();
                                        Ext.getCmp("billingCashier_TableList").show();
                                        Ext.getCmp("billingCashier_FloorplanList").hide();
                                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                                        var myMask = new Ext.LoadMask(Ext.getCmp('rightPanelCashier'), {
                                            msg: "Loading Data Table..."
                                        });
                                        myMask.show();
                                        me.store_tableList_billingCashier.load({
                                            callback: function () {
                                                myMask.hide();
                                            }
                                        });
                                    }
                                }
                            }, {
                                text: 'MENU &amp;<br/>KATEGORI',
                                width: 97,
                                height: 45,
                                textAlign: 'center',
                                cls: 'button-billing',
                                id: 'billingCashier_ProductList_ToolbarSearch_kategoriButton',
                                listeners: {
                                    click: function () {
                                        Ext.getCmp("billingCashier_ProductList").hide();
                                        Ext.getCmp("billingCashier_CategoryList").show();
                                        Ext.getCmp("billingCashier_TableList").hide();
                                        Ext.getCmp("billingCashier_FloorplanList").hide();
                                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                                    }
                                }
                            }, {
                                xtype: 'checkbox',
                                name: 'order_new_line',
                                id: 'billingCashier_ProductList_OrderNewLine',
                                fieldLabel: 'New<br/>Line',
                                labelSeparator: ' ',
                                labelWidth: 35,
                                width: 55,
                                inputValue: '1',
                                fieldStyle: 'font-weight:bold; font-size:14px; text-align:left; color:#666;',
                                labelStyle: 'font-weight:bold; font-size:14px; text-align:left; color:#666;',
                                margin: '0 20 0 0',
                                hidden: true
                            }, {
                                xtype: 'textfield',
                                width: 150,
                                height: 45,
                                cls: 'button-category',
                                name: 'product_name',
                                fieldStyle: 'font-size:16px;font-weight:bold;',
                                emptyText: 'Cari Menu / Produk..',
                                id: 'billingCashier_ProductList_ToolbarSearch_searchName',
                                listeners: {
                                    change: function () {
                                        me.doSearchMenu();
                                    },
                                    keyup: function () {
                                        var view = Ext.getCmp('billingCashier_ProductList'),
                                            selModel = view.getSelectionModel(),
                                            selection = selModel.getSelection()[0];
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.ENTER) {
                                            Ext.getCmp("billingCashier_ProductList").show();
                                            Ext.getCmp("billingCashier_CategoryList").hide();
                                            Ext.getCmp("billingCashier_TableList").hide();
                                            Ext.getCmp("billingCashier_FloorplanList").hide();
                                            Ext.getCmp("billingCashier_MultiOrderList").hide();
                                            me.doSearchMenu();
                                        }
                                    }
                                }
                            }, {
                                text: 'RESET<br/>PENCARIAN',
                                width: 107,
                                height: 45,
                                textAlign: 'center',
                                cls: 'button-billing',
                                id: 'billingCashier_ProductList_ToolbarSearch_resetButton',
                                listeners: {
                                    click: function () {
                                        Ext.getCmp("billingCashier_ProductList").show();
                                        Ext.getCmp("billingCashier_CategoryList").hide();
                                        Ext.getCmp("billingCashier_TableList").hide();
                                        Ext.getCmp("billingCashier_FloorplanList").hide();
                                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                                        Ext.getCmp("billingCashier_ProductList_ToolbarSearch_searchName").setValue('');
                                        me.doSearchMenu();
                                    }
                                }
                            }, '->', {
                                xtype: 'button',
                                name: 'billingCashier_aktivasiNonTrx',
                                id: 'billingCashier_aktivasiNonTrx',
                                labelWidth: 50,
                                text: 'TRX<br/>ON',
                                height: 50,
                                cls: 'button-billing',
                                listeners: {
                                    click: function () {
                                        me.aktivasiNonTrx(0);
                                    }
                                }
                            }, {
                                xtype: 'button',
                                name: 'billingCashier_aktivasiNonTrxOff',
                                id: 'billingCashier_aktivasiNonTrxOff',
                                labelWidth: 50,
                                text: 'TRX<br/>OFF',
                                height: 50,
                                cls: 'button-billing',
                                listeners: {
                                    click: function () {
                                        me.aktivasiNonTrx(1);
                                    }
                                }
                            }]
                        }]
                    }, {
                        xtype: 'tabpanel',
                        id: 'billingCashier_listBilling',
                        height: '100%',
                        activeTab: 1,
                        border: false,
                        defaults: {
                            layout: 'fit'
                        },
                        items: [{
                            title: 'Hold Billing',
                            layout: 'fit',
                            id: 'tab_billingCashier_holdBilling',
                            items: [{
                                xtype: 'gridpanel',
                                border: 0,
                                multiSelect: true,
                                id: 'grid_billingCashier_holdBilling',
                                store: store_billingCashier_holdBilling,
                                scroll: true,
                                selModel: selModel_billingCashier_holdBilling,
                                columns: [{
                                    xtype: 'actioncolumn',
                                    width: 40,
                                    align: 'center',
                                    items: [{
                                        iconCls: 'icon-list-order',
                                        tooltip: 'Buka Hold Billing',
                                        handler: function (grid, rowIndex, colIndex) {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            ExtApp.Msg.confirm('Buka Hold Billing: ' + rec.data.billing_no + ', Table:' + rec.data.table_no, false, function (btn) {
                                                if (btn == 'yes') {
                                                    me.data_billing = rec.data;
                                                    me.openBillingData();
                                                }
                                            });
                                        }
                                    }]
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'billing_id',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'order_total',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'order_total_hpp',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'updated_date',
                                    text: 'DATE',
                                    width: 100,
                                    hidden: true,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'updated_time',
                                    text: 'UPDATE<br/>TIME',
                                    width: 80,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'billing_no_show',
                                    text: 'BILLING NO',
                                    width: 100
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'table_no',
                                    text: 'TABLE',
                                    width: 80,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'qc_notes',
                                    text: 'BY ROUTE',
                                    width: 100,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'split_merge_status',
                                    text: 'MERGE<br/>SPLIT',
                                    width: 70,
                                    align: 'center',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'total_qty_order',
                                    text: 'QTY<br/>ORDER',
                                    width: 70,
                                    align: 'center',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'grand_total_show',
                                    text: 'TOTAL',
                                    width: 130,
                                    align: 'right',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'updatedby',
                                    text: 'USER',
                                    width: 120,
                                    align: 'left'
                                }],
                                viewConfig: {
                                    stripeRows: true,
                                    forceFit: true
                                },
                                listeners: {
                                    itemdblclick: function (view, rec, item, index, eventObj) {
                                        me.data_billing = rec.data;
                                        me.openBillingData();
                                    },
                                },
                                bbar: me.pagingtb_holdBilling
                            }]
                        }, {
                            title: 'Paid Billing',
                            layout: 'fit',
                            id: 'tab_billingCashier_paidBilling',
                            items: [{
                                xtype: 'gridpanel',
                                border: 0,
                                multiSelect: true,
                                id: 'grid_billingCashier_paidBilling',
                                store: store_billingCashier_paidBilling,
                                scroll: true,
                                columns: [{
                                    xtype: 'actioncolumn',
                                    width: 40,
                                    align: 'center',
                                    items: [{
                                        iconCls: 'icon-list-order',
                                        tooltip: 'Buka Paid Billing',
                                        handler: function (grid, rowIndex, colIndex) {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            ExtApp.Msg.confirm('Buka Paid Billing: ' + rec.data.billing_no + ', Table:' + rec.data.table_no, false, function (btn) {
                                                if (btn == 'yes') {
                                                    me.data_billing = rec.data;
                                                    me.openBillingData();
                                                }
                                            });
                                        }
                                    }]
                                }, {
                                    xtype: 'actioncolumn',
                                    width: 40,
                                    align: 'center',
                                    items: [{
                                        iconCls: 'icon-print',
                                        tooltip: 'Print Billing',
                                        handler: function (grid, rowIndex, colIndex) {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            ExtApp.Msg.confirm('Print Billing: ' + rec.data.billing_no + ', Table:' + rec.data.table_no, false, function (btn) {
                                                if (btn == 'yes') {
                                                    me.doPrint('payBilling2', rec.data.billing_id, 0, 0, 0);
                                                }
                                            });
                                        }
                                    }]
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'billing_id',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'order_total',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'order_total_hpp',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'payment_date',
                                    text: 'PAYMENT<br/>DATE',
                                    width: 90,
                                    hidden: true,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'payment_time',
                                    text: 'PAYMENT<br/>TIME',
                                    width: 90,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'billing_no_show',
                                    text: 'BILLING NO',
                                    width: 100
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'table_no',
                                    text: 'TABLE',
                                    width: 80,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'qc_notes',
                                    text: 'BY NAME',
                                    width: 100,
                                    align: 'center'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'total_qty_order',
                                    text: 'QTY<br/>ORDER',
                                    width: 70,
                                    align: 'center',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'grand_total_show',
                                    text: 'TOTAL',
                                    width: 130,
                                    align: 'right',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'updatedby',
                                    text: 'USER',
                                    width: 120,
                                    align: 'left'
                                }],
                                viewConfig: {
                                    stripeRows: true,
                                    forceFit: true
                                },
                                listeners: {
                                    itemdblclick: function (view, rec, item, index, eventObj) {
                                        me.data_billing = rec.data;
                                        me.openBillingData();
                                    },
                                },
                                bbar: me.pagingtb_paidBilling
                            }]
                        }, {
                            title: 'Reservation',
                            layout: 'fit',
                            id: 'tab_billingCashier_reservationList',
                            hidden: hide_reservationBilling,
                            items: [{
                                xtype: 'gridpanel',
                                border: 0,
                                multiSelect: true,
                                id: 'grid_billingCashier_reservationList',
                                store: store_billingCashier_reservationList,
                                scroll: true,
                                columns: [{
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_id',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_sub_total',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_total_hpp',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_discount',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_tax',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_service',
                                    hidden: true,
                                    hideable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_date_time',
                                    text: 'TGL/JAM',
                                    width: 100
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_number_show',
                                    text: 'RSV NO',
                                    width: 100
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_tipe_text',
                                    text: 'TIPE',
                                    width: 100
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_customer_name_address',
                                    text: 'NAMA/ALAMAT',
                                    width: 150,
                                    align: 'left'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_customer_phone_all',
                                    text: 'PHONE',
                                    width: 100,
                                    align: 'left'
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_total_qty',
                                    text: 'QTY<br/>ORDER',
                                    width: 70,
                                    align: 'center',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_sub_total_show',
                                    text: 'TOTAL',
                                    width: 130,
                                    align: 'right',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_dp_show',
                                    text: 'DP',
                                    width: 100,
                                    align: 'right',
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_from_text',
                                    text: 'FROM',
                                    width: 100,
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'tanggal_pesan',
                                    text: 'TGL.PESAN',
                                    width: 120,
                                    sortable: false
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'table_no',
                                    text: 'TABLE',
                                    width: 60
                                }, {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'reservation_memo',
                                    text: 'NOTES',
                                    width: 100,
                                    sortable: false
                                }, ],
                                viewConfig: {
                                    stripeRows: true,
                                    forceFit: true
                                },
                                listeners: {
                                    itemdblclick: function (view, rec, item, index, eventObj) {
                                        me.data_reservation = rec.data;
                                        if (me.data_reservation.billing_id > 0) {
                                            ExtApp.Msg.warning("Cek Billing: " + me.data_reservation.billing_no);
                                            return false;
                                        }
                                        ExtApp.Msg.confirm('Membuat Billing dari Reservation: ' + me.data_reservation.reservation_number + ' a/n ' + me.data_reservation.reservation_customer_name, false, function (btn) {
                                            if (btn == 'yes') {
                                                me.openReservationData();
                                            } else {
                                                me.data_reservation = [];
                                            }
                                        });
                                    },
                                },
                                bbar: me.pagingtb_reservationList
                            }]
                        }]
                    }],
                    dockedItems: [{
                        xtype: 'toolbar',
                        dock: 'bottom',
                        height: 60,
                        bodyPadding: 5,
                        items: [{
                            text: 'DAFTAR<br/>BILLING',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            cls: 'button-billing',
                            id: 'billingCashier_listBillingToggleButton',
                            listeners: {
                                click: function () {
                                    me.showListBilling();
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_MergeBill',
                            id: 'billingCashier_MergeBill',
                            labelWidth: 70,
                            text: 'MERGE<br/>BILL',
                            height: 50,
                            cls: 'button-billing',
                            listeners: {
                                click: function () {
                                    if (ExtApp.asCashier != 1) {
                                        ExtApp.Msg.warning("Tidak dapat melakukan Merge Billing, hanya user kasir yang dapat melakukan Merge Billing..");
                                        return false;
                                    }
                                    var merge_var = {
                                        allID: '',
                                        hasMergeID: ''
                                    };
                                    var getSelection = Ext.getCmp('grid_billingCashier_holdBilling').getSelectionModel().selected;
                                    for (x in getSelection.items) {
                                        if (getSelection.items[x].data.table_id == '') {
                                            ExtApp.Msg.warning("Pilih Table untuk Billing: #" + getSelection.items[x].data.billing_no + "!");
                                            return false;
                                        }
                                        if (getSelection.items[x].data.merge_id != '') {
                                            ExtApp.Msg.warning("Tidak dapat melakukan Merge Billing dengan billing yang pernah di Merge sebelumnya..");
                                            return false;
                                        }
                                        if (merge_var.allID == '') {
                                            merge_var.allID = getSelection.items[x].data.id;
                                        } else {
                                            merge_var.allID += ',' + getSelection.items[x].data.id;
                                        }
                                    }
                                    if (merge_var.allID == '') {
                                        ExtApp.Msg.warning("Tidak dapat melakukan Merge Billing, Billing ID tidak dikenali!..");
                                        return false;
                                    } else {
                                        var d = new Date();
                                        Ext.Ajax.request({
                                            waitMsg: 'Loading...',
                                            url: appUrl + 'cashier/billingCashier/cek_mergeBill?_dc=' + d.getTime(),
                                            method: 'POST',
                                            params: {
                                                billing_id: merge_var.allID
                                            },
                                            success: function (response, options) {
                                                var rsp = Ext.decode(response.responseText);
                                                if (rsp.success == false) {
                                                    ExtApp.Msg.warning(rsp.info);
                                                    return false;
                                                } else {
                                                    me.createWindow(me, 'mergeBill');
                                                }
                                            },
                                            failure: function (response, options) {
                                                var rsp = Ext.decode(response.responseText);
                                                ExtApp.Msg.warning(rsp.info);
                                                return false;
                                            }
                                        });
                                    }
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_unMergeBill',
                            id: 'billingCashier_unMergeBill',
                            labelWidth: 75,
                            text: 'UNMERGE<br/>BILL',
                            height: 50,
                            cls: 'button-billing',
                            listeners: {
                                click: function () {
                                    if (ExtApp.asCashier != 1) {
                                        ExtApp.Msg.warning("Tidak dapat melakukan Un-Merge Billing, hanya user kasir yang dapat melakukan Un-Merge Billing..");
                                        return false;
                                    }
                                    me.verify_unMergeBill_billingCashier();
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_unMergeBill_save',
                            id: 'billingCashier_unMergeBill_save',
                            labelWidth: 75,
                            text: 'UNMERGE<br/>BILL',
                            height: 50,
                            cls: 'button-billing',
                            hidden: true,
                            listeners: {
                                click: function () {
                                    me.save_unMergeBill_billingCashier();
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_SplitBill',
                            id: 'billingCashier_SplitBill',
                            labelWidth: 70,
                            text: 'SPLIT<br/>BILL',
                            height: 50,
                            cls: 'button-billing',
                            listeners: {
                                click: function () {
                                    if (ExtApp.asCashier != 1) {
                                        ExtApp.Msg.warning("Tidak dapat melakukan Split Billing, hanya user kasir yang dapat melakukan Split Billing..");
                                        return false;
                                    }
                                    var getSelection = Ext.getCmp('grid_billingCashier_holdBilling').getSelectionModel().selected;
                                    if (getSelection.length > 1) {
                                        ExtApp.Msg.warning("Pilih hanya 1 billing..");
                                        return false;
                                    }
                                    me.data_split_id = '';
                                    for (x in getSelection.items) {
                                        if (getSelection.items[x].data.table_id == '') {
                                            ExtApp.Msg.warning("Pilih Table untuk Billing: #" + getSelection.items[x].data.billing_no + "!");
                                            return false;
                                        }
                                        if (getSelection.items[x].data.merge_id != '') {
                                            ExtApp.Msg.warning("Tidak dapat melakukan Split Billing dengan billing yang pernah di Merge sebelumnya..");
                                            return false;
                                        }
                                        me.data_split_id = getSelection.items[x].data.id;
                                    }
                                    if (me.data_split_id == '') {
                                        ExtApp.Msg.warning("Tidak dapat melakukan Split Billing, Billing ID tidak dikenali!..");
                                        return false;
                                    } else {
                                        var d = new Date();
                                        Ext.Ajax.request({
                                            waitMsg: 'Loading...',
                                            url: appUrl + 'cashier/billingCashier/cek_splitBill?_dc=' + d.getTime(),
                                            method: 'POST',
                                            params: {
                                                billing_id: me.data_split_id
                                            },
                                            success: function (response, options) {
                                                var rsp = Ext.decode(response.responseText);
                                                if (rsp.success == false) {
                                                    ExtApp.Msg.warning(rsp.info);
                                                    return false;
                                                } else {
                                                    me.createWindow(me, 'splitBill');
                                                }
                                            },
                                            failure: function (response, options) {
                                                var rsp = Ext.decode(response.responseText);
                                                ExtApp.Msg.warning(rsp.info);
                                                return false;
                                            }
                                        });
                                    }
                                }
                            }
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_printSettlement',
                            id: 'billingCashier_printSettlement',
                            labelWidth: 70,
                            text: 'SETTLE<br/>MENT',
                            height: 50,
                            cls: 'button-billing',
                            disabled: true,
                            listeners: {
                                click: function () {
                                    if (opt_opsi_no_print_settlement == 1) {
                                        ExtApp.Msg.confirm('Print Settlement?', false, function (btn) {
                                            if (btn == 'yes') {
                                                var is_do_printing_settlement = 1;
                                            } else {
                                                var is_do_printing_settlement = 0;
                                            }
                                            me.printSettlement(is_do_printing_settlement);
                                        });
                                    } else {
                                        me.printSettlement(1);
                                    }
                                }
                            },
                        }, {
                            xtype: 'button',
                            name: 'billingCashier_SettingPrinter',
                            id: 'billingCashier_SettingPrinter',
                            labelWidth: 90,
                            text: 'TEST<br/>PRINTER',
                            height: 50,
                            cls: 'button-billing',
                            disabled: true,
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'settingCashier');
                                }
                            }
                        }, '->', {
                            text: 'SEARCH<br/>MENU',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            cls: 'button-billing',
                            hidden: true,
                            id: 'billingCashier_searchMenuButton',
                            listeners: {
                                click: function () {
                                    me.showSearchMenu();
                                }
                            }
                        }, '', {
                            text: 'REFRESH<br/>DATA',
                            width: 90,
                            height: 50,
                            textAlign: 'center',
                            cls: 'button-billing',
                            id: 'billingCashier_refreshMenuButton',
                            listeners: {
                                click: function () {
                                    Ext.getCmp("billingCashier_ProductList_ToolbarSearch_searchName").setValue('');
                                    me.doSearchMenu();
                                    var myMask = new Ext.LoadMask(Ext.getCmp('rightPanelCashier'), {
                                        msg: "Loading data Menu/Product..."
                                    });
                                    myMask.show();
                                    me.store_masterProduct_billingCashier.load({
                                        callback: function () {
                                            myMask.hide();
                                        }
                                    });
                                    me.store_productCategory_billingCashier.load();
                                    if (opt_mode_table_layout_cashier == 1) {
                                        me.store_tableFloorPlan_billingCashier.load();
                                        me.store_tableList_billingCashier.proxy.extraParams.floorplan_id = 0;
                                        me.store_tableList_billingCashier.proxy.extraParams.floorplan_name = '';
                                        me.store_tableList_billingCashier.load();
                                    }
                                }
                            }
                        }, '', {
                            text: 'KELUAR<br/>/ TUTUP',
                            width: 80,
                            height: 50,
                            textAlign: 'center',
                            cls: 'button-billing',
                            listeners: {
                                click: function () {
                                    me.doClose(me.id);
                                }
                            }
                        }, {
                            text: 'LOGOUT<br/>APLIKASI',
                            width: 85,
                            height: 50,
                            textAlign: 'center',
                            cls: 'button-billing',
                            id: 'billingCashier_logoutButton',
                            listeners: {
                                click: function () {
                                    window.location = appUrl + 'logout';
                                }
                            }
                        }]
                    }]
                }, {
                    xtype: 'hidden',
                    name: 'billing_id'
                }, {
                    xtype: 'hidden',
                    name: 'billing_no'
                }, {
                    xtype: 'hidden',
                    name: 'billing_status'
                }]
            }],
            listeners: {
                show: function () {
                    if (opt_from_apps == 0) {
                        Ext.getCmp("billingCashier_ProductList_ToolbarSearch_searchName").focus();
                    }
                    me.save_progress_orderProduct = false;
                    me.save_progress_orderProduct_split = false;
                    me.save_progress_splitBill = false;
                },
                boxready: function () {
                    this.maximize();
                    var phpJs = theApp.getHelper('phpJs');
                    var EmptyData = [];
                    me.store_billingCashierDetail.loadData(EmptyData);
                    me.showListBilling_toggle = 0;
                    Ext.getCmp('billingCashier_listBilling').hide();
                    Ext.getCmp('billingCashier_MergeBill').hide();
                    Ext.getCmp('billingCashier_unMergeBill').hide();
                    Ext.getCmp('billingCashier_SplitBill').hide();
                    Ext.getCmp('billingCashier_SettingPrinter').hide();
                    Ext.getCmp('billingCashier_printSettlement').hide();
                    Ext.getCmp(me.id + '_cancelBilling_button').hide();
                    Ext.getCmp("grid_billingCashier_holdBilling").store.load();
                    if (ExtApp.asCashier == 1) {
                        Ext.getCmp(me.id + '_cancelBilling_button').show();
                        Ext.getCmp('billingCashier_SettingPrinter').show();
                        Ext.getCmp('billingCashier_printSettlement').show();
                        Ext.getCmp('tab_billingCashier_paidBilling').show();
                        Ext.getCmp("grid_billingCashier_paidBilling").store.load();
                        if (opt_reservation_cashier == '1') {
                            Ext.getCmp('tab_billingCashier_reservationList').show();
                            Ext.getCmp("grid_billingCashier_reservationList").store.load();
                        }
                    } else {
                        Ext.getCmp(me.id + '_cancelBilling_button').hide();
                        Ext.getCmp('billingCashier_SettingPrinter').hide();
                        Ext.getCmp('billingCashier_printSettlement').hide();
                        Ext.getCmp('tab_billingCashier_paidBilling').hide();
                        Ext.getCmp('tab_billingCashier_reservationList').hide();
                    }
                    me.doDisableButton(1);
                    Ext.getCmp(me.id + '_newBilling_button').setDisabled(false);
                    if (opt_hide_button_logoutaplikasi == '1') {
                        Ext.getCmp('billingCashier_logoutButton').hide();
                    }
                    if (opt_print_preview_billing == '1') {
                        me.previewListDetail(1);
                    } else {
                        me.previewListDetail(2);
                    }
                    if (opt_from_apps == 0) {
                        Ext.getCmp("billingCashier_ProductList_ToolbarSearch_searchName").focus();
                    }
                    if (opt_mode_cashier_express == '1') {
                        Ext.getCmp('billingCashier_ProductList_OrderNewLine').show();
                    }
                    if (opt_mode_table_layout_cashier == '1') {
                        Ext.getCmp("billingCashier_TableList_ToolbarSearch_tableButton").show();
                        Ext.getCmp("billingCashier_ProductList").hide();
                        Ext.getCmp("billingCashier_CategoryList").hide();
                        Ext.getCmp("billingCashier_TableList").show();
                        Ext.getCmp("billingCashier_FloorplanList").hide();
                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                        var myMask = new Ext.LoadMask(Ext.getCmp('rightPanelCashier'), {
                            msg: "Loading Data Table..."
                        });
                        myMask.show();
                        me.store_tableList_billingCashier.load({
                            callback: function () {
                                myMask.hide();
                            }
                        });
                        me.store_productCategory_billingCashier.load();
                        me.store_masterProduct_billingCashier.load();
                    } else {
                        Ext.getCmp("billingCashier_TableList_ToolbarSearch_tableButton").hide();
                        Ext.getCmp("billingCashier_ProductList").show();
                        Ext.getCmp("billingCashier_CategoryList").hide();
                        Ext.getCmp("billingCashier_TableList").hide();
                        Ext.getCmp("billingCashier_FloorplanList").hide();
                        Ext.getCmp("billingCashier_MultiOrderList").hide();
                        var myMask = new Ext.LoadMask(Ext.getCmp('rightPanelCashier'), {
                            msg: "Loading Data Menu/Product..."
                        });
                        myMask.show();
                        me.store_masterProduct_billingCashier.load({
                            callback: function () {
                                myMask.hide();
                            }
                        });
                        me.store_productCategory_billingCashier.load();
                    }
                    me.suspend_button_on_billing_load = false;
                    if (opt_hide_button_invoice == '1') {
                        Ext.getCmp('printInvoiceButton_billingCashier_billingDetail').hide();
                    } else {
                        Ext.getCmp('printInvoiceButton_billingCashier_billingDetail').show();
                    }
                    Ext.getCmp("billingCashier_aktivasiNonTrx").hide();
                    Ext.getCmp("billingCashier_aktivasiNonTrxOff").hide();
                    if (opt_tandai_pajak_billing == 1 && opt_nontrx_button_onoff == 1) {
                        if (opt_nontrx_override_on == 1) {
                            Ext.getCmp("billingCashier_aktivasiNonTrx").show();
                        } else {
                            Ext.getCmp("billingCashier_aktivasiNonTrxOff").show();
                        }
                    }
                }
            }
        });
    },
    orderProduct: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Order ';
        if (me.formType_orderProduct == 'edit') {
            Titletext = 'Update Order ';
        }
        var phpJs = theApp.getHelper('phpJs');
        var numlockVirtual = me.app.getHelper('numlockVirtual');
        me.store_productVarian_billingCashier = theApp.getStore('store_productVarian_billingCashier', false);
        if (me.store_productVarian_billingCashier == false) {
            me.store_productVarian_billingCashier = theApp.copyStore('master_pos', 'store_productVarian', 'store_productVarian_billingCashier');
        }
        me.store_productVarian_billingCashier.proxy.extraParams.limit = 9999999;
        me.store_productVarian_billingCashier.proxy.extraParams.show_all_text = 0;
        me.store_productVarian_billingCashier.proxy.extraParams.show_choose_text = 1;
        me.store_productVarian_billingCashier.proxy.extraParams.is_dropdown = 1;
        me.store_productVarian_billingCashier.proxy.extraParams.product_type = '';
        me.store_productVarian_billingCashier.proxy.extraParams.keywords = '';
        if (me.formType_orderProduct == 'edit') {
            var getDataProduct = me.data_orderProduct;
        } else {
            var getDataProduct = me.data_orderProduct.data;
        }
        width_orderProduct = 400;
        margin_orderProduct = '0 5 0 0';
        margin_buttonOrderProduct = '0 140 0 0';
        margin_btnBGverify = '0 0 0 0';
        if (getDataProduct.is_buyget == 1) {
            margin_buttonOrderProduct = '0 20 0 0';
            margin_btnBGverify = '0 180 0 0';
        }
        var focus_orderField = 'order_qty_orderProduct';
        var readonly_input_harga_manual = true;
        if (opt_input_harga_manual == '1') {
            focus_orderField = 'product_price_orderProduct';
            readonly_input_harga_manual = false;
        }
        var min_qty_value = 0;
        if (opt_input_qty_under_zero == '1') {
            var min_qty_value = -9999;
        }
        me.focusCursorID_orderProduct = 'order_qty_orderProduct';
        return desktop.createWindow({
            id: me.id + '_orderProduct',
            title: Titletext,
            width: width_orderProduct,
            minHeight: 300,
            iconCls: 'btn-add',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            defaultFocus: focus_orderField,
            items: [{
                xtype: 'form',
                id: 'form_orderProduct',
                border: 0,
                bodyPadding: 10,
                margin: '0 0 0 0',
                items: [{
                    xtype: 'hidden',
                    name: 'form_type_orderProduct',
                    value: me.formType_orderProduct
                }, {
                    xtype: 'hidden',
                    name: 'id'
                }, {
                    xtype: 'hidden',
                    name: 'product_id'
                }, {
                    xtype: 'hidden',
                    name: 'product_type'
                }, {
                    xtype: 'hidden',
                    name: 'billing_id'
                }, {
                    xtype: 'hidden',
                    name: 'category_id'
                }, {
                    xtype: 'hidden',
                    name: 'product_name'
                }, {
                    xtype: 'hidden',
                    name: 'product_price_hpp'
                }, {
                    xtype: 'hidden',
                    name: 'product_varian_id'
                }, {
                    xtype: 'hidden',
                    name: 'varian_id'
                }, {
                    xtype: 'hidden',
                    name: 'has_varian'
                }, {
                    xtype: 'hidden',
                    name: 'product_normal_price'
                }, {
                    xtype: 'hidden',
                    name: 'is_promo'
                }, {
                    xtype: 'hidden',
                    name: 'promo_id'
                }, {
                    xtype: 'hidden',
                    name: 'promo_tipe'
                }, {
                    xtype: 'hidden',
                    name: 'promo_percentage'
                }, {
                    xtype: 'hidden',
                    name: 'promo_price'
                }, {
                    xtype: 'hidden',
                    name: 'promo_price_show'
                }, {
                    xtype: 'hidden',
                    name: 'promo_desc'
                }, {
                    xtype: 'hidden',
                    name: 'use_tax'
                }, {
                    xtype: 'hidden',
                    name: 'use_service'
                }, {
                    xtype: 'hidden',
                    name: 'is_kerjasama'
                }, {
                    xtype: 'hidden',
                    name: 'supplier_id'
                }, {
                    xtype: 'hidden',
                    name: 'persentase_bagi_hasil'
                }, {
                    xtype: 'hidden',
                    name: 'total_bagi_hasil'
                }, {
                    xtype: 'hidden',
                    name: 'is_buyget'
                }, {
                    xtype: 'hidden',
                    name: 'buyget_id'
                }, {
                    xtype: 'hidden',
                    name: 'buyget_tipe'
                }, {
                    xtype: 'hidden',
                    name: 'buyget_desc'
                }, {
                    xtype: 'hidden',
                    name: 'buyget_item'
                }, {
                    xtype: 'hidden',
                    name: 'free_item'
                }, {
                    xtype: 'hidden',
                    name: 'package_item'
                }, {
                    xtype: 'hidden',
                    name: 'item_code'
                }, {
                    xtype: 'hidden',
                    name: 'has_list_price'
                }, {
                    xtype: 'displayfield',
                    name: 'product_code',
                    fieldLabel: 'Code',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;'
                }, {
                    xtype: 'displayfield',
                    name: 'product_name_show',
                    fieldLabel: 'Product',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;'
                }, {
                    xtype: 'displayfield',
                    name: 'product_price_show',
                    fieldLabel: 'Harga',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    margin: '0 0 5 0',
                    hidden: true
                }, {
                    xtype: 'textfield',
                    name: 'product_price',
                    id: 'product_price_orderProduct',
                    fieldLabel: 'Price',
                    labelSeparator: ':',
                    labelWidth: 90,
                    width: 250,
                    height: 30,
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    margin: '0 0 5 0',
                    readOnly: readonly_input_harga_manual,
                    listeners: {
                        specialkey: function (field, e) {
                            if (e.getKey() == e.ENTER) {
                                if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                    ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                                } else {
                                    me.save_orderProduct();
                                }
                            }
                        }
                    }
                }, {
                    xtype: 'panel',
                    margin: '0',
                    layout: 'column',
                    border: 0,
                    margin: '0 0 0 0',
                    items: [{
                        xtype: 'numberfield',
                        name: 'order_qty',
                        id: 'order_qty_orderProduct',
                        fieldLabel: 'QTY',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 170,
                        height: 40,
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;',
                        selectOnFocus: true,
                        margin: '0 0 5 0',
                        minValue: min_qty_value,
                        allowDecimals: true,
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                                    } else {
                                        if (getDataProduct.has_list_price == 1 && getDataProduct.is_promo == 0) {
                                            me.loadBefore_orderProduct = true;
                                            me.loadPrice_orderProduct(1);
                                        } else {
                                            me.save_orderProduct();
                                        }
                                    }
                                }
                            },
                            focus: function () {
                                me.focusCursorID_orderProduct = 'order_qty_orderProduct';
                                me.focusCursorName_orderProduct = 'QTY';
                            },
                            blur: function (field, val) {
                                if (getDataProduct.has_list_price == 1 && getDataProduct.is_promo == 0) {
                                    me.loadBefore_orderProduct = true;
                                    me.loadPrice_orderProduct(0);
                                }
                            }
                        }
                    },/* {
                        xtype: 'numberfield',
                        name: 'buyget_qty',
                        id: 'buyget_qty_orderProduct',
                        fieldLabel: 'Free QTY',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 170,
                        height: 40,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;',
                        selectOnFocus: true,
                        minValue: 0,
                        margin: '0 0 5 30',
                        hidden: true,
                        listeners: {
                            focus: function () {
                                me.focusCursorID_orderProduct = 'buyget_qty_orderProduct';
                                me.focusCursorName_orderProduct = 'Free QTY';
                            },
                            blur: function (field, val) {
                                if (getDataProduct.is_buyget == 1) {
                                    me.loadBefore_orderProduct = true;
                                    me.BGverify_orderProduct();
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        name: 'buyget_percentage',
                        id: 'buyget_percentage_orderProduct',
                        fieldLabel: 'Disc.%',
                        labelSeparator: ':',
                        labelWidth: 60,
                        width: 160,
                        height: 40,
                        margin: '0 0 5 30',
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;',
                        selectOnFocus: true,
                        hidden: true
                    },*/ {
                        xtype: 'button',
                        width: 25,
                        id: 'btnNumlock_orderProduct',
                        iconCls: 'icon-keyboard',
                        margin: '5 0 0 10',
                        hidden: true,
                        listeners: {
                            click: function () {
                                var getDefaultVal = Ext.getCmp(me.focusCursorID_orderProduct).getValue();
                                var numlockVdata = {
                                    title: 'Input ' + me.focusCursorName_orderProduct,
                                    focusName: me.focusCursorName_orderProduct,
                                    focusID: me.focusCursorID_orderProduct,
                                    triggerID: '',
                                    defaultValue: getDefaultVal,
                                    tipe: 'numlock',
                                    numlockId: me.id + '_orderProduct',
                                };
                                numlockVirtual.popup(numlockVdata, me);
                            }
                        }
                    }]
                },/* {
                    xtype: 'combobox',
                    name: 'product_varian',
                    id: 'product_varian_orderProduct',
                    fieldLabel: 'Varian / Porsi',
                    store: me.store_productVarian_billingCashier,
                    labelSeparator: ':',
                    labelWidth: 90,
                    width: 330,
                    height: 40,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    displayField: 'varian_name',
                    valueField: 'id',
                    queryMode: 'local',
                    typeAhead: true,
                    minChars: 1,
                    forceSelection: true,
                    allowBlank: true,
                    listeners: {
                        select: function (combo, records, eOpts) {
                            var form = Ext.getCmp('form_orderProduct').getForm();
                            form.findField('product_price').setValue(records[0].data.product_price);
                            form.findField('product_price_hpp').setValue(records[0].data.product_hpp);
                            form.findField('product_varian_id').setValue(records[0].data.id);
                            form.findField('varian_id').setValue(records[0].data.varian_id);
                            form.findField('product_normal_price').setValue(records[0].data.normal_price);
                            form.findField('product_price_show').setValue(records[0].data.product_price_show);
                            if (records[0].data.is_promo == 1) {
                                form.findField('is_promo').setValue(records[0].data.is_promo);
                                form.findField('promo_id').setValue(records[0].data.promo_id);
                                form.findField('promo_tipe').setValue(records[0].data.promo_tipe);
                                form.findField('promo_percentage').setValue(records[0].data.promo_percentage);
                                form.findField('promo_price').setValue(records[0].data.promo_price);
                                form.findField('promo_price_show').setValue(records[0].data.promo_price_show);
                                form.findField('promo_desc').setValue(records[0].data.promo_desc);
                                form.findField('promo_info').setValue(records[0].data.promo_desc);
                            }
                        }
                    }
                }, {
                    xtype: 'displayfield',
                    name: 'promo_info',
                    fieldLabel: 'Promo',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    height: 30,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    hidden: true
                }, */{
                    xtype: 'fieldcontainer',
                    layout: {
                        type: 'column'
                    },
                    width: 350,
                    fieldLabel: '',
                    items: [{
                        xtype: 'textarea',
                        name: 'order_notes',
                        fieldLabel: 'Notes',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 250,
                        height: 50,
                        margin: '5 0 0 0',
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }]
                }, {
                    xtype: 'panel',
                    id: 'saveOrder_additional_info',
                    margin: 0,
                    layout: 'column',
                    border: 0,
                    margin: '0 0 0 0',
                    items: [{
                        xtype: 'hidden',
                        name: 'customer_id'
                    }, {
                        xtype: 'fieldcontainer',
                        layout: {
                            type: 'column'
                        },
                        width: 350,
                        fieldLabel: '',
                        name: 'customer',
                        items: [{
                            xtype: 'textfield',
                            name: 'customer_name',
                            fieldLabel: 'Customer',
                            labelSeparator: ':',
                            labelWidth: 90,
                            width: 250,
                            height: 30,
                            margin: '5 0 0 0',
                            labelStyle: 'font-weight:bold; font-size:16px;',
                            listeners: {
                                focus: function () {
                                    me.createWindow(me, 'customerPopup');
                                }
                            }
                        }, {
                            xtype: 'button',
                            width: 30,
                            id: 'btnCustomer_payBilling',
                            iconCls: 'btn-search',
                            margin: '0 0 0 5',
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'customerPopup');
                                }
                            }
                        }, {
                            xtype: 'button',
                            width: 25,
                            id: 'btnClearCustomer_payBilling',
                            iconCls: 'icon-cancel',
                            margin: '0 0 0 5',
                            listeners: {
                                click: function () {
                                    var form = Ext.getCmp('form_orderProduct').getForm();
                                    form.findField('customer_id').setValue(0);
                                    form.findField('customer_name').setValue('');
                                    if (opt_send_billing_to_email == 1) {
                                        me.sendBillingtoEmail_nama = '';
                                        me.sendBillingtoEmail_email = '';
                                        me.sendBillingtoEmail_phone = '';
                                    }
                                }
                            }
                        }]
                    }, {
                        xtype: 'fieldcontainer',
                        layout: {
                            type: 'column'
                        },
                        width: 350,
                        fieldLabel: '',
                        items: [{
                            xtype: 'textarea',
                            name: 'customer_acreg',
                            fieldLabel: 'A/C Reg',
                            labelSeparator: ':',
                            labelWidth: 90,
                            width: 250,
                            height: 50,
                            margin: '5 0 0 0',
                            labelStyle: 'font-weight:bold; font-size:16px;'
                        }]
                    }, {
                        xtype: 'fieldcontainer',
                        layout: {
                            type: 'column'
                        },
                        width: 350,
                        fieldLabel: '',
                        items: [{
                            xtype: 'textarea',
                            name: 'customer_route',
                            fieldLabel: 'Route',
                            labelSeparator: ':',
                            labelWidth: 90,
                            width: 250,
                            height: 50,
                            margin: '5 0 0 0',
                            labelStyle: 'font-weight:bold; font-size:16px;'
                        }]
                    }],
                    listeners:{
                        afterrender: function () {
                            if (me.CURR_BILL_DATA.customer_id && me.CURR_BILL_DATA.customer_id != 0){
                                Ext.getCmp('saveOrder_additional_info').hide();
                            }
                        }
                    }
                }/*, {
                    xtype: 'checkbox',
                    name: 'is_compliment',
                    fieldLabel: 'Compliment?',
                    labelWidth: 90,
                    width: 300,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    inputValue: '1'
                }*/]
            }],
            buttons: [{
                text: 'Order<br/>Produk',
                formBind: true,
                id: 'btnSave_orderProduct',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: margin_buttonOrderProduct,
                handler: function () {
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                    } else {
                        if (me.loadBefore_orderProduct == true) {
                            ExtApp.Msg.warning('Harap menunggu beberapa detik,<br/>sedang proses cek harga pesanan!');
                        } else {
                            me.save_orderProduct();
                        }
                    }
                }
            }, {
                text: 'Order',
                formBind: true,
                id: 'btnSave_orderProduct2',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                hidden: true,
                margin: margin_buttonOrderProduct,
                handler: function () {
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                    } else {
                        if (me.loadBefore_orderProduct == true) {
                            ExtApp.Msg.warning('Harap menunggu beberapa detik,<br/>sedang proses cek harga pesanan!');
                        } else {
                            me.save_orderProduct();
                        }
                    }
                }
            }, {
                text: 'Promo<br/>Verify',
                formBind: true,
                id: 'btnBGverify_orderProduct',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: margin_btnBGverify,
                hidden: true,
                handler: function () {
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                    } else {
                        me.BGverify_orderProduct();
                    }
                }
            }],
            listeners: {
                show: function () {
                    if (!me.CURR_BILL_DATA.billing_id){
                        var form = Ext.getCmp('form_orderProduct').getForm();
                    }
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        me.doClose(me.id + '_orderProduct');
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan lakukan Close Billing atau merubah status billing ke Hold Billing');
                    } else {
                        var form = Ext.getCmp('form_orderProduct').getForm();
                        form.findField('has_varian').setValue(0);
                        if (me.formType_orderProduct == 'edit') {
                            var getDataProduct = me.data_orderProduct;
                            form.setValues(getDataProduct);
                            me.store_productVarian_billingCashier.proxy.extraParams.product_id = getDataProduct.product_id;
                        } else {
                            form.reset();
                            var getDataProduct = me.data_orderProduct.data;
                            form.findField('product_id').setValue(getDataProduct.id);
                            form.findField('category_id').setValue(getDataProduct.category_id);
                            form.findField('product_type').setValue(getDataProduct.product_type);
                            form.findField('product_name').setValue(getDataProduct.product_name);
                            form.findField('product_name_show').setValue(getDataProduct.product_name_show);
                            form.findField('product_price_show').setValue(getDataProduct.product_price_show);
                            form.findField('product_price').setValue(getDataProduct.product_price);
                            form.findField('product_normal_price').setValue(getDataProduct.normal_price);
                            form.findField('product_price_hpp').setValue(getDataProduct.product_hpp);
                            form.findField('product_varian_id').setValue(getDataProduct.product_varian_id);
                            form.findField('use_tax').setValue(getDataProduct.use_tax);
                            form.findField('use_service').setValue(getDataProduct.use_service);
                            form.findField('varian_id').setValue(getDataProduct.varian_id);
                            form.findField('has_varian').setValue(getDataProduct.has_varian);
                            form.findField('order_qty').setValue(getDataProduct.order_qty);
                            me.store_productVarian_billingCashier.proxy.extraParams.product_id = getDataProduct.id;
                            form.findField('item_code').setValue(getDataProduct.item_code);
                            form.findField('product_code').setValue(getDataProduct.product_code);
                            form.findField('has_list_price').setValue(getDataProduct.has_list_price);
                        }
                        form.findField('promo_info').hide();
                        var prod_promo_desc = '';
                        if (getDataProduct.is_promo == 1) {
                            form.findField('is_promo').setValue(getDataProduct.is_promo);
                            form.findField('promo_id').setValue(getDataProduct.promo_id);
                            form.findField('promo_tipe').setValue(getDataProduct.promo_tipe);
                            form.findField('promo_percentage').setValue(getDataProduct.promo_percentage);
                            form.findField('promo_price').setValue(getDataProduct.promo_price);
                            form.findField('promo_price_show').setValue(getDataProduct.promo_price_show);
                            form.findField('promo_desc').setValue(getDataProduct.promo_desc);
                            form.findField('promo_info').show();
                            prod_promo_desc = '<font color="orange">' + getDataProduct.promo_desc + '</font>';
                        }
                        if (getDataProduct.is_kerjasama == 1) {
                            form.findField('is_kerjasama').setValue(getDataProduct.is_kerjasama);
                            form.findField('supplier_id').setValue(getDataProduct.supplier_id);
                            form.findField('persentase_bagi_hasil').setValue(getDataProduct.persentase_bagi_hasil);
                            form.findField('total_bagi_hasil').setValue(getDataProduct.total_bagi_hasil);
                        }
                        Ext.getCmp('btnSave_orderProduct').show();
                        Ext.getCmp('btnSave_orderProduct2').hide();
                        Ext.getCmp('btnBGverify_orderProduct').hide();
                        if (getDataProduct.is_buyget == 1) {
                            form.findField('is_buyget').setValue(getDataProduct.is_buyget);
                            form.findField('buyget_id').setValue(getDataProduct.buyget_id);
                            form.findField('buyget_tipe').setValue(getDataProduct.buyget_tipe);
                            form.findField('buyget_desc').setValue(getDataProduct.buyget_desc);
                            form.findField('buyget_item').setValue(getDataProduct.buyget_item);
                            if (getDataProduct.buyget_tipe == 'percentage') {
                                form.findField('buyget_qty').hide();
                                form.findField('buyget_percentage').show();
                                if (me.formType_orderProduct == 'edit') {
                                    form.findField('buyget_percentage').setValue(getDataProduct.buyget_percentage);
                                } else {
                                    form.findField('buyget_percentage').setValue(0);
                                    if (1 >= getDataProduct.buyget_buy_qty) {
                                        form.findField('buyget_percentage').setValue(getDataProduct.buyget_percentage);
                                    }
                                }
                            } else {
                                form.findField('buyget_qty').show();
                                form.findField('buyget_percentage').hide();
                                if (me.formType_orderProduct == 'edit') {
                                    form.findField('buyget_qty').setValue(getDataProduct.buyget_qty);
                                } else {
                                    form.findField('buyget_qty').setValue(0);
                                    if (1 >= getDataProduct.buyget_buy_qty) {
                                        form.findField('buyget_qty').setValue(getDataProduct.buyget_qty);
                                    }
                                }
                            }
                            Ext.getCmp('btnSave_orderProduct').hide();
                            Ext.getCmp('btnSave_orderProduct2').show();
                            Ext.getCmp('btnBGverify_orderProduct').show();
                            form.findField('promo_info').show();
                            if (prod_promo_desc == '') {
                                prod_promo_desc = '<font color="red">' + getDataProduct.buyget_desc + '</font>';
                            } else {
                                prod_promo_desc += '<br/><font color="red">' + getDataProduct.buyget_desc + '</font>';
                            }
                        }
                        form.findField('promo_info').setValue(prod_promo_desc);
                        if (getDataProduct.hide_compliment_order == 1) {
                            form.findField('is_compliment').hide();
                        } else {
                            form.findField('is_compliment').show();
                        }
                        if (getDataProduct.has_varian == 1) {
                            form.findField('product_varian_orderProduct').show();
                            me.store_productVarian_billingCashier.load({
                                callback: function () {
                                    if (!getDataProduct.product_varian_id) {} else {
                                        form.findField('product_varian_orderProduct').setValue(getDataProduct.product_varian_id);
                                    }
                                }
                            });
                        } else {
                            form.findField('product_varian_orderProduct').hide();
                        }
                        Ext.getCmp('btnNumlock_orderProduct').hide();
                        if (opt_calculator_virtual == 1) {
                            Ext.getCmp('btnNumlock_orderProduct').show();
                        }
                        me.loadBefore_orderProduct = false;
                        if (getDataProduct.is_promo == 1) {
                            form.findField('product_price_show').show();
                            form.findField('product_price').hide();
                        } else {
                            form.findField('product_price_show').hide();
                            form.findField('product_price').show();
                        }
                    }
                }
            }
        });
    },
    printBilling: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var phpJs = theApp.getHelper('phpJs');
        if (!me.CURR_BILL_DATA.billing_no) {
            var Titletext = 'Print Billing: #undefined';
        } else {
            var Titletext = 'Print Billing: #' + me.CURR_BILL_DATA.billing_no;
        }
        var widthF__printBilling = 450;
        if (opt_print_qc_then_order == '1') {
            var widthF__printBilling = 350;
        }
        return desktop.createWindow({
            id: me.id + '_printBilling',
            title: Titletext,
            width: widthF__printBilling,
            height: 150,
            iconCls: 'icon-print',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'checkbox',
                name: 'use_print_anywhere',
                id: 'billingCashier_use_print_anywhere_printBilling',
                fieldLabel: 'Use Print Anywhere?',
                labelSeparator: ' ',
                labelWidth: 130,
                padding: 10,
                inputValue: '1'
            }],
            buttons: [{
                text: 'PRINT QC<br/>AND ORDER',
                formBind: true,
                id: 'btnPrintQC_and_Order_Receipt_printBilling',
                width: 120,
                height: 50,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        var use_print_anywhere = Ext.getCmp('billingCashier_use_print_anywhere_printBilling').getSubmitValue();
                        if (!use_print_anywhere) {
                            var use_print_anywhere = 0;
                        }
                        if (use_print_anywhere == 1) {
                            me.anywhere_loadPrinter = 'qc';
                            me.anywhere_loadPrinter_tipe = 7;
                            me.createWindow(me, 'loadDataAnywherePrinter');
                        } else {
                            if (opt_show_multiple_print_qc == '1') {
                                me.printMultipleQC_printBilling(2);
                            } else {
                                me.printReceipt_printBilling(7);
                            }
                        }
                    }
                }
            }, {
                text: 'PRINT QC<br/>RECEIPT',
                formBind: true,
                id: 'btnPrintQCReceipt_printBilling',
                width: 95,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        var use_print_anywhere = Ext.getCmp('billingCashier_use_print_anywhere_printBilling').getSubmitValue();
                        if (!use_print_anywhere) {
                            var use_print_anywhere = 0;
                        }
                        if (use_print_anywhere == 1) {
                            me.anywhere_loadPrinter = 'qc';
                            me.anywhere_loadPrinter_tipe = 2;
                            me.createWindow(me, 'loadDataAnywherePrinter');
                        } else {
                            if (opt_show_multiple_print_qc == '1') {
                                me.printMultipleQC_printBilling(2);
                            } else {
                                me.printReceipt_printBilling(2);
                            }
                        }
                    }
                }
            }, {
                text: 'PRINT ORDER<br/>RECEIPT',
                formBind: true,
                id: 'btnPrintAllOrderReceipt_printBilling',
                width: 120,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.orderReceipt_printBilling(1, 2000);
                    }
                }
            }, {
                text: 'PRINT KITCHEN<br/>RECEIPT',
                formBind: true,
                id: 'btnPrintKitchenReceipt_printBilling',
                width: 135,
                height: 50,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.printReceipt_printBilling(3);
                    }
                }
            }, {
                text: 'PRINT BAR<br/>RECEIPT',
                formBind: true,
                id: 'btnPrintBarReceipt_printBilling',
                width: 100,
                height: 50,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.printReceipt_printBilling(4);
                    }
                }
            }, {
                text: 'PRINT OTHER<br/>RECEIPT',
                formBind: true,
                id: 'btnPrintOtherReceipt_printBilling',
                width: 135,
                height: 50,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.printReceipt_printBilling(5);
                    }
                }
            }, {
                text: 'PRINT BILL<br/>(INVOICE)',
                formBind: true,
                id: 'btnPrintReceipt_printBilling',
                width: 105,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 50 0 0',
                listeners: {
                    click: function () {
                        var use_print_anywhere = Ext.getCmp('billingCashier_use_print_anywhere_printBilling').getSubmitValue();
                        if (!use_print_anywhere) {
                            var use_print_anywhere = 0;
                        }
                        if (use_print_anywhere == 1) {
                            me.anywhere_loadPrinter = 'invoice';
                            me.anywhere_loadPrinter_tipe = 1;
                            me.createWindow(me, 'loadDataAnywherePrinter');
                        } else {
                            me.printReceipt_printBilling(1);
                        }
                    }
                }
            }],
            listeners: {
                show: function () {
                    if (opt_print_qc_then_order == '1') {
                        Ext.getCmp('btnPrintQC_and_Order_Receipt_printBilling').show();
                        Ext.getCmp('btnPrintQCReceipt_printBilling').hide();
                        Ext.getCmp('btnPrintAllOrderReceipt_printBilling').hide();
                    } else {
                        Ext.getCmp('btnPrintQC_and_Order_Receipt_printBilling').hide();
                        Ext.getCmp('btnPrintQCReceipt_printBilling').show();
                        Ext.getCmp('btnPrintAllOrderReceipt_printBilling').show();
                    }
                    if (opt_hide_button_invoice == '1') {
                        Ext.getCmp('btnPrintReceipt_printBilling').hide();
                    }
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        me.doClose(me.id + '_payBilling');
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan merubah status billing ke Hold Billing untuk merubah Cara/Tipe Pembayaran Billing');
                    } else {
                        me.calcBillingTotal();
                    }
                }
            }
        });
    },
    payBilling: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var phpJs = theApp.getHelper('phpJs');
        var store_masterBank_Autocomplete_billingCashier = theApp.getStore('store_masterBank_Autocomplete_billingCashier', false);
        if (store_masterBank_Autocomplete_billingCashier == false) {
            store_masterBank_Autocomplete_billingCashier = theApp.copyStore('master_pos', 'store_masterBank', 'store_masterBank_Autocomplete_billingCashier');
        }
        store_masterBank_Autocomplete_billingCashier.proxy.extraParams.payment_id = -1;
        store_masterBank_Autocomplete_billingCashier.proxy.extraParams.is_dropdown = 1;
        store_masterBank_Autocomplete_billingCashier.proxy.extraParams.limit = 9999;
        store_masterBank_Autocomplete_billingCashier.proxy.extraParams.keywords = '';
        var store_cashier_payment_billingCashier = theApp.getStore('store_cashier_payment_billingCashier', false);
        if (store_cashier_payment_billingCashier == false) {
            store_cashier_payment_billingCashier = theApp.copyStore('master_pos', 'store_paymentTypeCashier', 'store_cashier_payment_billingCashier');
        }
        if (!me.CURR_BILL_DATA.billing_no) {
            var Titletext = 'Bayar Billing: #undefined';
        } else {
            var Titletext = 'Bayar Billing: #' + me.CURR_BILL_DATA.billing_no_show;
        }
        var margin_paybill = 0;
        var margin_halfpaybill = 65;
        if (opt_hide_button_invoice == '1') {
            margin_halfpaybill += 70;
        }
        if (opt_hide_button_halfpayment == '1') {
            margin_halfpaybill += 60;
            if (opt_print_qc_then_order != 1) {
                margin_halfpaybill += 65;
            }
        } else {
            if (opt_print_qc_then_order != 1) {
                margin_halfpaybill += 65;
            }
        }
        var allowBlank_choose_customer = true;
        if (opt_must_choose_customer == '1') {
            var allowBlank_choose_customer = false;
        }
        var thisDefaultFocus = 'total_paid_payBilling';
        if (opt_from_apps == 1) {
            thisDefaultFocus = '';
        }
        return desktop.createWindow({
            id: me.id + '_payBilling',
            title: Titletext,
            width: 800,
            height: 600,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            defaultFocus: thisDefaultFocus,
            items: [{
                xtype: 'form',
                id: 'form_payBilling',
                border: 0,
                margin: '0 0 0 0',
                layout: {
                    type: 'border'
                },
                items: [{
                    xtype: 'panel',
                    margin: '0',
                    flex: 1,
                    region: 'center',
                    bodyPadding: 10,
                    layout: 'anchor',
                    items: [{
                            xtype: 'hidden',
                            name: 'billing_id'
                        }, {
                            xtype: 'hidden',
                            name: 'table_id'
                        }, {
                            xtype: 'hidden',
                            name: 'table_no'
                        }, {
                            xtype: 'hidden',
                            name: 'billing_no'
                        }, {
                            xtype: 'hidden',
                            name: 'total_billing'
                        }, {
                            xtype: 'hidden',
                            name: 'total_discount'
                        }, {
                            xtype: 'hidden',
                            name: 'total_ppn'
                        }, {
                            xtype: 'hidden',
                            name: 'total_service'
                        }, {
                            xtype: 'hidden',
                            name: 'grand_total'
                        }, {
                            xtype: 'hidden',
                            name: 'total_return'
                        }, {
                            xtype: 'hidden',
                            name: 'total_pembulatan'
                        }, {
                            xtype: 'hidden',
                            name: 'is_half_payment'
                        }, {
                            xtype: 'hidden',
                            name: 'total_cash'
                        }, {
                            xtype: 'hidden',
                            name: 'total_credit'
                        }, {
                            xtype: 'hidden',
                            name: 'total_guest',
                            id: 'total_guest_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'total_crew',
                            id: 'total_crew_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'total_gh',
                            id: 'total_gh_payBilling'
                        }, {
                            xtype: 'fieldcontainer',
                            layout: {
                                type: 'column'
                            },
                            width: 400,
                            fieldLabel: '',
                            items: [{
                                xtype: 'panel',
                                margin: '0',
                                layout: 'column',
                                border: 0,
                                margin: '0 0 0 0',
                                items: [{
                                    xtype: 'button',
                                    text: 'PAX',
                                    name: 'totalGuestButton',
                                    id: 'totalGuestButton_billingCashier',
                                    textAlign: 'left',
                                    cls: 'button-billing',
                                    width: 70,
                                    listeners: {
                                        click: function () {
                                            me.source_loadDataViewTotalGuest = 'form_payBilling';
                                            me.createWindow(me, 'loadDataViewTotalGuest');
                                        }
                                    }
                                }, {
                                    xtype: 'displayfield',
                                    name: 'total_guest_display',
                                    id: 'total_guest_display_payBilling',
                                    fieldLabel: '',
                                    value: ': 0',
                                    labelSeparator: '',
                                    labelWidth: 5,
                                    width: 50,
                                    allowBlank: false,
                                    margin: '0 0 0 10',
                                    height: 30,
                                    readOnly: false,
                                    fieldStyle: 'font-size:14px; text-align:left;',
                                    labelStyle: 'font-size:14px;'
                                }]
                            }, {
                                xtype: 'panel',
                                margin: '0',
                                layout: 'column',
                                border: 0,
                                margin: '0 0 0 0',
                                hidden: true,
                                items: [{
                                    xtype: 'button',
                                    text: 'CREW',
                                    name: 'totalCrewButton',
                                    id: 'totalCrewButton_billingCashier',
                                    textAlign: 'left',
                                    cls: 'button-billing',
                                    width: 70,
                                    listeners: {
                                        click: function () {
                                            me.source_loadDataViewTotalCrew = 'form_payBilling';
                                            me.createWindow(me, 'loadDataViewTotalCrew');
                                        }
                                    }
                                }, {
                                    xtype: 'displayfield',
                                    name: 'total_crew_display',
                                    id: 'total_crew_display_payBilling',
                                    fieldLabel: '',
                                    value: ': 0',
                                    labelSeparator: '',
                                    labelWidth: 5,
                                    width: 120,
                                    allowBlank: false,
                                    margin: '0 0 0 10',
                                    height: 30,
                                    readOnly: false,
                                    fieldStyle: 'font-size:14px; text-align:left;',
                                    labelStyle: 'font-size:14px;',
                                    listeners: {
                                        show: function () {
                                            
                                        }
                                    }
                                }]
                            }, {
                                xtype: 'panel',
                                margin: '0',
                                layout: 'column',
                                border: 0,
                                margin: '0 0 0 0',
                                hidden: true,
                                items: [{
                                    xtype: 'button',
                                    text: 'GH',
                                    name: 'totalGhButton',
                                    id: 'totalGhButton_billingCashier',
                                    textAlign: 'left',
                                    cls: 'button-billing',
                                    width: 70,
                                    listeners: {
                                        click: function () {
                                            me.source_loadDataViewTotalGh = 'form_payBilling';
                                            me.createWindow(me, 'loadDataViewTotalGh');
                                        }
                                    }
                                }, {
                                    xtype: 'displayfield',
                                    name: 'total_gh_display',
                                    id: 'total_gh_display_payBilling',
                                    fieldLabel: '',
                                    value: ': 0',
                                    labelSeparator: '',
                                    labelWidth: 5,
                                    width: 50,
                                    allowBlank: false,
                                    margin: '0 0 0 10',
                                    height: 30,
                                    readOnly: false,
                                    fieldStyle: 'font-size:14px; text-align:left;',
                                    labelStyle: 'font-size:14px;'
                                }]
                            }]
                        }, {
                            xtype: 'hidden',
                            name: 'include_tax',
                            id: 'include_tax_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'tax_percentage',
                            id: 'tax_percentage_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'include_service',
                            id: 'include_service_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'service_percentage',
                            id: 'service_percentage_payBilling'
                        }, {
                            xtype: 'hidden',
                            name: 'total_dp',
                            id: 'total_dp_payBilling'
                        }, {
                            xtype: 'fieldset',
                            title: 'CARA BAYAR',
                            items: [{
                                    xtype: 'combobox',
                                    name: 'payment_type_name',
                                    id: 'payment_type_name_payBilling',
                                    fieldLabel: 'TIPE BAYAR',
                                    anchor: '100%',
                                    store: store_cashier_payment_billingCashier,
                                    queryMode: 'local',
                                    displayField: 'name',
                                    valueField: 'name',
                                    typeAhead: true,
                                    minChars: 1,
                                    forceSelection: true,
                                    allowBlank: false,
                                    labelWidth: 100,
                                    listeners: {
                                        select: function (combo, records, eOpts) {
                                            var form = Ext.getCmp('form_payBilling').getForm();
                                            var payment_id = records[0].data.id;
                                            form.findField('payment_id').setValue(payment_id);
                                            if (records[0].data.id == 1) {
                                                Ext.getCmp('bank_id_payBilling').setDisabled(true);
                                                Ext.getCmp('card_no_payBilling').setDisabled(true);
                                                //Ext.getCmp('btnHalfPayment_payBilling').setDisabled(true);
                                                form.findField('bank_id').setValue(0);
                                                form.findField('card_no').setValue('');
                                                Ext.getCmp('bank_id_payBilling').select('');
                                                Ext.getCmp('card_no_payBilling').setValue('');
                                                Ext.getCmp('bank_id_payBilling').allowBlank = true;
                                                Ext.getCmp('card_no_payBilling').allowBlank = true;
                                                Ext.getCmp('nominalButtonArea_billingCashier').show();
                                            } else {
                                                if (opt_min_noncash != 0) {
                                                    if (me.CURR_BILL_DATA.grand_total < opt_min_noncash) {
                                                        ExtApp.Msg.warning("Penggunaan Non Cash Minimal: Rp. " + phpJs.priceFormat(opt_min_noncash));
                                                        return false;
                                                    }
                                                }
                                                if (opt_cashier_credit_ar == 0 && payment_id == 4) {
                                                    ExtApp.Msg.warning("Penggunaan Credit/AR tidak aktif!");
                                                    form.findField('payment_id').setValue(1);
                                                    Ext.getCmp('bank_id_payBilling').setDisabled(true);
                                                    Ext.getCmp('card_no_payBilling').setDisabled(true);
                                                    //Ext.getCmp('btnHalfPayment_payBilling').setDisabled(true);
                                                    form.findField('bank_id').setValue(0);
                                                    form.findField('card_no').setValue('');
                                                    Ext.getCmp('bank_id_payBilling').select('');
                                                    Ext.getCmp('card_no_payBilling').setValue('');
                                                    Ext.getCmp('bank_id_payBilling').allowBlank = true;
                                                    Ext.getCmp('card_no_payBilling').allowBlank = true;
                                                    return false;
                                                }
                                                Ext.getCmp('bank_id_payBilling').select('');
                                                Ext.getCmp('card_no_payBilling').setValue('');
                                                store_masterBank_Autocomplete_billingCashier.proxy.extraParams.payment_id = payment_id;
                                                store_masterBank_Autocomplete_billingCashier.load({
                                                    callback: function () {
                                                        if (me.CURR_BILL_DATA.bank_id) {
                                                            Ext.getCmp('bank_id_payBilling').select(me.CURR_BILL_DATA.bank_name);
                                                        }
                                                        if (me.CURR_BILL_DATA.card_no) {
                                                            Ext.getCmp('card_no_payBilling').setValue(me.CURR_BILL_DATA.card_no);
                                                        }
                                                    }
                                                });
                                                Ext.getCmp('bank_id_payBilling').setDisabled(false);
                                                Ext.getCmp('card_no_payBilling').setDisabled(false);
                                                //Ext.getCmp('btnHalfPayment_payBilling').setDisabled(false);
                                                Ext.getCmp('bank_id_payBilling').allowBlank = false;
                                                Ext.getCmp('card_no_payBilling').allowBlank = false;
                                                Ext.getCmp('nominalButtonArea_billingCashier').hide();
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'hidden',
                                    name: 'payment_id'
                                },
                                {
                                    xtype: 'hidden',
                                    name: 'bank_id'
                                },
                                {
                                    xtype: 'combobox',
                                    name: 'bank_name',
                                    id: 'bank_id_payBilling',
                                    fieldLabel: 'BANK/TIPE',
                                    store: store_masterBank_Autocomplete_billingCashier,
                                    labelSeparator: ':',
                                    labelWidth: 100,
                                    anchor: '100%',
                                    disabled: true,
                                    displayField: 'bank_name',
                                    valueField: 'id',
                                    queryMode: 'local',
                                    anyMatch: true,
                                    listeners: {
                                        select: function (combo, records, eOpts) {
                                            var form = Ext.getCmp('form_payBilling').getForm();
                                            form.findField('bank_id').setValue(records[0].data.id);
                                            form.findField('bank_name').setValue(records[0].data.bank_name);
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'card_no',
                                    id: 'card_no_payBilling',
                                    fieldLabel: 'TRX/VCHR NO',
                                    labelSeparator: ':',
                                    labelWidth: 100,
                                    anchor: '100%',
                                    disabled: true,
                                    listeners: {
                                        specialkey: function (field, e) {}
                                    }
                                }
                            ]
                        }, {
                            xtype: 'hidden',
                            name: 'discount_id'
                        }, {
                            xtype: 'hidden',
                            name: 'discount_notes'
                        },
                        {
                            xtype: 'hidden',
                            name: 'discount_percentage'
                        }, {
                            xtype: 'hidden',
                            name: 'discount_price'
                        },
                        {
                            xtype: 'hidden',
                            name: 'discount_total'
                        }, {
                            xtype: 'hidden',
                            name: 'min_total_billing'
                        },
                        {
                            xtype: 'hidden',
                            name: 'customer_id'
                        }, {
                            xtype: 'hidden',
                            name: 'sales_id'
                        },
                        {
                            xtype: 'hidden',
                            name: 'sales_percentage'
                        }, {
                            xtype: 'hidden',
                            name: 'sales_price'
                        },
                        {
                            xtype: 'hidden',
                            name: 'sales_type'
                        },
                        {
                            xtype: 'fieldcontainer',
                            layout: {
                                type: 'column'
                            },
                            width: 350,
                            fieldLabel: '',
                            items: [{
                                xtype: 'textfield',
                                name: 'customer_name',
                                fieldLabel: 'Customer',
                                labelWidth: 80,
                                width: 270,
                                readOnly: false,
                                listeners: {
                                    focus: function () {
                                        me.createWindow(me, 'customerPopup');
                                    }
                                }
                            }, {
                                xtype: 'button',
                                width: 30,
                                id: 'btnCustomer_payBilling',
                                iconCls: 'btn-search',
                                margin: '0 0 0 5',
                                listeners: {
                                    click: function () {
                                        me.createWindow(me, 'customerPopup');
                                    }
                                }
                            }, {
                                xtype: 'button',
                                width: 25,
                                id: 'btnClearCustomer_payBilling',
                                iconCls: 'icon-cancel',
                                margin: '0 0 0 5',
                                listeners: {
                                    click: function () {
                                        var form = Ext.getCmp('form_payBilling').getForm();
                                        form.findField('customer_id').setValue(0);
                                        form.findField('customer_name').setValue('');
                                        if (opt_send_billing_to_email == 1) {
                                            me.sendBillingtoEmail_nama = '';
                                            me.sendBillingtoEmail_email = '';
                                            me.sendBillingtoEmail_phone = '';
                                        }
                                    }
                                }
                            }]
                        }, {
                            xtype: 'datefield',
                            fieldLabel: 'TIME IN',
                            name: 'time_in',
                            labelSeparator: '',
                            format: 'd-m-Y',
                            altFormats: 'Y-m-d|d-m-Y|dmY|Ymd',
                            labelWidth: 80,
                            width: 270,
                            value: phpJs.date('d-m-Y H:i:s'),
                        },
                        {
                            xtype: 'textfield',
                            name: 'billing_notes',
                            id: 'billing_notes_payBilling',
                            fieldLabel: 'Boarding',
                            labelSeparator: ':',
                            labelWidth: 80,
                            width: 270
                        }, {
                            xtype: 'textfield',
                            name: 'qc_notes',
                            id: 'qc_notes_payBilling',
                            fieldLabel: 'Route',
                            labelSeparator: ':',
                            labelWidth: 80,
                            width: 270
                        }, {
                            xtype: 'panel',
                            margin: '0',
                            layout: 'column',
                            border: 0,
                            items: [{
                                xtype: 'panel',
                                margin: '0',
                                layout: 'auto',
                                border: 0,
                                width: 210,
                                items: [{
                                    xtype: 'checkbox',
                                    hidden: true,
                                    name: 'is_compliment',
                                    fieldLabel: 'IS COMPLIMENT ?',
                                    labelSeparator: ' ',
                                    labelWidth: 130,
                                    inputValue: '1'
                                }, {
                                    xtype: 'hidden',
                                    name: 'compliment_total'
                                }]
                            }, {
                                xtype: 'hidden',
                                name: 'single_rate',
                                value: 0
                            }]
                        }
                    ]
                }, {
                    xtype: 'panel',
                    margin: '0',
                    flex: 1,
                    region: 'east',
                    bodyPadding: 10,
                    layout: 'anchor',
                    items: [{
                        xtype: 'displayfield',
                        name: 'total_billing_rp',
                        fieldLabel: 'TOTAL',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        allowBlank: false,
                        margin: '0',
                        height: 25,
                        readOnly: false,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;'
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        items: [{
                            xtype: 'button',
                            text: 'DISCOUNT',
                            name: 'discountButton',
                            id: 'discountButton_billingCashier',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 100,
                            listeners: {
                                click: function () {
                                    if (me.CURR_BILL_DATA.discount_id > 0) {
                                        if (me.CURR_BILL_DATA.discount_perbilling == 1) {
                                            me.createWindow(me, 'setDiscountBilling');
                                        } else {
                                            me.createWindow(me, 'setDiscount');
                                        }
                                    } else {
                                        if (opt_default_discount_payment == 1) {
                                            me.createWindow(me, 'setDiscountBilling');
                                        } else {
                                            me.createWindow(me, 'setDiscount');
                                        }
                                    }
                                }
                            }
                        }, {
                            xtype: 'displayfield',
                            name: 'total_discount_rp',
                            fieldLabel: '',
                            value: 'Rp. 0',
                            labelSeparator: '',
                            labelWidth: 5,
                            width: 230,
                            allowBlank: false,
                            margin: '0 0 0 18',
                            height: 25,
                            readOnly: false,
                            fieldStyle: 'font-size:16px; text-align:right;',
                            labelStyle: 'font-size:16px;'
                        }]
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        items: [{
                            xtype: 'button',
                            text: 'TAX',
                            name: 'ppnButton',
                            id: 'ppnButton_billingCashier',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 100,
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'changePPN');
                                }
                            }
                        }, {
                            xtype: 'displayfield',
                            name: 'total_ppn_rp',
                            fieldLabel: '',
                            value: 'Rp. 0',
                            labelSeparator: '',
                            labelWidth: 5,
                            width: 230,
                            allowBlank: false,
                            margin: '0 0 0 18',
                            height: 25,
                            readOnly: false,
                            fieldStyle: 'font-size:16px; text-align:right;',
                            labelStyle: 'font-size:16px;'
                        }]
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        //hidden: true,
                        items: [{
                            xtype: 'button',
                            text: 'SERVICE',
                            name: 'serviceButton',
                            id: 'serviceButton_billingCashier',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 100,
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'changeService');
                                }
                            }
                        }, {
                            xtype: 'displayfield',
                            name: 'total_service_rp',
                            fieldLabel: '',
                            value: 'Rp. 0',
                            labelSeparator: '',
                            labelWidth: 5,
                            width: 230,
                            allowBlank: false,
                            margin: '0 0 0 18',
                            height: 25,
                            readOnly: false,
                            fieldStyle: 'font-size:16px; text-align:right;',
                            labelStyle: 'font-size:16px;'
                        }]
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        items: [{
                            xtype: 'button',
                            text: 'DP',
                            name: 'dpButton',
                            id: 'dpButton_billingCashier',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 100,
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'changeDP');
                                }
                            }
                        }, {
                            xtype: 'displayfield',
                            name: 'total_dp_rp',
                            id: 'dpButton_display_billingCashier',
                            fieldLabel: '',
                            value: 'Rp. 0',
                            labelSeparator: '',
                            labelWidth: 5,
                            width: 230,
                            allowBlank: false,
                            margin: '0 0 0 18',
                            height: 25,
                            readOnly: false,
                            fieldStyle: 'font-size:16px; text-align:right;',
                            labelStyle: 'font-size:16px;'
                        }]
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        items: [{
                            xtype: 'button',
                            text: 'COMPLIMENT',
                            name: 'complimentButton',
                            id: 'complimentButton_billingCashier',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 125,
                            listeners: {
                                click: function () {
                                    me.createWindow(me, 'setCompliment');
                                }
                            }
                        }, {
                            xtype: 'displayfield',
                            name: 'total_compliment_rp',
                            fieldLabel: '',
                            value: 'Rp. 0',
                            labelSeparator: '',
                            labelWidth: 5,
                            width: 205,
                            allowBlank: false,
                            margin: '0 0 0 18',
                            height: 25,
                            readOnly: false,
                            fieldStyle: 'font-size:16px; text-align:right;',
                            labelStyle: 'font-size:16px;'
                        }],
                        hidden: true
                    }, {
                        xtype: 'displayfield',
                        name: 'total_pembulatan_rp',
                        fieldLabel: 'PEMBULATAN',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        allowBlank: false,
                        margin: '0 0 0 0',
                        height: 20,
                        readOnly: false,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;',
                        style: 'border-top:1px solid #d8d8d8;',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'additional_fee',
                        fieldLabel: 'ADDITIONAL FEES',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        allowBlank: true,
                        margin: '0 0 5 0',
                        height: 25,
                        readOnly: false,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;',
                        bodyStyle: 'background-color:#bcdcf5;'
                    }, {
                        xtype: 'displayfield',
                        name: 'grand_total_rp',
                        fieldLabel: 'GRAND TOTAL',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        allowBlank: false,
                        margin: '0 0 5 0',
                        height: 25,
                        readOnly: false,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;'
                    }, {
                        xtype: 'textfield',
                        name: 'total_paid',
                        id: 'total_paid_payBilling',
                        fieldLabel: 'TOTAL BAYAR',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        height: 35,
                        allowBlank: false,
                        selectOnFocus: true,
                        margin: '0 0 5 0',
                        fieldStyle: 'font-size:20px; text-align:right; font-weight:bold; color:#666;',
                        labelStyle: 'font-size:18px; margin-top:10px; font-weight:bold; color:#666;',
                        bodyStyle: 'background-color:#bcdcf5;',
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    Ext.getCmp('btnPrintReceipt_payBilling').focus();
                                    var form = Ext.getCmp('form_payBilling').getForm();
                                    var total_return = 0;
                                    var grand_total = parseFloat(form.findField('grand_total').getValue());
                                    var total_paid = phpJs.numberFormat(form.findField('total_paid').getValue());
                                    if (total_paid == 0) {
                                        if (total_paid != grand_total) {
                                            ExtApp.Msg.warning('Total Bayar tidak boleh kosong!');
                                        }
                                    }
                                    total_return = total_paid - grand_total;
                                    if (total_paid < grand_total) {
                                        ExtApp.Msg.warning('Total Bayar tidak boleh kurang dari Total Billing!');
                                        total_return = 0;
                                    }
                                    var total_return_rp = 'Rp ' + phpJs.priceFormat(total_return);
                                    form.findField('total_return').setValue(total_return);
                                    form.findField('total_return_rp').setValue(total_return_rp);
                                }
                            },
                            blur: function (field, val) {
                                Ext.getCmp('btnPrintReceipt_payBilling').focus();
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var total_return = 0;
                                var grand_total = parseFloat(form.findField('grand_total').getValue());
                                var total_paid = phpJs.numberFormat(form.findField('total_paid').getValue());
                                if (total_paid == 0) {
                                    if (total_paid != grand_total) {
                                        ExtApp.Msg.warning('Total Bayar tidak boleh kosong!');
                                    }
                                }
                                total_return = total_paid - grand_total;
                                if (total_paid < grand_total) {
                                    ExtApp.Msg.warning('Total Bayar tidak boleh kurang dari Total Billing!');
                                    total_return = 0;
                                }
                                var total_return_rp = 'Rp ' + phpJs.priceFormat(total_return);
                                form.findField('total_return').setValue(total_return);
                                form.findField('total_return_rp').setValue(total_return_rp);
                            },
                            focus: function () {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var total_paid = phpJs.numberFormat(form.findField('total_paid').getValue());
                                form.findField('total_paid').setValue(total_paid);
                            }
                        }
                    }, {
                        xtype: 'displayfield',
                        name: 'total_return_rp',
                        fieldLabel: 'KEMBALI',
                        labelSeparator: '',
                        labelWidth: 200,
                        anchor: '100%',
                        allowBlank: false,
                        margin: '0 0 15 0',
                        height: 25,
                        width: 340,
                        readOnly: false,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;;'
                    }, {
                        xtype: 'panel',
                        name: 'signature',
                        html: '<div id="sig"></div>',
                        height: 100,
                        listeners: {
                        afterrender: function() {
                            var sig = $('#sig').signature();
                            if(me.CURR_BILL_DATA.signature){
                                sig.signature('draw', me.CURR_BILL_DATA.signature);}
                            }
                        }
                    }, {
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 5 0',
                        items: [{
                            xtype: 'button',
                            text: 'CLEAR',
                            name: 'clearSig',
                            id: 'clearSignature',
                            textAlign: 'left',
                            cls: 'button-billing',
                            width: 100,
                            listeners: {
                                click: function () {
                                    var sig = $('#sig');
                                    sig.signature('clear');
                                }
                            }
                        }]
                    }]
                }, {
                    xtype: 'panel',
                    id: 'nominalButtonArea_billingCashier',
                    margin: '0',
                    region: 'south',
                    bodyPadding: 10,
                    layout: 'auto',
                    height: 70,
                    border: true,
                    textAlign: 'center',
                    bodyStyle: 'background-color:#bcdcf5; text-align:center;',
                    hidden: true,
                    items: [{
                        xtype: 'button',
                        text: 'Rp. 0',
                        name: 'nominalButton1',
                        id: 'nominalButton1_billingCashier',
                        textAlign: 'center',
                        minWidth: 100,
                        height: 45,
                        margin: '0 20 0 0',
                        scale: 'large',
                        listeners: {
                            click: function () {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var is_compliment = form.findField('is_compliment').getValue();
                                var payment_id = form.findField('payment_id').getValue();
                                var nominalButton1_val_billingCashier = form.findField('nominalButton1_val_billingCashier').getValue();
                                if (is_compliment == 1 && payment_id != 1) {
                                    ExtApp.Msg.warning('Set Compliment hanya menggunakan Cash/Tunai!');
                                } else {
                                    form.findField('total_paid').setValue(nominalButton1_val_billingCashier);
                                    me.save_payBilling(0);
                                }
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Rp. 0',
                        name: 'nominalButton2',
                        id: 'nominalButton2_billingCashier',
                        textAlign: 'center',
                        minWidth: 100,
                        height: 45,
                        margin: '0 20 0 0',
                        scale: 'large',
                        listeners: {
                            click: function () {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var is_compliment = form.findField('is_compliment').getValue();
                                var payment_id = form.findField('payment_id').getValue();
                                var nominalButton2_val_billingCashier = form.findField('nominalButton2_val_billingCashier').getValue();
                                if (is_compliment == 1 && payment_id != 1) {
                                    ExtApp.Msg.warning('Set Compliment hanya menggunakan Cash/Tunai!');
                                } else {
                                    form.findField('total_paid').setValue(nominalButton2_val_billingCashier);
                                    me.save_payBilling(0);
                                }
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Rp. 0',
                        name: 'nominalButton3',
                        id: 'nominalButton3_billingCashier',
                        textAlign: 'center',
                        minWidth: 100,
                        height: 45,
                        margin: '0 20 0 0',
                        scale: 'large',
                        listeners: {
                            click: function () {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var is_compliment = form.findField('is_compliment').getValue();
                                var payment_id = form.findField('payment_id').getValue();
                                var nominalButton3_val_billingCashier = form.findField('nominalButton3_val_billingCashier').getValue();
                                if (is_compliment == 1 && payment_id != 1) {
                                    ExtApp.Msg.warning('Set Compliment hanya menggunakan Cash/Tunai!');
                                } else {
                                    form.findField('total_paid').setValue(nominalButton3_val_billingCashier);
                                    me.save_payBilling(0);
                                }
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Rp. 0',
                        name: 'nominalButton4',
                        id: 'nominalButton4_billingCashier',
                        textAlign: 'center',
                        minWidth: 100,
                        height: 45,
                        margin: '0 0 0 0',
                        scale: 'large',
                        listeners: {
                            click: function () {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var is_compliment = form.findField('is_compliment').getValue();
                                var payment_id = form.findField('payment_id').getValue();
                                var nominalButton4_val_billingCashier = form.findField('nominalButton4_val_billingCashier').getValue();
                                if (is_compliment == 1 && payment_id != 1) {
                                    ExtApp.Msg.warning('Set Compliment hanya menggunakan Cash/Tunai!');
                                } else {
                                    form.findField('total_paid').setValue(nominalButton4_val_billingCashier);
                                    me.save_payBilling(0);
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        hidden: true,
                        name: 'nominalButton1_val_billingCashier'
                    }, {
                        xtype: 'textfield',
                        hidden: true,
                        name: 'nominalButton2_val_billingCashier'
                    }, {
                        xtype: 'textfield',
                        hidden: true,
                        name: 'nominalButton3_val_billingCashier'
                    }, {
                        xtype: 'textfield',
                        hidden: true,
                        name: 'nominalButton4_val_billingCashier'
                    }, ]
                }]
            }],
            buttons: [{
                text: 'SAVE<br/>ORDER',
                formBind: true,
                id: 'btnSave_infoBilling',
                width: 120,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                listeners: {
                    click: function () {
                        var sig = $('#sig').signature('toJSON');
                        me.save_infoBilling(sig);
                    }
                }
            }, {
                text: 'PAY</br>ORDER',
                formBind: true,
                id: 'btnSave_payBilling',
                width: 120,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                listeners: {
                    click: function () {
                        var form = Ext.getCmp('form_payBilling').getForm();
                        var is_compliment = form.findField('is_compliment').getValue();
                        var payment_id = form.findField('payment_id').getValue();
                        if (is_compliment == 1 && payment_id != 1) {
                            ExtApp.Msg.warning('Set Compliment hanya menggunakan Cash/Tunai!');
                        } else {
                            me.save_payBilling(0);
                        }
                    }
                }
            }],
            listeners: {
                show: function () {
                    if (me.CURR_BILL_DATA.billing_status == 'paid') {
                        me.doClose(me.id + '_payBilling');
                        ExtApp.Msg.warning('Billing ini sudah dibayar!<br/>Silahkan merubah status billing ke Hold Billing untuk merubah Cara/Tipe Pembayaran Billing');
                    } else {
                        var form = Ext.getCmp('form_payBilling').getForm();
                        form.reset();
                        me.CURR_BILL_DATA.is_compliment = 0;
                        me.CURR_BILL_DATA.is_half_payment = 0;
                        me.CURR_BILL_DATA.total_cash = 0;
                        me.CURR_BILL_DATA.total_credit = 0;
                        form.setValues(me.CURR_BILL_DATA);
                        /*if (opt_hide_button_invoice == '1') {
                            Ext.getCmp('btnPrintReceipt_payBilling').hide();
                        } else {
                            Ext.getCmp('btnPrintReceipt_payBilling').show();
                        }
                        if (opt_hide_button_halfpayment == '1') {
                            //Ext.getCmp('btnHalfPayment_payBilling').hide();
                        } else {
                            //Ext.getCmp('btnHalfPayment_payBilling').show();
                            //Ext.getCmp('btnHalfPayment_payBilling').setDisabled(true);
                        }*/
                        if (me.CURR_BILL_DATA.billing_id > 0) {
                            
                            Ext.getCmp('btnSave_payBilling').setDisabled(false);
                            /*Ext.getCmp('btnPrintReceipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintQC_and_Order_Receipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintQCReceipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintKitchenReceipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintBarReceipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintOtherReceipt_payBilling').setDisabled(false);
                            Ext.getCmp('btnPrintAllOrderReceipt_payBilling').setDisabled(false);*/
                        } else {
                            Ext.getCmp('btnSave_payBilling').setDisabled(true);
                            /*Ext.getCmp('btnPrintReceipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintQC_and_Order_Receipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintQCReceipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintKitchenReceipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintBarReceipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintOtherReceipt_payBilling').setDisabled(true);
                            Ext.getCmp('btnPrintAllOrderReceipt_payBilling').setDisabled(true);*/
                        }
                        var get_total_guest = me.CURR_BILL_DATA.total_guest;
                        var get_total_crew = me.CURR_BILL_DATA.total_crew;
                        var get_total_gh = me.CURR_BILL_DATA.total_gh;
                        Ext.getCmp('billingCashier_total_guest').setValue(get_total_guest);
                        Ext.getCmp('billingCashier_total_crew').setValue(get_total_crew);
                        Ext.getCmp('billingCashier_total_gh').setValue(get_total_gh);
                        Ext.getCmp('total_guest_payBilling').setValue(get_total_guest);
                        Ext.getCmp('total_crew_payBilling').setValue(get_total_crew);
                        Ext.getCmp('total_gh_payBilling').setValue(get_total_gh);
                        Ext.getCmp('total_guest_display_payBilling').setValue(' : ' + get_total_guest);
                        Ext.getCmp('total_crew_display_payBilling').setValue(' : ' + get_total_crew);
                        Ext.getCmp('total_gh_display_payBilling').setValue(' : ' + get_total_gh);
                        Ext.getCmp('payment_type_name_payBilling').select(me.CURR_BILL_DATA.payment_type_name);
                        if (me.CURR_BILL_DATA.payment_id == 2 || me.CURR_BILL_DATA.payment_id == 3) {
                            Ext.getCmp('bank_id_payBilling').select(me.CURR_BILL_DATA.bank_name);
                            //Ext.getCmp('btnHalfPayment_payBilling').setDisabled(false);
                        }
                        me.calcBillingTotal();
                    }
                    if (opt_print_qc_then_order == '1') {
                        Ext.getCmp('btnPrintQC_and_Order_Receipt_payBilling').show();
                        Ext.getCmp('btnPrintQCReceipt_payBilling').hide();
                        Ext.getCmp('btnPrintAllOrderReceipt_payBilling').hide();
                    } else {
                        Ext.getCmp('btnPrintQC_and_Order_Receipt_payBilling').hide();
                        Ext.getCmp('btnPrintQCReceipt_payBilling').show();
                        Ext.getCmp('btnPrintAllOrderReceipt_payBilling').show();
                    }
                    Ext.getCmp('nominalButtonArea_billingCashier').show();
                    if (opt_hide_button_downpayment == '1') {
                        Ext.getCmp('dpButton_billingCashier').hide();
                        Ext.getCmp('dpButton_display_billingCashier').hide();
                    } else {
                        Ext.getCmp('dpButton_billingCashier').show();
                        Ext.getCmp('dpButton_display_billingCashier').show();
                    }
                    form.findField('customer_name').allowBlank = true;
                    if (opt_must_choose_customer == 1) {
                        form.findField('customer_name').allowBlank = false;
                    }
                }
            }
        });
    },
    settingCashier: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Test &amp; Info Printer';
        var phpJs = theApp.getHelper('phpJs');
        var store_printerTipe_billingCashier = theApp.getStore('store_printerTipe_billingCashier', false);
        if (store_printerTipe_billingCashier == false) {
            store_printerTipe_billingCashier = theApp.copyStore('master_pos', 'store_printerTipe', 'store_printerTipe_billingCashier');
        }
        var store_printerPIN_billingCashier = theApp.getStore('store_printerPIN_billingCashier', false);
        if (store_printerPIN_billingCashier == false) {
            store_printerPIN_billingCashier = theApp.copyStore('master_pos', 'store_printerPIN', 'store_printerPIN_billingCashier');
        }
        return desktop.createWindow({
            id: me.id + '_settingCashier',
            title: Titletext,
            width: 450,
            height: 260,
            iconCls: 'btn-add',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'tabpanel',
                height: '100%',
                activeTab: 0,
                border: false,
                defaults: {
                    layout: 'fit'
                },
                id: 'tab_billingCashier_printerReceipt',
                items: [{
                    title: 'Cashier',
                    layout: 'fit',
                    id: 'tab_billingCashier_cashierReceipt',
                    items: [{
                        xtype: 'form',
                        id: 'form_settingCashier_cashierReceipt',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'panel',
                            layout: 'border',
                            height: 140,
                            border: false,
                            items: [{
                                xtype: 'panel',
                                flex: 1.5,
                                region: 'center',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Printer Info - Cashier',
                                    defaultType: 'textfield',
                                    layout: 'anchor',
                                    margin: '10 5 10 10',
                                    items: [{
                                        xtype: 'displayfield',
                                        name: 'print_method',
                                        fieldLabel: 'Metode Print',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_name',
                                        fieldLabel: 'Printer Name',
                                        anchor: '100%',
                                        labelWidth: 90
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_tipe',
                                        fieldLabel: 'Tipe Printer',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%'
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_pin',
                                        fieldLabel: 'Length Char',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }]
                                }]
                            }, {
                                xtype: 'panel',
                                flex: 1,
                                region: 'east',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Test Printer - Cashier',
                                    layout: 'anchor',
                                    margin: '10 10 10 5',
                                    items: [{
                                        xtype: 'button',
                                        text: 'Test Print',
                                        id: 'btnPrint_settingCashier_cashierReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        margin: '10 15 15 0',
                                        handler: function () {
                                            me.testPrinter('cashierReceipt', 0);
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: 'Cutting',
                                        id: 'btnCut_settingCashier_cashierReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        handler: function () {
                                            me.testPrinter('cashierReceipt', 1);
                                        }
                                    }]
                                }]
                            }]
                        }]
                    }]
                }, {
                    title: 'QC',
                    layout: 'fit',
                    id: 'tab_billingCashier_qcReceipt',
                    items: [{
                        xtype: 'form',
                        id: 'form_settingCashier_qcReceipt',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'panel',
                            layout: 'border',
                            height: 140,
                            border: false,
                            items: [{
                                xtype: 'panel',
                                flex: 1.5,
                                region: 'center',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Printer Info - QC',
                                    defaultType: 'textfield',
                                    layout: 'anchor',
                                    margin: '10 5 10 10',
                                    items: [{
                                        xtype: 'displayfield',
                                        name: 'print_method',
                                        fieldLabel: 'Metode Print',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_name',
                                        fieldLabel: 'Printer Name',
                                        anchor: '100%',
                                        labelWidth: 90
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_tipe',
                                        fieldLabel: 'Tipe Printer',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%'
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_pin',
                                        fieldLabel: 'Length Char',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }]
                                }]
                            }, {
                                xtype: 'panel',
                                flex: 1,
                                region: 'east',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Test Printer - QC',
                                    layout: 'anchor',
                                    margin: '10 10 10 5',
                                    items: [{
                                        xtype: 'button',
                                        text: 'Test Print',
                                        id: 'btnPrint_settingCashier_qcReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        margin: '10 15 15 0',
                                        handler: function () {
                                            me.testPrinter('qcReceipt', 0);
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: 'Cutting',
                                        id: 'btnCut_settingCashier_qcReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        handler: function () {
                                            me.testPrinter('qcReceipt', 1);
                                        }
                                    }]
                                }]
                            }]
                        }]
                    }]
                }, {
                    title: 'Kitchen',
                    layout: 'fit',
                    id: 'tab_billingCashier_kitchenReceipt',
                    items: [{
                        xtype: 'form',
                        id: 'form_settingCashier_kitchenReceipt',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'panel',
                            layout: 'border',
                            height: 140,
                            border: false,
                            items: [{
                                xtype: 'panel',
                                flex: 1.5,
                                region: 'center',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Printer Info - Kitchen',
                                    defaultType: 'textfield',
                                    layout: 'anchor',
                                    margin: '10 5 10 10',
                                    items: [{
                                        xtype: 'displayfield',
                                        name: 'print_method',
                                        fieldLabel: 'Metode Print',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_name',
                                        fieldLabel: 'Printer Name',
                                        anchor: '100%',
                                        labelWidth: 90
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_tipe',
                                        fieldLabel: 'Tipe Printer',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%'
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_pin',
                                        fieldLabel: 'Length Char',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, ]
                                }]
                            }, {
                                xtype: 'panel',
                                flex: 1,
                                region: 'east',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Test Printer - Kitchen',
                                    layout: 'anchor',
                                    margin: '10 10 10 5',
                                    items: [{
                                        xtype: 'button',
                                        text: 'Test Print',
                                        id: 'btnPrint_settingCashier_kitchenReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        margin: '10 15 15 0',
                                        handler: function () {
                                            me.testPrinter('kitchenReceipt', 0);
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: 'Cutting',
                                        id: 'btnCut_settingCashier_kitchenReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        handler: function () {
                                            me.testPrinter('kitchenReceipt', 1);
                                        }
                                    }]
                                }]
                            }]
                        }]
                    }]
                }, {
                    title: 'Bar',
                    layout: 'fit',
                    id: 'tab_billingCashier_barReceipt',
                    items: [{
                        xtype: 'form',
                        id: 'form_settingCashier_barReceipt',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'panel',
                            layout: 'border',
                            height: 140,
                            border: false,
                            items: [{
                                xtype: 'panel',
                                flex: 1.5,
                                region: 'center',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Printer Info - Bar',
                                    defaultType: 'textfield',
                                    layout: 'anchor',
                                    margin: '10 5 10 10',
                                    items: [{
                                        xtype: 'displayfield',
                                        name: 'print_method',
                                        fieldLabel: 'Metode Print',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_name',
                                        fieldLabel: 'Printer Name',
                                        anchor: '100%',
                                        labelWidth: 90
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_tipe',
                                        fieldLabel: 'Tipe Printer',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%'
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_pin',
                                        fieldLabel: 'Length Char',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, ]
                                }]
                            }, {
                                xtype: 'panel',
                                flex: 1,
                                region: 'east',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Test Printer - Bar',
                                    layout: 'anchor',
                                    margin: '10 10 10 5',
                                    items: [{
                                        xtype: 'button',
                                        text: 'Test Print',
                                        id: 'btnPrint_settingCashier_barReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        margin: '10 15 15 0',
                                        handler: function () {
                                            me.testPrinter('barReceipt', 0);
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: 'Cutting',
                                        id: 'btnCut_settingCashier_barReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        handler: function () {
                                            me.testPrinter('barReceipt', 1);
                                        }
                                    }]
                                }]
                            }]
                        }]
                    }]
                }, {
                    title: 'Other',
                    layout: 'fit',
                    id: 'tab_billingCashier_otherReceipt',
                    items: [{
                        xtype: 'form',
                        id: 'form_settingCashier_otherReceipt',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'panel',
                            layout: 'border',
                            height: 140,
                            border: false,
                            items: [{
                                xtype: 'panel',
                                flex: 1.5,
                                region: 'center',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Printer Info - Other',
                                    defaultType: 'textfield',
                                    layout: 'anchor',
                                    margin: '10 5 10 10',
                                    items: [{
                                        xtype: 'displayfield',
                                        name: 'print_method',
                                        fieldLabel: 'Metode Print',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_name',
                                        fieldLabel: 'Printer Name',
                                        anchor: '100%',
                                        labelWidth: 90
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_tipe',
                                        fieldLabel: 'Tipe Printer',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%'
                                    }, {
                                        xtype: 'displayfield',
                                        name: 'printer_pin',
                                        fieldLabel: 'Length Char',
                                        labelSeparator: ':',
                                        labelWidth: 90,
                                        anchor: '100%',
                                    }, ]
                                }]
                            }, {
                                xtype: 'panel',
                                flex: 1,
                                region: 'east',
                                layout: 'auto',
                                border: false,
                                items: [{
                                    xtype: 'fieldset',
                                    minHeight: 120,
                                    collapsible: false,
                                    title: 'Test Printer - Other',
                                    layout: 'anchor',
                                    margin: '10 10 10 5',
                                    items: [{
                                        xtype: 'button',
                                        text: 'Test Print',
                                        id: 'btnPrint_settingCashier_otherReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        margin: '10 15 15 0',
                                        handler: function () {
                                            me.testPrinter('otherReceipt', 0);
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: 'Cutting',
                                        id: 'btnCut_settingCashier_otherReceipt',
                                        width: 100,
                                        textAlign: 'center',
                                        cls: 'button-billing',
                                        handler: function () {
                                            me.testPrinter('otherReceipt', 1);
                                        }
                                    }]
                                }]
                            }]
                        }]
                    }]
                }]
            }],
            buttons: [{
                text: 'Tutup',
                width: 100,
                textAlign: 'center',
                cls: 'button-billing',
                handler: function () {
                    me.doClose(me.id + '_settingCashier');
                }
            }],
            listeners: {
                show: function () {
                    me.loadSettingCashier();
                }
            }
        });
    },
    loadDataViewTable: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Pilih Table ';
        var phpJs = theApp.getHelper('phpJs');
        var from_source = me.source_loadDataViewTable;
        if (!me.CURR_BILL_DATA.block_table) {
            me.CURR_BILL_DATA.block_table = 0;
        }
        var store_tableFloorPlan_loadDataViewTable = theApp.getStore('store_tableFloorPlan_loadDataViewTable', false);
        if (store_tableFloorPlan_loadDataViewTable == false) {
            store_tableFloorPlan_loadDataViewTable = theApp.copyStore('master_pos', 'store_masterFloorplan', 'store_tableFloorPlan_loadDataViewTable');
        }
        store_tableFloorPlan_loadDataViewTable.proxy.extraParams.limit = 9999;
        store_tableFloorPlan_loadDataViewTable.proxy.extraParams.purpose = '';
        var store_dataViewTable = theApp.getStore('store_dataViewTable', false);
        if (store_dataViewTable == false) {
            store_dataViewTable = theApp.copyStore('master_pos', 'store_masterTableInv', 'store_dataViewTable');
        }
        store_dataViewTable.proxy.extraParams.limit = 9999;
        store_dataViewTable.proxy.extraParams.show_available = 1;
        store_dataViewTable.proxy.extraParams.show_selected = 0;
        store_dataViewTable.proxy.extraParams.curr_billing = me.CURR_BILL_DATA.billing_id;
        store_dataViewTable.proxy.extraParams.keywords = '';
        store_dataViewTable.proxy.extraParams.purpose = 'loadDataViewTable';
        store_dataViewTable.proxy.extraParams.floorplan_id = 0;
        if (opt_table_multi_order == 1) {
            store_dataViewTable.proxy.extraParams.show_available = 0;
        }
        me.store_billingCashier_blockTable = theApp.getStore('store_billingCashier_blockTable', false);
        if (me.store_billingCashier_blockTable == false) {
            me.store_billingCashier_blockTable = theApp.copyStore('master_pos', 'store_masterTableInv', 'store_billingCashier_blockTable');
        }
        me.store_billingCashier_blockTable.proxy.extraParams.limit = 9999;
        me.store_billingCashier_blockTable.proxy.extraParams.show_available = 0;
        me.store_billingCashier_blockTable.proxy.extraParams.show_selected = 1;
        me.store_billingCashier_blockTable.proxy.extraParams.curr_billing = me.CURR_BILL_DATA.billing_id;
        me.store_billingCashier_blockTable.proxy.extraParams.keywords = '';
        me.store_billingCashier_blockTable.proxy.extraParams.purpose = '';
        me.store_billingCashier_blockTable.proxy.extraParams.floorplan_id = 0;
        var selModel_billingCashier_blockTable = Ext.create('Ext.selection.CheckboxModel', {
            listeners: {
                selectionchange: function (sm, selections) {
                    Ext.getCmp('grid_billingCashier_blockTable').down('#deleteButton_billingCashier_blockTable').setDisabled(selections.length == 0);
                    Ext.getCmp('grid_billingCashier_blockTable').down('#setDefaultButton_billingCashier_blockTable').setDisabled(selections.length == 0);
                }
            }
        });
        if (opt_use_block_table == 1) {
            var billingCashier_blockTable_area_showhide = false;
            var billingCashier_setBlockTable_showhide = false;
            var marginClose_setBlockTable = '0 10 0 60';
            var width_dataViewTable = 1100;
            var marginNoBlockTable_viewTable = '0 370 0 0';
        } else {
            var billingCashier_blockTable_area_showhide = true;
            var billingCashier_setBlockTable_showhide = true;
            var marginClose_setBlockTable = '0 10 0 0';
            var width_dataViewTable = 788;
            var marginNoBlockTable_viewTable = '0 280 0 0';
        }
        return desktop.createWindow({
            id: me.id + '_dataViewTable',
            title: Titletext,
            width: width_dataViewTable,
            height: 500,
            iconCls: 'btn-add',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'panel',
                border: 0,
                height: 256,
                layout: {
                    type: 'border'
                },
                items: [{
                    xtype: 'panel',
                    flex: 1.8,
                    region: 'center',
                    id: 'billingCashier_dataViewTable_area',
                    border: 0,
                    width: 740,
                    layout: 'fit',
                    bodyStyle: 'background:url(' + appUrl + 'assets/desktop/wallpapers/wall_preferences.jpg) center center;',
                    items: [{
                        xtype: 'dataview',
                        autoScroll: true,
                        trackOver: true,
                        itemSelector: 'div.ux-product-list',
                        overItemCls: 'product-list-over',
                        id: 'billingCashier_dataViewTable',
                        store: store_dataViewTable,
                        minHeight: 300,
                        tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list list-dttable" id="dvTable-list-{id}">', '<div class="ux-product-list-icon list-dttable" style="background-color:#{table_color};">', '<div class="ux-product-list-text list-dttable" style="transform: translate(-50%, 50%); bottom:50%; left:50%; text-shadow: none; background-color:#{table_color}; color:#FFFFF; text-align: center; height:auto; padding:3px;">{table_info}</div>', '</div>', '</div>', '</tpl>', '<div class="x-clear"></div>'),
                        listeners: {
                            'itemclick': function (dataView, record) {
                                var getDataTable = record.data;
                                var set_table_form = false;
                                var is_block_table = me.CURR_BILL_DATA.block_table;
                                if (me.CURR_BILL_DATA.block_table == 1) {
                                    var d = me.store_billingCashier_blockTable.getRange(0);
                                    if (d.length == 0) {
                                        set_table_form = true;
                                    } else {
                                        set_table_form = false;
                                        me.updateTableBilling(is_block_table, getDataTable);
                                    }
                                } else {
                                    set_table_form = true;
                                }
                                if (set_table_form == true) {
                                    if (from_source == 'form_payBilling') {
                                        var form = Ext.getCmp('form_payBilling').getForm();
                                        form.findField('table_id').setValue(getDataTable.id);
                                        form.findField('table_no').setValue(getDataTable.table_no);
                                        form.findField('table_no_display').setValue(getDataTable.table_no);
                                        var form2 = Ext.getCmp('form_billingCashier').getForm();
                                        form2.findField('billingCashier_table_id').setValue(getDataTable.id);
                                        form2.findField('billingCashier_table_no').setValue(getDataTable.table_no);
                                        if (getDataTable.table_tipe == 'takeaway') {
                                            me.updateTableBilling(is_block_table, getDataTable, 1);
                                        } else {
                                            me.updateTableBilling(is_block_table, getDataTable, 0);
                                        }
                                    } else
                                    if (from_source == 'form_billingCashier') {
                                        var form = Ext.getCmp('form_billingCashier').getForm();
                                        form.findField('billingCashier_table_id').setValue(getDataTable.id);
                                        form.findField('billingCashier_table_no').setValue(getDataTable.table_no);
                                        if (getDataTable.table_tipe == 'takeaway') {
                                            me.updateTableBilling(is_block_table, getDataTable, 1);
                                        } else {
                                            me.updateTableBilling(is_block_table, getDataTable, 0);
                                        }
                                    } else {
                                        var form = Ext.getCmp('form_payBilling').getForm();
                                        form.findField('table_id').setValue('');
                                        form.findField('table_no').setValue('-');
                                        form.findField('table_no_display').setValue('- SELECT TABLE -');
                                        var form2 = Ext.getCmp('form_payBilling').getForm();
                                        form.findField('billingCashier_table_no').setValue('');
                                    }
                                    if (me.CURR_BILL_DATA.block_table == 0) {
                                        Ext.getCmp("billingCashier_dataViewTable_ToolbarSearch_searchName").setValue('');
                                        me.doSearchTable();
                                    }
                                }
                                if (is_block_table == 0) {
                                    me.doClose(me.id + '_dataViewTable');
                                }
                            }
                        }
                    }]
                }, {
                    xtype: 'panel',
                    id: 'billingCashier_blockTable_area',
                    flex: 1,
                    region: 'east',
                    bodyPadding: 0,
                    border: 0,
                    width: 312,
                    height: 412,
                    margin: '0 0 0 5',
                    layout: 'fit',
                    split: true,
                    collapsible: true,
                    splitterResize: false,
                    collapseMode: 'mini',
                    animCollapse: true,
                    hidden: billingCashier_blockTable_area_showhide,
                    items: [{
                        xtype: 'gridpanel',
                        border: 0,
                        id: 'grid_billingCashier_blockTable',
                        store: me.store_billingCashier_blockTable,
                        scroll: true,
                        selModel: selModel_billingCashier_blockTable,
                        columns: [{
                            xtype: 'gridcolumn',
                            dataIndex: 'id',
                            hidden: true,
                            hideable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'table_no',
                            text: 'TABLE',
                            width: 110,
                            sortable: false
                        }, {
                            xtype: 'gridcolumn',
                            dataIndex: 'floorplan_name',
                            text: 'ROOM/FLOOR',
                            width: 150,
                            sortable: false
                        }],
                        viewConfig: {
                            stripeRows: true,
                            forceFit: true
                        },
                        dockedItems: [{
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [{
                                text: 'Hapus',
                                itemId: 'deleteButton_billingCashier_blockTable',
                                tooltip: 'Hapus Block table',
                                iconCls: 'btn-delete',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        var getSelection = Ext.getCmp('grid_billingCashier_blockTable').getSelectionModel().selected;
                                        if (getSelection.length > 0) {
                                            me.delete_data_blockTable = getSelection.items[0].data;
                                            me.deleteTableBilling();
                                        } else {
                                            ExtApp.Msg.info('Silahkan Pilih Table/Meja!');
                                        }
                                    }
                                }
                            }, {
                                text: 'Set Default',
                                itemId: 'setDefaultButton_billingCashier_blockTable',
                                tooltip: 'Set Default table',
                                iconCls: 'btn-tick',
                                disabled: true,
                                listeners: {
                                    click: function () {
                                        var getSelection = Ext.getCmp('grid_billingCashier_blockTable').getSelectionModel().selected;
                                        if (getSelection.length > 0) {
                                            me.delete_data_blockTable = getSelection.items[0].data;
                                            me.setDefaultTableBilling();
                                        } else {
                                            ExtApp.Msg.info('Silahkan Pilih Table/Meja!');
                                        }
                                    }
                                }
                            }, '->', {
                                text: 'Refresh',
                                itemId: 'refreshButton_billingCashier_blockTable',
                                tooltip: 'Refresh Block table',
                                iconCls: 'btn-refresh',
                                listeners: {
                                    click: function () {
                                        Ext.getCmp('grid_billingCashier_blockTable').store.load();
                                    }
                                }
                            }]
                        }]
                    }]
                }, ]
            }],
            buttons: [{
                xtype: 'textfield',
                width: 200,
                height: 30,
                cls: 'button-category',
                name: 'table_name',
                emptyText: 'Search Table..',
                id: 'billingCashier_dataViewTable_ToolbarSearch_searchName',
                listeners: {
                    change: function () {
                        me.doSearchTable();
                    },
                    keyup: function () {
                        var view = Ext.getCmp('billingCashier_dataViewTable'),
                            selModel = view.getSelectionModel(),
                            selection = selModel.getSelection()[0];
                    },
                    specialkey: function (field, e) {
                        if (e.getKey() == e.ENTER) {
                            me.doSearchTable();
                        }
                    }
                }
            }, {
                text: 'RESET',
                width: 80,
                height: 30,
                textAlign: 'center',
                cls: 'button-category',
                id: 'billingCashier_dataViewTable_ToolbarSearch_resetButton',
                margin: '0 15 0 0',
                listeners: {
                    click: function () {
                        Ext.getCmp("billingCashier_dataViewTable_ToolbarSearch_searchName").setValue('');
                        me.doSearchTable();
                    }
                }
            }, {
                text: 'Refresh',
                width: 100,
                height: 30,
                textAlign: 'center',
                cls: 'button-billing',
                margin: marginNoBlockTable_viewTable,
                handler: function () {
                    store_dataViewTable.load();
                }
            }, {
                text: 'Set Block Table',
                id: 'billingCashier_setBlockTable',
                width: 150,
                height: 30,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 80 0 0',
                handler: function () {
                    me.CURR_BILL_DATA.block_table = 1;
                    Ext.getCmp('billingCashier_setBlockTable').hide();
                    Ext.getCmp('billingCashier_clearBlockTable').show();
                    Ext.getCmp('billingCashier_blockTable_area').setDisabled(false);
                }
            }, {
                text: 'Clear Block Table',
                id: 'billingCashier_clearBlockTable',
                width: 150,
                height: 30,
                hidden: true,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 70 0 0',
                handler: function () {
                    me.CURR_BILL_DATA.block_table = 0;
                    Ext.getCmp('billingCashier_clearBlockTable').hide();
                    Ext.getCmp('billingCashier_setBlockTable').show();
                    Ext.getCmp('billingCashier_blockTable_area').setDisabled(true);
                }
            }, {
                text: 'Tutup',
                width: 80,
                height: 30,
                textAlign: 'center',
                cls: 'button-billing',
                margin: marginClose_setBlockTable,
                handler: function () {
                    me.doClose(me.id + '_dataViewTable');
                }
            }],
            listeners: {
                show: function () {
                    store_dataViewTable.load();
                    me.store_billingCashier_blockTable.load();
                    if (me.CURR_BILL_DATA.block_table == 1) {
                        Ext.getCmp('billingCashier_setBlockTable').hide();
                        Ext.getCmp('billingCashier_clearBlockTable').show();
                        Ext.getCmp('billingCashier_blockTable_area').setDisabled(false);
                    } else {
                        Ext.getCmp('billingCashier_setBlockTable').show();
                        Ext.getCmp('billingCashier_clearBlockTable').hide();
                        Ext.getCmp('billingCashier_blockTable_area').setDisabled(true);
                    }
                    if (billingCashier_setBlockTable_showhide == true) {
                        Ext.getCmp('billingCashier_setBlockTable').hide();
                    }
                },
                boxready: function () {
                    var phpJs = theApp.getHelper('phpJs');
                    var floorPlanButton = [];
                    var buttonItem = {
                        xtype: 'button',
                        height: 35,
                        textAlign: 'center',
                        text: 'ALL TABLE',
                        cls: 'button-category',
                        listeners: {
                            click: function () {
                                var store = Ext.getCmp('billingCashier_dataViewTable').store,
                                    view = Ext.getCmp('billingCashier_dataViewTable'),
                                    selModel = view.getSelectionModel(),
                                    selection = selModel.getSelection()[0];
                                store.suspendEvents();
                                store.clearFilter();
                                store.resumeEvents();
                                if (selection && store.indexOf(selection) === -1) {
                                    selModel.clearSelections();
                                }
                                view.refresh();
                            }
                        }
                    };
                    floorPlanButton.push(buttonItem);
                    var getCatTotal = store_tableFloorPlan_loadDataViewTable.getCount();
                    if (getCatTotal == 0) {
                        store_tableFloorPlan_loadDataViewTable.load({
                            callback: function (records, operation, success) {
                                for (x in records) {
                                    buttonItem = {
                                        xtype: 'button',
                                        height: 35,
                                        textAlign: 'center',
                                        id: 'floorPlanTable_' + records[x].data.id,
                                        text: records[x].data.floorplan_name,
                                        cls: 'button-category',
                                        listeners: {
                                            click: function () {
                                                var getCatID = phpJs.str_replace("floorPlanTable_", "", this.id);
                                                var store = Ext.getCmp('billingCashier_dataViewTable').store,
                                                    view = Ext.getCmp('billingCashier_dataViewTable'),
                                                    selModel = view.getSelectionModel(),
                                                    selection = selModel.getSelection()[0];
                                                store.suspendEvents();
                                                store.clearFilter();
                                                store.filter({
                                                    property: 'floorplan_id',
                                                    anyMatch: true,
                                                    value: getCatID
                                                });
                                                store.resumeEvents();
                                                if (selection && store.indexOf(selection) === -1) {
                                                    selModel.clearSelections();
                                                }
                                                view.refresh();
                                            }
                                        }
                                    };
                                    floorPlanButton.push(buttonItem);
                                }
                                var dockTopCashier = {
                                    xtype: 'toolbar',
                                    id: 'floorPlanTable',
                                    dock: 'top',
                                    height: 60,
                                    bodyPadding: '5 20 5 20',
                                    items: floorPlanButton,
                                    defaultAlign: 'c?',
                                    layout: {
                                        overflowHandler: 'Scroller'
                                    }
                                };
                                Ext.getCmp('billingCashier_dataViewTable_area').addDocked(dockTopCashier);
                            }
                        });
                    } else {
                        var records = store_tableFloorPlan_loadDataViewTable.data.items;
                        for (x in records) {
                            buttonItem = {
                                xtype: 'button',
                                height: 35,
                                textAlign: 'center',
                                id: 'floorPlanTable_' + records[x].data.id,
                                text: records[x].data.floorplan_name,
                                cls: 'button-category',
                                listeners: {
                                    click: function () {
                                        var getCatID = phpJs.str_replace("floorPlanTable_", "", this.id);
                                        var store = Ext.getCmp('billingCashier_dataViewTable').store,
                                            view = Ext.getCmp('billingCashier_dataViewTable'),
                                            selModel = view.getSelectionModel(),
                                            selection = selModel.getSelection()[0];
                                        store.suspendEvents();
                                        store.clearFilter();
                                        store.filter({
                                            property: 'floorplan_id',
                                            anyMatch: true,
                                            value: getCatID
                                        });
                                        store.resumeEvents();
                                        if (selection && store.indexOf(selection) === -1) {
                                            selModel.clearSelections();
                                        }
                                        view.refresh();
                                    }
                                }
                            };
                            floorPlanButton.push(buttonItem);
                        }
                        var dockTopCashier = {
                            xtype: 'toolbar',
                            id: 'floorPlanTable',
                            dock: 'top',
                            height: 60,
                            bodyPadding: '5 20 5 20',
                            items: floorPlanButton,
                            defaultAlign: 'c?',
                            layout: {
                                overflowHandler: 'Scroller'
                            }
                        };
                        Ext.getCmp('billingCashier_dataViewTable_area').addDocked(dockTopCashier);
                    }
                    var d = store_dataViewTable.getRange(0);
                    if (d.length > 0) {
                        store_dataViewTable.loadData(d);
                    } else {
                        store_dataViewTable.load({
                            callback: function () {}
                        });
                    }
                }
            }
        });
    },
    loadDataViewTotalGuest: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Total Guest';
        var phpJs = theApp.getHelper('phpJs');
        var from_source = me.source_loadDataViewTotalGuest;
        var numlockVirtual = me.app.getHelper('numlockVirtual');
        return desktop.createWindow({
            id: me.id + '_changeTotalGuest',
            title: 'Total Guest',
            width: 300,
            height: 140,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeTotalGuest_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'fieldcontainer',
                    layout: {
                        type: 'column'
                    },
                    width: 300,
                    fieldLabel: '',
                    items: [{
                        xtype: 'numberfield',
                        name: 'change_total_guest',
                        id: 'change_total_guest_changeTotalGuest',
                        fieldLabel: 'TOTAL',
                        width: 170,
                        height: 40,
                        labelWidth: 70,
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px; margin-top:15px;',
                        minValue: 0
                    }, {
                        xtype: 'button',
                        width: 25,
                        id: 'btnNumlock_changeTotalGuest',
                        iconCls: 'icon-keyboard',
                        margin: '10 0 0 10',
                        hidden: true,
                        listeners: {
                            click: function () {
                                var getDefaultVal = Ext.getCmp('change_total_guest_changeTotalGuest').getValue();
                                var numlockVdata = {
                                    title: 'Input Total Guest',
                                    focusName: 'Total Guest',
                                    focusID: 'change_total_guest_changeTotalGuest',
                                    triggerID: 'btnChange_changeTotalGuest_billingCashier',
                                    defaultValue: getDefaultVal,
                                    tipe: 'numlock',
                                    numlockId: me.id + '_changeTotalGuest',
                                };
                                numlockVirtual.popup(numlockVdata, me);
                            }
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Save',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeTotalGuest_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_changeTotalGuest_billingCashier(from_source);
                    }
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeTotalGuest_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeTotalGuest');
                }
            }],
            listeners: {
                show: function () {
                    var get_total_guest = 0;
                    if (!me.CURR_BILL_DATA.total_guest) {} else {
                        var get_total_guest = me.CURR_BILL_DATA.total_guest;
                    }
                    var form2 = Ext.getCmp('form_changeTotalGuest_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_total_guest').setValue(get_total_guest);
                    Ext.getCmp('btnNumlock_changeTotalGuest').hide();
                    if (opt_calculator_virtual == 1) {
                        Ext.getCmp('btnNumlock_changeTotalGuest').show();
                    }
                }
            }
        });
    },
    loadDataViewTotalCrew: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Total Crew';
        var phpJs = theApp.getHelper('phpJs');
        var from_source = me.source_loadDataViewTotalCrew;
        var numlockVirtual = me.app.getHelper('numlockVirtual');
        return desktop.createWindow({
            id: me.id + '_changeTotalCrew',
            title: 'Total Crew',
            width: 300,
            height: 140,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeTotalCrew_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'fieldcontainer',
                    layout: {
                        type: 'column'
                    },
                    width: 300,
                    fieldLabel: '',
                    items: [{
                        xtype: 'numberfield',
                        name: 'change_total_crew',
                        id: 'change_total_crew_changeTotalCrew',
                        fieldLabel: 'TOTAL',
                        width: 170,
                        height: 40,
                        labelWidth: 70,
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px; margin-top:15px;',
                        minValue: 0
                    }, {
                        xtype: 'button',
                        width: 25,
                        id: 'btnNumlock_changeTotalCrew',
                        iconCls: 'icon-keyboard',
                        margin: '10 0 0 10',
                        hidden: true,
                        listeners: {
                            click: function () {
                                var getDefaultVal = Ext.getCmp('change_total_crew_changeTotalCrew').getValue();
                                var numlockVdata = {
                                    title: 'Input Total Crew',
                                    focusName: 'Total Crew',
                                    focusID: 'change_total_crew_changeTotalCrew',
                                    triggerID: 'btnChange_changeTotalCrew_billingCashier',
                                    defaultValue: getDefaultVal,
                                    tipe: 'numlock',
                                    numlockId: me.id + '_changeTotalCrew',
                                };
                                numlockVirtual.popup(numlockVdata, me);
                            }
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Save',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeTotalCrew_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_changeTotalCrew_billingCashier(from_source);
                    }
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeTotalCrew_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeTotalCrew');
                }
            }],
            listeners: {
                show: function () {
                    var get_total_crew = 0;
                    if (!me.CURR_BILL_DATA.total_crew) {} else {
                        var get_total_crew = me.CURR_BILL_DATA.total_crew;
                    }
                    var form2 = Ext.getCmp('form_changeTotalCrew_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_total_crew').setValue(get_total_crew);
                    Ext.getCmp('btnNumlock_changeTotalCrew').hide();
                    if (opt_calculator_virtual == 1) {
                        Ext.getCmp('btnNumlock_changeTotalCrew').show();
                    }
                }
            }
        });
    },
    loadDataViewTotalGh: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Total Gh';
        var phpJs = theApp.getHelper('phpJs');
        var from_source = me.source_loadDataViewTotalGh;
        var numlockVirtual = me.app.getHelper('numlockVirtual');
        return desktop.createWindow({
            id: me.id + '_changeTotalGh',
            title: 'Total Gh',
            width: 300,
            height: 140,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeTotalGh_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'fieldcontainer',
                    layout: {
                        type: 'column'
                    },
                    width: 300,
                    fieldLabel: '',
                    items: [{
                        xtype: 'numberfield',
                        name: 'change_total_gh',
                        id: 'change_total_gh_changeTotalGh',
                        fieldLabel: 'TOTAL',
                        width: 170,
                        height: 40,
                        labelWidth: 70,
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px; margin-top:15px;',
                        minValue: 0
                    }, {
                        xtype: 'button',
                        width: 25,
                        id: 'btnNumlock_changeTotalGh',
                        iconCls: 'icon-keyboard',
                        margin: '10 0 0 10',
                        hidden: true,
                        listeners: {
                            click: function () {
                                var getDefaultVal = Ext.getCmp('change_total_gh_changeTotalGh').getValue();
                                var numlockVdata = {
                                    title: 'Input Total Gh',
                                    focusName: 'Total Gh',
                                    focusID: 'change_total_gh_changeTotalGh',
                                    triggerID: 'btnChange_changeTotalGh_billingCashier',
                                    defaultValue: getDefaultVal,
                                    tipe: 'numlock',
                                    numlockId: me.id + '_changeTotalGh',
                                };
                                numlockVirtual.popup(numlockVdata, me);
                            }
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Save',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeTotalGh_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_changeTotalGh_billingCashier(from_source);
                    }
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeTotalGh_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeTotalGh');
                }
            }],
            listeners: {
                show: function () {
                    var get_total_gh = 0;
                    if (!me.CURR_BILL_DATA.total_gh) {} else {
                        var get_total_gh = me.CURR_BILL_DATA.total_gh;
                    }
                    var form2 = Ext.getCmp('form_changeTotalGh_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_total_gh').setValue(get_total_gh);
                    Ext.getCmp('btnNumlock_changeTotalGh').hide();
                    if (opt_calculator_virtual == 1) {
                        Ext.getCmp('btnNumlock_changeTotalGh').show();
                    }
                }
            }
        });
    },
    loadDataViewBillInfo: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Bill Info';
        var phpJs = theApp.getHelper('phpJs');
        var numlockVirtual = me.app.getHelper('numlockVirtual');
        return desktop.createWindow({
            id: me.id + '_changeBillInfo',
            title: 'Bill Info',
            width: 400,
            height: 180,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeBillInfo_billingCashier',
                width: 400,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'textfield',
                    name: 'change_qc_notes',
                    id: 'change_qc_notes_changeBillInfo',
                    fieldLabel: 'NAME / NOTE',
                    width: 360,
                    height: 30,
                    labelWidth: 100,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }, {
                    xtype: 'fieldcontainer',
                    layout: {
                        type: 'column'
                    },
                    width: 360,
                    fieldLabel: '',
                    items: [{
                        xtype: 'numberfield',
                        name: 'change_total_guest',
                        id: 'change_total_guest_changeBillInfo',
                        fieldLabel: 'GUEST',
                        width: 200,
                        height: 30,
                        labelWidth: 100,
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:14px;',
                        labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                        minValue: 0
                    }, {
                        xtype: 'button',
                        width: 25,
                        id: 'btnNumlock_changeBillInfo',
                        iconCls: 'icon-keyboard',
                        margin: '3 0 0 10',
                        hidden: true,
                        listeners: {
                            click: function () {
                                var getDefaultVal = Ext.getCmp('change_total_guest_changeBillInfo').getValue();
                                var numlockVdata = {
                                    title: 'Input Total Guest',
                                    focusName: 'Total Guest',
                                    focusID: 'change_total_guest_changeBillInfo',
                                    triggerID: 'btnChange_changeBillInfo_billingCashier',
                                    defaultValue: getDefaultVal,
                                    tipe: 'numlock',
                                    numlockId: me.id + '_changeBillInfo',
                                };
                                numlockVirtual.popup(numlockVdata, me);
                            }
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Save',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeBillInfo_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_changeBillInfo_billingCashier();
                    }
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeBillInfo_billingCashier',
                margin: '0 110 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeBillInfo');
                }
            }],
            listeners: {
                show: function () {
                    var get_total_guest = 0;
                    if (!me.CURR_BILL_DATA.total_guest) {} else {
                        var get_total_guest = me.CURR_BILL_DATA.total_guest;
                        var get_qc_notes = me.CURR_BILL_DATA.qc_notes;
                    }
                    var form2 = Ext.getCmp('form_changeBillInfo_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_total_guest').setValue(get_total_guest);
                    form2.findField('change_qc_notes').setValue(get_qc_notes);
                    Ext.getCmp('btnNumlock_changeBillInfo').hide();
                    if (opt_calculator_virtual == 1) {
                        Ext.getCmp('btnNumlock_changeBillInfo').show();
                    }
                }
            }
        });
    },
    changePPN: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Set Tax/PPN';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_changePPN',
            title: 'Set Tax/PPN',
            width: 300,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changePPN_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'textfield',
                        name: 'change_ppn_percentage',
                        fieldLabel: 'PPN (%)',
                        width: 160,
                        allowBlank: true,
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.verify_changePPN_billingCashier();
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        name: 'changePPN_spv',
                        id: me.id + '_changePPN_spv',
                        hidden: true,
                        allowBlank: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Set/Ubah',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changePPN_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_changePPN_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changePPN_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changePPN');
                }
            }, {
                text: 'Save',
                formBind: true,
                id: me.id + '_changePPN_save',
                hidden: true,
                listeners: {
                    click: function () {
                        me.save_changePPN_billingCashier();
                    }
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var tax_percentage = form.findField('tax_percentage').getValue();
                    var form2 = Ext.getCmp('form_changePPN_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_ppn_percentage').setValue(tax_percentage);
                }
            }
        });
    },
    changeService: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Set Service';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_changeService',
            title: 'Set Service',
            width: 300,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeService_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'textfield',
                        name: 'change_service_percentage',
                        fieldLabel: 'Service (%)',
                        width: 160,
                        allowBlank: true,
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.verify_changeService_billingCashier();
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        name: 'changeService_spv',
                        id: me.id + '_changeService_spv',
                        hidden: true,
                        allowBlank: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Set/Ubah',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeService_billingCashier',
                hidden: true,
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_changeService_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeService_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeService');
                }
            }, {
                text: 'Save',
                formBind: true,
                id: me.id + '_changeService_save',
                listeners: {
                    click: function () {
                        me.save_changeService_billingCashier();
                    }
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var service_percentage = form.findField('service_percentage').getValue();
                    var form2 = Ext.getCmp('form_changeService_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_service_percentage').setValue(service_percentage);
                }
            }
        });
    },
    changeDP: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Down Payment (DP)';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_changeDP',
            title: 'Down Payment (DP)',
            width: 300,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_changeDP_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'textfield',
                        name: 'change_total_dp',
                        fieldLabel: 'TOTAL',
                        width: 260,
                        allowBlank: true,
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.verify_changeDP_billingCashier();
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        name: 'changeDP_spv',
                        id: me.id + '_changeDP_spv',
                        hidden: true,
                        allowBlank: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Set/Ubah',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnChange_changeDP_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.save_changeDP_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_changeDP_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_changeDP');
                }
            }, {
                text: 'Save',
                formBind: true,
                id: me.id + '_changeDP_save',
                hidden: true,
                listeners: {
                    click: function () {
                        me.save_changeDP_billingCashier();
                    }
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var total_dp = form.findField('total_dp').getValue();
                    var form2 = Ext.getCmp('form_changeDP_billingCashier').getForm();
                    form2.reset();
                    form2.findField('change_total_dp').setValue(total_dp);
                }
            }
        });
    },
    setDiscountBilling: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Pilih Set Discount';
        var phpJs = theApp.getHelper('phpJs');
        me.store_discountPlanner_perBilling_billingCashier = theApp.getStore('store_discountPlanner_perBilling_billingCashier', false);
        if (me.store_discountPlanner_perBilling_billingCashier == false) {
            me.store_discountPlanner_perBilling_billingCashier = theApp.copyStore('master_pos', 'store_discountPlanner', 'store_discountPlanner_perBilling_billingCashier');
        }
        me.store_discountPlanner_perBilling_billingCashier.proxy.extraParams.is_dropdown = 1;
        me.store_discountPlanner_perBilling_billingCashier.proxy.extraParams.show_valid_date = 1;
        me.store_discountPlanner_perBilling_billingCashier.proxy.extraParams.is_discBilling = 1;
        me.store_discountPlanner_perBilling_billingCashier.proxy.extraParams.keywords = '';
        return desktop.createWindow({
            id: me.id + '_setDiscountBilling',
            title: 'Discount/Voucher Per-Billing',
            width: 520,
            height: 230,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_setDiscount_perBilling_billingCashier',
                width: 520,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'textfield',
                            width: 350,
                            labelWidth: 110,
                            margin: "0 5 10 0",
                            fieldLabel: 'Voucher No',
                            name: 'voucher_no'
                        }, {
                            xtype: 'button',
                            text: 'Verify',
                            iconCls: 'btn-refresh',
                            id: 'btnVerifyVoucher_setDiscount_perBilling_billingCashier',
                            margin: '0 40 0 0',
                            handler: function () {
                                me.verify_voucher_setDiscount_perBilling_billingCashier();
                            }
                        }]
                    }, {
                        xtype: 'combobox',
                        name: 'discount_name',
                        id: 'discount_name_setDiscount_perBilling_billingCashier',
                        fieldLabel: 'Discount',
                        store: me.store_discountPlanner_perBilling_billingCashier,
                        labelSeparator: ':',
                        width: 400,
                        labelWidth: 110,
                        margin: "0 0 10 0",
                        displayField: 'discount_name',
                        valueField: 'discount_name',
                        queryMode: 'local',
                        typeAhead: true,
                        minChars: 1,
                        forceSelection: true,
                        allowBlank: false,
                        listeners: {
                            select: function (combo, records, eOpts) {
                                var form2 = Ext.getCmp('form_setDiscount_perBilling_billingCashier').getForm();
                                form2.findField('discount_id').setValue(records[0].data.id);
                                form2.findField('discount_notes').setValue(records[0].data.discount_name);
                                form2.findField('discount_percentage').setValue(records[0].data.discount_percentage);
                                form2.findField('discount_price').setValue(records[0].data.discount_price);
                                form2.findField('discount_price_show').setValue('Rp ' + phpJs.priceFormat(records[0].data.discount_price));
                                form2.findField('min_total_billing').setValue(records[0].data.min_total_billing);
                                form2.findField('discount_max_price').setValue(records[0].data.discount_max_price);
                                form2.findField('is_sistem_tawar').setValue(records[0].data.is_sistem_tawar);
                                form2.findField('diskon_sebelum_pajak_service').setValue(records[0].data.diskon_sebelum_pajak_service);
                                if (records[0].data.discount_price == 0) {
                                    if (records[0].data.discount_percentage > 0) {
                                        var total_disc_billing_percentage = me.CURR_BILL_DATA.total_billing * (records[0].data.discount_percentage / 100);
                                        total_disc_billing_percentage = phpJs.number_format(total_disc_billing_percentage, 0, '.', '');
                                        if (records[0].data.diskon_sebelum_pajak_service == 0) {
                                            var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing + me.CURR_BILL_DATA.tax_total + me.CURR_BILL_DATA.service_total) * (records[0].data.discount_percentage / 100);
                                            if (me.CURR_BILL_DATA.include_tax == 1 && me.CURR_BILL_DATA.include_service == 1) {
                                                var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing) * (records[0].data.discount_percentage / 100);
                                            } else {
                                                if (me.CURR_BILL_DATA.include_tax == 1) {
                                                    var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing + me.CURR_BILL_DATA.service_total) * (records[0].data.discount_percentage / 100);
                                                } else
                                                if (me.CURR_BILL_DATA.include_service == 1) {
                                                    var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing + me.CURR_BILL_DATA.tax_total) * (records[0].data.discount_percentage / 100);
                                                }
                                            }
                                            total_disc_billing_percentage = phpJs.number_format(total_disc_billing_percentage, 0, '.', '');
                                        } else {
                                            var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing) * (records[0].data.discount_percentage / 100);
                                            if (me.CURR_BILL_DATA.include_tax == 1 && me.CURR_BILL_DATA.include_service == 1) {
                                                var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing - (me.CURR_BILL_DATA.tax_total + me.CURR_BILL_DATA.service_total)) * (records[0].data.discount_percentage / 100);
                                            } else {
                                                if (me.CURR_BILL_DATA.include_tax == 1) {
                                                    var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing - me.CURR_BILL_DATA.tax_total) * (records[0].data.discount_percentage / 100);
                                                } else
                                                if (me.CURR_BILL_DATA.include_service == 1) {
                                                    var total_disc_billing_percentage = (me.CURR_BILL_DATA.total_billing - me.CURR_BILL_DATA.service_total) * (records[0].data.discount_percentage / 100);
                                                }
                                            }
                                            total_disc_billing_percentage = phpJs.number_format(total_disc_billing_percentage, 0, '.', '');
                                        }
                                        if (me.CURR_BILL_DATA.discount_id == records[0].data.id) {
                                            total_disc_billing_percentage = me.CURR_BILL_DATA.discount_price;
                                        }
                                        if (records[0].data.discount_max_price == 0) {
                                            form2.findField('discount_max_price').setValue(total_disc_billing_percentage);
                                        }
                                        form2.findField('discount_price').setValue(total_disc_billing_percentage);
                                        form2.findField('discount_price_show').setValue('Rp ' + phpJs.priceFormat(total_disc_billing_percentage));
                                    }
                                } else {
                                    if (records[0].data.discount_max_price == 0) {
                                        form2.findField('discount_max_price').setValue(records[0].data.discount_price);
                                    }
                                    if (me.CURR_BILL_DATA.discount_id == records[0].data.id) {
                                        total_disc_billing_percentage = me.CURR_BILL_DATA.discount_price;
                                        form2.findField('discount_max_price').setValue(me.CURR_BILL_DATA.discount_price);
                                    }
                                }
                                if (records[0].data.is_sistem_tawar == 1) {
                                    form2.findField('discount_price_show').hide();
                                    form2.findField('discount_price').show();
                                } else {
                                    form2.findField('discount_price').hide();
                                    form2.findField('discount_price_show').show();
                                }
                            }
                        }
                    }, {
                        xtype: 'textfield',
                        width: 250,
                        labelWidth: 110,
                        margin: "0 0 10 0",
                        fieldLabel: 'Discount %',
                        name: 'discount_percentage',
                        readOnly: false
                    }, {
                        xtype: 'textfield',
                        width: 250,
                        labelWidth: 110,
                        margin: "0 0 10 0",
                        fieldLabel: 'Disc. Price',
                        name: 'discount_price',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        width: 250,
                        labelWidth: 110,
                        margin: "0 0 10 0",
                        fieldLabel: 'Disc. Price',
                        name: 'discount_price_show',
                        readOnly: false
                    }, {
                        xtype: 'textfield',
                        name: 'discount_id',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_notes',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'min_total_billing',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_max_price',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'is_sistem_tawar',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'diskon_sebelum_pajak_service',
                        hidden: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Discount Per-Item',
                formBind: true,
                iconCls: 'icon-grid',
                id: 'btnSet_setDiscount_perItem_onPerBilling_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.doClose(me.id + '_setDiscountBilling');
                    me.createWindow(me, 'setDiscount');
                }
            }, {
                text: 'Set Discount',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSet_setDiscount_perBilling_onPerBilling_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setDiscount_perBilling_billingCashier();
                }
            }, {
                text: 'Hapus Discount',
                formBind: true,
                iconCls: 'btn-clear',
                id: 'btnSet_clearDiscount_perBilling_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setDiscount_perBilling_billingCashier(1);
                }
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_setDiscount_perBilling_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.doClose(me.id + '_setDiscountBilling');
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var discount_id = form.findField('discount_id').getValue();
                    var discount_notes = form.findField('discount_notes').getValue();
                    var form2 = Ext.getCmp('form_setDiscount_perBilling_billingCashier').getForm();
                    form2.findField('discount_id').setValue(0);
                    form2.findField('discount_notes').setValue(0);
                    form2.findField('discount_price').setValue(0);
                    form2.findField('discount_percentage').setValue(0);
                    form2.findField('min_total_billing').setValue(0);
                    form2.findField('discount_max_price').setValue(0);
                    form2.findField('discount_price_show').setValue('');
                    form2.findField('voucher_no').setValue('');
                    if (me.CURR_BILL_DATA.discount_perbilling == 1) {
                        form2.findField('discount_id').setValue(me.CURR_BILL_DATA.discount_id);
                        form2.findField('discount_price').setValue(me.CURR_BILL_DATA.discount_total);
                        form2.findField('discount_percentage').setValue(me.CURR_BILL_DATA.discount_percentage);
                        form2.findField('discount_notes').setValue(me.CURR_BILL_DATA.discount_notes);
                        form2.findField('min_total_billing').setValue(me.CURR_BILL_DATA.min_total_billing);
                        form2.findField('discount_max_price').setValue(me.CURR_BILL_DATA.discount_max_price);
                        form2.findField('discount_price_show').setValue('Rp ' + phpJs.priceFormat(me.CURR_BILL_DATA.discount_total));
                        form2.findField('voucher_no').setValue(me.CURR_BILL_DATA.voucher_no);
                    }
                    if (me.CURR_BILL_DATA.is_sistem_tawar == 1) {
                        form2.findField('discount_percentage').hide();
                        form2.findField('discount_price_show').hide();
                        form2.findField('discount_price').show();
                    } else {
                        form2.findField('discount_price').hide();
                        form2.findField('discount_price_show').show();
                        form2.findField('discount_percentage').show();
                    }
                    me.store_discountPlanner_perBilling_billingCashier.load({
                        callback: function () {
                            if (me.CURR_BILL_DATA.discount_perbilling == 1) {
                                Ext.getCmp('discount_name_setDiscount_perBilling_billingCashier').select(me.CURR_BILL_DATA.discount_notes);
                            }
                        }
                    });
                }
            }
        });
    },
    setDiscount: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Set Discount';
        var phpJs = theApp.getHelper('phpJs');
        me.store_discountPlanner_perItem_billingCashier = theApp.getStore('store_discountPlanner_perItem_billingCashier', false);
        if (me.store_discountPlanner_perItem_billingCashier == false) {
            me.store_discountPlanner_perItem_billingCashier = theApp.copyStore('master_pos', 'store_discountPlanner', 'store_discountPlanner_perItem_billingCashier');
        }
        me.store_discountPlanner_perItem_billingCashier.proxy.extraParams.is_dropdown = 1;
        me.store_discountPlanner_perItem_billingCashier.proxy.extraParams.show_valid_date = 1;
        me.store_discountPlanner_perItem_billingCashier.proxy.extraParams.is_discBilling = 0;
        me.store_discountPlanner_perItem_billingCashier.proxy.extraParams.keywords = '';
        var selModel_billingCashier_billingDetail_discount = Ext.create('Ext.selection.CheckboxModel', {
            mode: 'SIMPLE',
            listeners: {
                selectionchange: function (sm, selections) {}
            }
        });
        return desktop.createWindow({
            id: me.id + '_setDiscount',
            title: 'Set Discount',
            width: 800,
            height: 450,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_setDiscount_billingCashier',
                width: 450,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'panel',
                        margin: '0',
                        layout: 'column',
                        border: 0,
                        margin: '0 0 0 0',
                        items: [{
                            xtype: 'textfield',
                            width: 300,
                            labelWidth: 75,
                            margin: "0 5 10 0",
                            fieldLabel: 'Voucher No',
                            name: 'voucher_no'
                        }, {
                            xtype: 'button',
                            text: 'Verify',
                            iconCls: 'btn-refresh',
                            id: 'btnVerifyVoucher_setDiscount_perItem_billingCashier',
                            margin: '0 40 0 0',
                            handler: function () {
                                me.verify_voucher_setDiscount_perItem_billingCashier();
                            }
                        }, {
                            xtype: 'combobox',
                            name: 'discount_name',
                            id: 'discount_name_setDiscount_billingCashier',
                            fieldLabel: 'Discount',
                            store: me.store_discountPlanner_perItem_billingCashier,
                            labelSeparator: ':',
                            width: 345,
                            labelWidth: 60,
                            margin: "0 0 10 0",
                            displayField: 'discount_name',
                            valueField: 'discount_name',
                            queryMode: 'local',
                            typeAhead: true,
                            minChars: 1,
                            forceSelection: true,
                            allowBlank: false,
                            listeners: {
                                select: function (combo, records, eOpts) {
                                    var form2 = Ext.getCmp('form_setDiscount_billingCashier').getForm();
                                    form2.findField('discount_id').setValue(records[0].data.id);
                                    form2.findField('discount_notes').setValue(records[0].data.discount_name);
                                    form2.findField('discount_percentage').setValue(records[0].data.discount_percentage);
                                    form2.findField('discount_price').setValue(records[0].data.discount_price);
                                    form2.findField('min_total_billing').setValue(records[0].data.min_total_billing);
                                    form2.findField('is_sistem_tawar').setValue(records[0].data.is_sistem_tawar);
                                    form2.findField('discount_max_price').setValue(records[0].data.discount_max_price);
                                    me.store_billingCashierDetail_discount.proxy.extraParams.discount_id = records[0].data.id;
                                    me.store_billingCashierDetail_discount.proxy.extraParams.billing_id = me.CURR_BILL_DATA.billing_id;
                                    me.store_billingCashierDetail_discount.load();
                                }
                            }
                        }]
                    }, {
                        xtype: 'textfield',
                        name: 'discount_id',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_notes',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_percentage',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_price',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'min_total_billing',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'discount_max_price',
                        hidden: true
                    }, {
                        xtype: 'textfield',
                        name: 'is_sistem_tawar',
                        hidden: true
                    }, {
                        xtype: 'panel',
                        border: 0,
                        layout: 'fit',
                        height: 325,
                        items: [{
                            xtype: 'gridpanel',
                            border: 0,
                            multiSelect: true,
                            id: 'grid_billingCashier_billingDetail_discount',
                            store: me.store_billingCashierDetail_discount,
                            scroll: true,
                            selModel: selModel_billingCashier_billingDetail_discount,
                            columns: [{
                                xtype: 'gridcolumn',
                                dataIndex: 'item_no',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_detail_info',
                                text: 'ITEM',
                                width: 180,
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'order_qty',
                                text: 'QTY',
                                width: 45,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_percentage',
                                text: 'Disc %',
                                width: 90,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_price_show',
                                text: 'Disc Price',
                                width: 90,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_total_show',
                                text: 'Total Discount',
                                width: 110,
                                align: 'right',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_total',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_price',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_name',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_type',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'billing_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_price_hpp',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_varian_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'varian_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'has_varian',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_normal_price',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'status_discount_text',
                                text: 'Status Discount',
                                width: 210,
                                align: 'center',
                                sortable: false
                            }],
                            viewConfig: {
                                stripeRows: true,
                                forceFit: true
                            },
                            listeners: {
                                itemclick: function (view, rec, item, index, eventObj) {
                                    var form2 = Ext.getCmp('form_setDiscount_billingCashier').getForm();
                                    var is_sistem_tawar = form2.findField('is_sistem_tawar').getValue();
                                },
                            }
                        }]
                    }]
                }]
            }],
            buttons: [{
                text: 'Refresh Discount Item',
                formBind: true,
                iconCls: 'btn-refresh',
                id: 'btnSet_refreshDiscount_perItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var discount_id_old = form.findField('discount_id').getValue();
                    var form2 = Ext.getCmp('form_setDiscount_billingCashier').getForm();
                    form2.findField('discount_id').getValue(discount_id_old)
                    me.store_billingCashierDetail_discount.proxy.extraParams.discount_id = discount_id_old;
                    me.store_billingCashierDetail_discount.load();
                }
            }, {
                text: 'Set Discount',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSet_setDiscount_perItem_onPerItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setDiscount_billingCashier();
                }
            }, {
                text: 'Discount Per-Billing',
                formBind: true,
                iconCls: 'icon-grid',
                id: 'btnSet_setDiscount_perBilling_onPerItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.doClose(me.id + '_setDiscount');
                    me.createWindow(me, 'setDiscountBilling');
                }
            }, {
                text: 'Clear Discount',
                formBind: true,
                iconCls: 'btn-clear',
                id: 'btnSet_clearDiscount_perItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setDiscount_billingCashier(1);
                }
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_setDiscount_perItem_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    me.doClose(me.id + '_setDiscount');
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    var discount_id = form.findField('discount_id').getValue();
                    var discount_notes = form.findField('discount_notes').getValue();
                    var form2 = Ext.getCmp('form_setDiscount_billingCashier').getForm();
                    form2.findField('discount_id').setValue(0);
                    form2.findField('discount_notes').setValue(0);
                    form2.findField('discount_price').setValue(0);
                    form2.findField('discount_percentage').setValue(0);
                    form2.findField('min_total_billing').setValue(0);
                    form2.findField('voucher_no').setValue('');
                    if (me.CURR_BILL_DATA.discount_perbilling == 0) {
                        form2.findField('discount_id').setValue(me.CURR_BILL_DATA.discount_id);
                        form2.findField('discount_price').setValue(me.CURR_BILL_DATA.discount_total);
                        form2.findField('discount_percentage').setValue(me.CURR_BILL_DATA.discount_percentage);
                        form2.findField('discount_notes').setValue(me.CURR_BILL_DATA.discount_notes);
                        form2.findField('min_total_billing').setValue(me.CURR_BILL_DATA.min_total_billing);
                        form2.findField('voucher_no').setValue(me.CURR_BILL_DATA.voucher_no);
                    }
                    me.store_billingCashierDetail_discount.proxy.extraParams.discount_id = 0;
                    me.store_billingCashierDetail_discount.proxy.extraParams.billing_id = me.CURR_BILL_DATA.billing_id;
                    me.store_billingCashierDetail_discount.load();
                    me.store_discountPlanner_perItem_billingCashier.load({
                        callback: function () {
                            Ext.getCmp('discount_name_setDiscount_billingCashier').select(me.CURR_BILL_DATA.discount_notes);
                        }
                    });
                }
            }
        });
    },
    setCompliment: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Set Compliment';
        var phpJs = theApp.getHelper('phpJs');
        var selModel_billingCashier_billingDetail_compliment = Ext.create('Ext.selection.CheckboxModel', {
            mode: 'SIMPLE',
            listeners: {
                selectionchange: function (sm, selections) {}
            }
        });
        return desktop.createWindow({
            id: me.id + '_setCompliment',
            title: 'Set Compliment',
            width: 800,
            height: 450,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_setCompliment_billingCashier',
                width: 450,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'panel',
                        border: 0,
                        layout: 'fit',
                        height: 325,
                        items: [{
                            xtype: 'gridpanel',
                            border: 0,
                            multiSelect: true,
                            id: 'grid_billingCashier_billingDetail_compliment',
                            store: me.store_billingCashierDetail_compliment,
                            scroll: true,
                            selModel: selModel_billingCashier_billingDetail_compliment,
                            columns: [{
                                xtype: 'gridcolumn',
                                dataIndex: 'item_no',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_detail_info',
                                text: 'ITEM',
                                width: 180,
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'order_qty',
                                text: 'QTY',
                                width: 45,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_percentage',
                                text: 'Disc %',
                                width: 90,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_total_show',
                                text: 'Total Discount',
                                width: 110,
                                align: 'right',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'order_total_show',
                                text: 'Total Order',
                                width: 110,
                                align: 'center',
                                sortable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'discount_total',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_price',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_name',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_type',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'billing_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_price_hpp',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_varian_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'varian_id',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'has_varian',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'product_normal_price',
                                hidden: true,
                                hideable: false
                            }, {
                                xtype: 'gridcolumn',
                                dataIndex: 'is_compliment_text',
                                text: 'Status',
                                width: 210,
                                align: 'center',
                                sortable: false
                            }],
                            viewConfig: {
                                stripeRows: true,
                                forceFit: true
                            },
                            listeners: {
                                itemdblclick: function (view, rec, item, index, eventObj) {},
                            }
                        }]
                    }, {
                        xtype: 'textfield',
                        name: 'setCompliment_spv',
                        id: me.id + '_setCompliment_spv',
                        hidden: true,
                        allowBlank: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Refresh Compliment Item',
                formBind: true,
                iconCls: 'btn-refresh',
                id: 'btnSet_refreshCompliment_perItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.store_billingCashierDetail_compliment.load();
                }
            }, {
                text: 'Set Compliment Item',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSet_setCompliment_perItem_onPerItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setCompliment_billingCashier();
                }
            }, {
                text: 'Save',
                formBind: true,
                id: me.id + '_setCompliment_save',
                hidden: true,
                listeners: {
                    click: function () {
                        me.save_setCompliment_billingCashier();
                    }
                }
            }, {
                text: 'Hapus',
                formBind: true,
                id: me.id + '_setCompliment_clear',
                hidden: true,
                listeners: {
                    click: function () {
                        me.save_setCompliment_billingCashier(1);
                    }
                }
            }, {
                text: 'Hapus Compliment',
                formBind: true,
                iconCls: 'btn-clear',
                id: 'btnSet_clearCompliment_perItem_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.verify_setCompliment_billingCashier(1);
                }
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_setCompliment_perItem_billingCashier',
                margin: '0 120 0 0',
                handler: function () {
                    me.doClose(me.id + '_setCompliment');
                }
            }],
            listeners: {
                show: function () {
                    me.store_billingCashierDetail_compliment.proxy.extraParams.billing_id = me.CURR_BILL_DATA.billing_id;
                    me.store_billingCashierDetail_compliment.load();
                }
            }
        });
    },
    setHalfPayment: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Half Payment';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_halfPayment',
            title: 'HALF-PAYMENT',
            width: 350,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_halfPayment_billingCashier',
                width: 350,
                width: 180,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'hidden',
                        name: 'total_billing'
                    }, {
                        xtype: 'hidden',
                        name: 'total_credit_show'
                    }, {
                        xtype: 'displayfield',
                        name: 'total_billing_show',
                        fieldLabel: 'Total Billing',
                        width: 320,
                        height: 25,
                        labelSeparator: '',
                        labelWidth: 190,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;'
                    }, {
                        xtype: 'textfield',
                        name: 'total_cash',
                        fieldLabel: 'Cash',
                        width: 320,
                        allowBlank: false,
                        height: 25,
                        labelSeparator: '',
                        labelWidth: 190,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;',
                        listeners: {
                            blur: function (field, e) {
                                var form = Ext.getCmp('form_payBilling').getForm();
                                var form2 = Ext.getCmp('form_halfPayment_billingCashier').getForm();
                                var getDataBilling = me.CURR_BILL_DATA;
                                var total_billing = form.findField('grand_total').getValue();
                                var total_billing_show = phpJs.priceFormat(total_billing);
                                var total_cash = parseFloat(form2.findField('total_cash').getValue());
                                if (!total_cash) {
                                    total_cash = 0;
                                }
                                if (total_cash == 0) {
                                    ExtApp.Msg.warning('Total Cash/Tunai tidak boleh kosong!');
                                    return false;
                                }
                                if (total_billing < total_cash) {
                                    ExtApp.Msg.warning('Max Cash/Tunai adalah ' + total_billing_show);
                                    return false;
                                }
                                var total_credit = total_billing - total_cash;
                                var total_credit_show = phpJs.number_format(total_credit);
                                form2.findField('total_credit').setValue(total_credit);
                                form2.findField('total_credit_show').setValue(total_credit_show);
                            }
                        }
                    }, {
                        xtype: 'displayfield',
                        name: 'total_credit',
                        fieldLabel: 'Debit / Credit / AR',
                        width: 320,
                        height: 25,
                        labelSeparator: '',
                        labelWidth: 180,
                        fieldStyle: 'font-size:16px; text-align:right;',
                        labelStyle: 'font-size:16px;'
                    }]
                }]
            }],
            buttons: [{
                text: 'PAY BILL',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSave_halfPayment_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.save_halfPayment_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_halfPayment_billingCashier',
                margin: '0 60 0 0',
                handler: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    form.findField('is_half_payment').setValue(0);
                    me.doClose(me.id + '_halfPayment');
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    form.findField('is_half_payment').setValue(1);
                    var getDataBilling = me.CURR_BILL_DATA;
                    var total_billing = form.findField('grand_total').getValue();
                    var total_billing_show = phpJs.priceFormat(total_billing);
                    var form2 = Ext.getCmp('form_halfPayment_billingCashier').getForm();
                    form2.reset();
                    form2.findField('total_billing').setValue(total_billing);
                    form2.findField('total_billing_show').setValue(total_billing_show);
                }
            }
        });
    },
    setCancelOrder: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Keterangan Cancel Order';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_setCancelOrder',
            title: Titletext,
            width: 350,
            height: 240,
            iconCls: 'btn-cancel',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_setCancelOrder_billingCashier',
                width: 450,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'displayfield',
                        name: 'product_name',
                        id: 'product_name_setCancelOrder_billingCashier',
                        fieldLabel: 'Product',
                        labelSeparator: ':',
                        labelWidth: 90,
                        anchor: '100%',
                        allowBlank: true,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }, {
                        xtype: 'displayfield',
                        name: 'order_qty',
                        id: 'qtyMax_setCancelOrder_billingCashier',
                        fieldLabel: 'Qty Order',
                        labelSeparator: ':',
                        labelWidth: 90,
                        anchor: '100%',
                        allowBlank: true,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }, {
                        xtype: 'numberfield',
                        name: 'qty_cancel_order',
                        id: 'qty_setCancelOrder_billingCashier',
                        fieldLabel: 'Qty Cancel',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 160,
                        height: 40,
                        margin: '0 5 10 0',
                        allowBlank: false,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;',
                        selectOnFocus: true,
                        minValue: 1
                    }, {
                        xtype: 'textarea',
                        name: 'keterangan_cancel_order',
                        id: 'keterangan_setCancelOrder_billingCashier',
                        fieldLabel: 'Notes',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 320,
                        height: 50,
                        margin: '5 0 0 0',
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }]
                }]
            }],
            buttons: [{
                text: 'Save Cancel Order',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSet_setCancelOrder_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.cancelOrder_keterangan = Ext.getCmp('keterangan_setCancelOrder_billingCashier').getValue();
                    me.cancelOrder_qty = Ext.getCmp('qty_setCancelOrder_billingCashier').getValue();
                    if (me.deleteOrderDataTotal == 1) {
                        if (me.cancelOrder_qty == 0) {
                            ExtApp.Msg.warning("Qty tidak boleh kosong!");
                            return false;
                        }
                        if (me.deleteOrderData.order_qty < me.cancelOrder_qty) {
                            ExtApp.Msg.warning("Max Cancel Qty = " + me.deleteOrderData.order_qty);
                            return false;
                        }
                    }
                    if (me.cancelOrder_keterangan == '') {
                        ExtApp.Msg.warning("Notes/Keterangan tidak boleh kosong!");
                        return false;
                    }
                    me.doClose(me.id + '_setCancelOrder');
                    me.deleteConfirmOrderBillingDetail();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_setCancelOrder_billingCashier',
                margin: '0 50 0 0',
                handler: function () {
                    me.doClose(me.id + '_setCancelOrder');
                }
            }],
            listeners: {
                show: function () {
                    Ext.getCmp('keterangan_setCancelOrder_billingCashier').setValue('');
                    if (me.deleteOrderDataTotal == 1) {
                        Ext.getCmp('qtyMax_setCancelOrder_billingCashier').show();
                        Ext.getCmp('qtyMax_setCancelOrder_billingCashier').setValue(me.deleteOrderData.order_qty);
                        Ext.getCmp('product_name_setCancelOrder_billingCashier').setValue(me.deleteOrderData.product_name);
                        if (me.deleteOrderData.order_status == 'done') {
                            Ext.getCmp('qty_setCancelOrder_billingCashier').setValue(1);
                            Ext.getCmp('qty_setCancelOrder_billingCashier').show();
                        } else {
                            Ext.getCmp('qty_setCancelOrder_billingCashier').setValue(me.deleteOrderData.order_qty);
                            Ext.getCmp('qty_setCancelOrder_billingCashier').hide();
                        }
                    } else {
                        Ext.getCmp('qtyMax_setCancelOrder_billingCashier').hide();
                        Ext.getCmp('qty_setCancelOrder_billingCashier').hide();
                        Ext.getCmp('product_name_setCancelOrder_billingCashier').setValue('Multiple Delete Order');
                    }
                }
            }
        });
    },
    setCancelBilling: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Keterangan Void/Cancel Billing';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_setCancelBilling',
            title: Titletext,
            width: 350,
            height: 180,
            iconCls: 'btn-cancel',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_setCancelBilling_billingCashier',
                width: 450,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'hidden',
                        name: 'billing_id',
                        id: 'billing_id_setCancelBilling_billingCashier'
                    }, {
                        xtype: 'hidden',
                        name: 'qty_done',
                        id: 'qty_done_setCancelBilling_billingCashier'
                    }, {
                        xtype: 'displayfield',
                        name: 'billing_no',
                        id: 'billing_no_setCancelBilling_billingCashier',
                        fieldLabel: 'Billing',
                        labelSeparator: ':',
                        labelWidth: 90,
                        anchor: '100%',
                        allowBlank: true,
                        fieldStyle: 'font-weight:bold; font-size:16px;',
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }, {
                        xtype: 'textarea',
                        name: 'keterangan_cancel_billing',
                        id: 'keterangan_setCancelBilling_billingCashier',
                        fieldLabel: 'Notes',
                        labelSeparator: ':',
                        labelWidth: 90,
                        width: 320,
                        height: 50,
                        labelStyle: 'font-weight:bold; font-size:16px;'
                    }]
                }]
            }],
            buttons: [{
                text: 'Save Void/Cancel Billing',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSet_setCancelBilling_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.cancelBilling_billing_id = Ext.getCmp('billing_id_setCancelBilling_billingCashier').getValue();
                    me.cancelBilling_billing_no = Ext.getCmp('billing_no_setCancelBilling_billingCashier').getValue();
                    me.cancelBilling_keterangan = Ext.getCmp('keterangan_setCancelBilling_billingCashier').getValue();
                    me.cancelBilling_qty_done = Ext.getCmp('qty_done_setCancelBilling_billingCashier').getValue();
                    if (me.cancelBilling_keterangan == '' && opt_mode_cashier_express == 0) {
                        ExtApp.Msg.warning("Cancel Notes/Keterangan tidak boleh kosong!");
                        return false;
                    }
                    me.cancelBilling_spv_valid = 1;
                    me.verifySupervisorLogin('Void/Cancel Billing', 'Billing No: ' + me.cancelBilling_billing_no);
                    me.doClose(me.id + '_setCancelBilling');
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_setCancelBilling_billingCashier',
                margin: '0 50 0 0',
                handler: function () {
                    me.doClose(me.id + '_setCancelBilling');
                }
            }],
            listeners: {
                show: function () {
                    var getDataBilling = me.CURR_BILL_DATA;
                    Ext.getCmp('keterangan_setCancelBilling_billingCashier').setValue('');
                    Ext.getCmp('billing_id_setCancelBilling_billingCashier').setValue(getDataBilling.billing_id);
                    Ext.getCmp('billing_no_setCancelBilling_billingCashier').setValue(getDataBilling.billing_no);
                    var getDeliver = 0;
                    var d = Ext.getCmp('grid_billingCashier_billingDetail').store.getRange(0);
                    if (d.length > 0) {
                        for (x in d) {
                            if (d[x].data.order_status == 'done') {
                                getDeliver++;
                            }
                        }
                    }
                    Ext.getCmp('qty_done_setCancelBilling_billingCashier').setValue(getDeliver);
                }
            }
        });
    },
    mergeBill: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Merge Billing';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_mergeBill',
            title: 'Select Main Billing',
            width: 300,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_mergeBill_billingCashier',
                width: 300,
                border: false,
                bodyBorder: false,
                items: [{
                    xtype: 'panel',
                    layout: {
                        type: 'auto'
                    },
                    bodyPadding: 10,
                    border: false,
                    items: [{
                        xtype: 'combobox',
                        name: 'main_billing_id',
                        id: 'main_id_mergeBill',
                        fieldLabel: 'Main Billing',
                        store: me.store_billingCashier_MergeBill,
                        labelSeparator: ':',
                        labelWidth: 80,
                        anchor: '100%',
                        displayField: 'billing_no',
                        valueField: 'id',
                        allowBlank: false,
                        queryMode: 'local',
                        anyMatch: true,
                        listeners: {}
                    }, {
                        xtype: 'textfield',
                        name: 'mergeBill_spv',
                        id: me.id + '_mergeBill_spv',
                        hidden: true,
                        allowBlank: true
                    }]
                }]
            }],
            buttons: [{
                text: 'Select Main & Merge Bill',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSave_mergeBill_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.save_mergeBill_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_mergeBill_billingCashier',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_mergeBill');
                }
            }, {
                text: 'Save',
                formBind: true,
                id: me.id + '_mergeBill_save',
                hidden: true,
                listeners: {
                    click: function () {
                        me.save_mergeBill_billingCashier();
                    }
                }
            }],
            listeners: {
                show: function () {
                    var getSelection = Ext.getCmp('grid_billingCashier_holdBilling').getSelectionModel().selected;
                    var merge_var = {
                        allID: '',
                        hasMergeID: ''
                    };
                    for (x in getSelection.items) {
                        if (merge_var.allID == '') {
                            merge_var.allID = getSelection.items[x].data.id;
                        } else {
                            merge_var.allID += ',' + getSelection.items[x].data.id;
                        }
                        if (merge_var.hasMergeID == '') {
                            merge_var.hasMergeID = getSelection.items[x].data.merge_id;
                        } else {
                            merge_var.hasMergeID += ',' + getSelection.items[x].data.merge_id;
                        }
                    }
                    me.clearBilling();
                    me.store_billingCashier_MergeBill.proxy.extraParams.billing_status = 'hold';
                    me.store_billingCashier_MergeBill.proxy.extraParams.skip_date = 1;
                    me.store_billingCashier_MergeBill.proxy.extraParams.is_dropdown = 1;
                    me.store_billingCashier_MergeBill.proxy.extraParams.merge_bill_id = merge_var.allID;
                    me.store_billingCashier_MergeBill.load();
                }
            }
        });
    },
    splitBill: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Split Billing';
        var phpJs = theApp.getHelper('phpJs');
        var selModel_billingCashier_billingDetail_split = Ext.create('Ext.selection.CheckboxModel', {
            mode: 'SIMPLE',
            listeners: {
                selectionchange: function (sm, selections) {
                    Ext.getCmp('grid_billingCashier_billingDetail_split').down('#setItemSplitButton_billingDetail_split').setDisabled(selections.length == 0);
                }
            }
        });
        return desktop.createWindow({
            id: me.id + '_splitBill',
            title: 'Split Order Billing',
            width: 620,
            height: 500,
            iconCls: 'icon-money',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'gridpanel',
                border: 0,
                multiSelect: true,
                id: 'grid_billingCashier_billingDetail_split',
                store: me.store_billingCashierDetail_split,
                scroll: true,
                selModel: selModel_billingCashier_billingDetail_split,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'item_no',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_detail_info',
                    text: 'NAMA MENU / ITEM',
                    width: 180,
                    sortable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_qty',
                    text: 'QTY',
                    width: 60,
                    align: 'center',
                    sortable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_qty_split',
                    text: 'QTY SPLIT',
                    width: 90,
                    align: 'center',
                    sortable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_total_show',
                    text: 'TOTAL',
                    width: 100,
                    align: 'right',
                    sortable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_total',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_price',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_name',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_id',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_type',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'billing_id',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_price_hpp',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_varian_id',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'varian_id',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'has_varian',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'product_normal_price',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_status_text',
                    text: 'STATUS',
                    width: 80,
                    align: 'center',
                    sortable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'retur_qty',
                    hidden: true,
                    sortable: false
                }],
                viewConfig: {
                    stripeRows: true,
                    forceFit: true
                },
                listeners: {
                    itemdblclick: function (view, rec, item, index, eventObj) {
                        me.formType_orderProduct_split = 'edit';
                        me.data_orderProduct_split = rec.data;
                        me.createWindow(me, 'orderProduct_split');
                    },
                },
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [{
                        xtype: 'hidden',
                        name: 'billIdSplit_billingDetail_split',
                        id: 'billIdSplit_billingDetail_split'
                    }, {
                        xtype: 'displayfield',
                        name: 'qtySplit_billingDetail_split',
                        id: 'qtySplit_billingDetail_split',
                        fieldLabel: 'QTY',
                        labelSeparator: ' = ',
                        labelWidth: 60,
                        width: 100,
                        fieldStyle: 'font-weight:bold; font-size:14px;',
                        labelStyle: 'font-weight:bold; font-size:14px;'
                    }, '-', {
                        xtype: 'displayfield',
                        name: 'priceSplit_billingDetail_split',
                        id: 'priceSplit_billingDetail_split',
                        fieldLabel: 'TOTAL',
                        labelSeparator: ' = ',
                        labelWidth: 70,
                        width: 200,
                        fieldStyle: 'font-weight:bold; font-size:14px;',
                        labelStyle: 'font-weight:bold; font-size:14px;'
                    }, '->', {
                        text: 'Set Item to Split',
                        itemId: 'setItemSplitButton_billingDetail_split',
                        tooltip: 'Set/Select Item to Split Bill',
                        iconCls: 'btn-tick',
                        disabled: true,
                        listeners: {
                            click: function () {
                                var getSelection = Ext.getCmp('grid_billingCashier_billingDetail_split').getSelectionModel().selected;
                                if (getSelection.length > 0) {
                                    me.setItem_splitBill_billingCashier(0);
                                } else {
                                    ExtApp.Msg.info('Silahkan Pilih Order/Item');
                                }
                            }
                        }
                    }, {
                        text: 'Reset',
                        itemId: 'resetItemSplitButton_billingDetail_split',
                        tooltip: 'Reset/Cancel Item to Split Bill',
                        iconCls: 'btn-reset',
                        listeners: {
                            click: function () {
                                var getSelection = Ext.getCmp('grid_billingCashier_billingDetail_split').getSelectionModel().selected;
                                if (getSelection.length > 0) {
                                    me.setItem_splitBill_billingCashier(1);
                                } else {
                                    ExtApp.Msg.info('Silahkan Pilih Order/Item');
                                }
                            }
                        }
                    }]
                }]
            }],
            buttons: ['->', {
                text: 'Save Order & Split Billing',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSave_splitBill_billingCashier',
                margin: '0 10 0 0',
                handler: function () {
                    me.save_splitBill_billingCashier();
                }
            }, {
                text: 'Cancel',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_splitBill_billingCashier',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_splitBill');
                }
            }],
            listeners: {
                show: function () {
                    if (!me.data_split_id) {
                        me.doClose(me.id + '_splitBill');
                        ExtApp.Msg.warning("Tidak dapat melakukan Split Billing, pilih billing dahulu!");
                        return false;
                    }
                    Ext.getCmp('btnSave_splitBill_billingCashier').setDisabled(true);
                    Ext.getCmp('qtySplit_billingDetail_split').setValue(0);
                    Ext.getCmp('priceSplit_billingDetail_split').setValue(0);
                    Ext.getCmp('billIdSplit_billingDetail_split').setValue(me.data_split_id);
                    me.clearBilling();
                    var d = new Date();
                    Ext.Ajax.request({
                        waitMsg: 'Loading...',
                        url: appUrl + 'cashier/billingCashier/splitBill?_dc=' + d.getTime(),
                        method: 'POST',
                        params: {
                            billing_id: me.data_split_id
                        },
                        success: function (response, options) {
                            var rsp = Ext.decode(response.responseText);
                            if (rsp.success == false) {
                                ExtApp.Msg.warning(rsp.info);
                            } else {
                                Ext.getCmp('btnSave_splitBill_billingCashier').setDisabled(false);
                                me.store_billingCashierDetail_split.proxy.extraParams.billing_id = me.data_split_id;
                                me.store_billingCashierDetail_split.load();
                            }
                        },
                        failure: function (response, options) {
                            var rsp = Ext.decode(response.responseText);
                            ExtApp.Msg.warning(rsp.info);
                        }
                    });
                }
            }
        });
    },
    orderProduct_split: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Split Order ';
        if (me.formType_orderProduct_split == 'edit') {
            Titletext = 'Split Order ';
        }
        var phpJs = theApp.getHelper('phpJs');
        var thisDefaultFocus = 'order_qty_orderProduct_split';
        if (opt_from_apps == 1) {
            thisDefaultFocus = '';
        }
        return desktop.createWindow({
            id: me.id + '_orderProduct_split',
            title: Titletext,
            width: 350,
            height: 300,
            iconCls: 'btn-add',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            defaultFocus: thisDefaultFocus,
            items: [{
                xtype: 'form',
                id: 'form_orderProduct_split',
                border: 0,
                bodyPadding: 10,
                margin: '0 0 0 0',
                items: [{
                    xtype: 'hidden',
                    name: 'form_type_orderProduct_split',
                    value: me.formType_orderProduct_split
                }, {
                    xtype: 'hidden',
                    name: 'id'
                }, {
                    xtype: 'hidden',
                    name: 'product_id'
                }, {
                    xtype: 'hidden',
                    name: 'product_type'
                }, {
                    xtype: 'hidden',
                    name: 'product_name'
                }, {
                    xtype: 'hidden',
                    name: 'billing_id'
                }, {
                    xtype: 'hidden',
                    name: 'category_id'
                }, {
                    xtype: 'hidden',
                    name: 'product_price'
                }, {
                    xtype: 'hidden',
                    name: 'product_price_hpp'
                }, {
                    xtype: 'hidden',
                    name: 'product_varian_id'
                }, {
                    xtype: 'hidden',
                    name: 'varian_id'
                }, {
                    xtype: 'hidden',
                    name: 'has_varian'
                }, {
                    xtype: 'hidden',
                    name: 'package_item'
                }, {
                    xtype: 'hidden',
                    name: 'product_normal_price'
                }, {
                    xtype: 'hidden',
                    name: 'item_code'
                }, {
                    xtype: 'displayfield',
                    name: 'product_detail_info',
                    fieldLabel: 'Product',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;'
                }, {
                    xtype: 'displayfield',
                    name: 'product_price_show',
                    fieldLabel: 'Price',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;'
                }, {
                    xtype: 'displayfield',
                    name: 'order_qty',
                    fieldLabel: 'Qty Order',
                    labelSeparator: ':',
                    labelWidth: 90,
                    anchor: '100%',
                    allowBlank: true,
                    fieldStyle: 'font-weight:bold; font-size:16px;',
                    labelStyle: 'font-weight:bold; font-size:16px;'
                }, {
                    xtype: 'numberfield',
                    name: 'order_qty_split',
                    id: 'order_qty_orderProduct_split',
                    fieldLabel: 'Qty Split Order',
                    labelSeparator: ':',
                    labelWidth: 150,
                    width: 240,
                    height: 40,
                    allowBlank: true,
                    fieldStyle: 'font-weight:bold; font-size:18px;',
                    labelStyle: 'font-weight:bold; font-size:16px;',
                    selectOnFocus: true,
                    minValue: 0,
                    allowDecimals: true,
                    listeners: {
                        specialkey: function (field, e) {
                            if (e.getKey() == e.ENTER) {
                                me.save_orderProduct_split();
                            }
                        }
                    }
                }]
            }],
            buttons: [{
                text: 'Split Order',
                formBind: true,
                id: 'btnSave_orderProduct_split',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                margin: '0 120 0 0',
                handler: function () {
                    me.save_orderProduct_split();
                }
            }],
            listeners: {
                show: function () {
                    var form = Ext.getCmp('form_orderProduct_split').getForm();
                    if (me.formType_orderProduct_split == 'edit') {
                        var getDataProduct = me.data_orderProduct_split;
                        form.setValues(getDataProduct);
                    } else {
                        form.reset();
                        var getDataProduct = me.data_orderProduct_split;
                        form.findField('product_id').setValue(getDataProduct.data.id);
                        form.findField('product_name').setValue(getDataProduct.data.product_name);
                        form.findField('product_price_show').setValue('Rp ' + phpJs.number_format(getDataProduct.data.product_price, 2, ',', '.'));
                        form.findField('product_price').setValue(getDataProduct.data.product_price);
                        form.findField('product_normal_price').setValue(getDataProduct.data.product_price);
                        form.findField('product_price_hpp').setValue(getDataProduct.data.product_hpp);
                        form.findField('product_varian_id').setValue(getDataProduct.data.product_varian_id);
                        form.findField('varian_id').setValue(getDataProduct.data.varian_id);
                        form.findField('has_varian').setValue(getDataProduct.data.has_varian);
                        form.findField('order_qty').setValue(getDataProduct.data.order_qty);
                        form.findField('order_qty_split').setValue(0);
                    }
                }
            }
        });
    },
    loadDataAnywherePrinter: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Pilih Printer ';
        var phpJs = theApp.getHelper('phpJs');
        var from_source = me.anywhere_loadPrinter;
        var from_source_tipe = me.anywhere_loadPrinter_tipe;
        var store_masterPrinter_dataViewAnywhere = theApp.getStore('store_masterPrinter_dataViewAnywhere', false);
        if (store_masterPrinter_dataViewAnywhere == false) {
            store_masterPrinter_dataViewAnywhere = theApp.copyStore('master_pos', 'store_masterPrinter', 'store_masterPrinter_dataViewAnywhere');
        }
        store_masterPrinter_dataViewAnywhere.proxy.extraParams.limit = 9999;
        store_masterPrinter_dataViewAnywhere.proxy.extraParams.is_print_anywhere = 1;
        store_masterPrinter_dataViewAnywhere.proxy.extraParams.keywords = '';
        return desktop.createWindow({
            id: me.id + '_dataViewAnywherePrinter',
            title: Titletext,
            width: 740,
            height: 500,
            iconCls: 'btn-add',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'panel',
                id: 'billingCashier_dataViewAnywherePrinter_area',
                border: 0,
                layout: 'fit',
                bodyStyle: 'background:url(' + appUrl + 'assets/desktop/wallpapers/wall_preferences.jpg) center center;',
                items: [{
                    xtype: 'dataview',
                    autoScroll: true,
                    trackOver: true,
                    itemSelector: 'div.ux-product-list',
                    overItemCls: 'product-list-over',
                    id: 'billingCashier_dataViewAnywherePrinter',
                    store: store_masterPrinter_dataViewAnywhere,
                    minHeight: 300,
                    tpl: new Ext.XTemplate('<tpl for=".">', '<div class="ux-product-list list-dttable" id="dvTable-list-{id}">', '<div class="ux-product-list-icon list-dttable">', '<div class="ux-product-list-text list-dttable">{printer_name}<br/>{printer_ip}<br/>{printer_tipe} / {printer_pin}<br/></div>', '</div>', '</div>', '</tpl>', '<div class="x-clear"></div>'),
                    listeners: {
                        'itemclick': function (dataView, record) {
                            var getDataTable = record.data;
                            me.printReceipt_printBilling(from_source_tipe, getDataTable.id);
                            me.doClose(me.id + '_dataViewAnywherePrinter');
                        }
                    }
                }]
            }],
            buttons: [{
                text: 'Gunakan Printer Saat Ini',
                width: 180,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                handler: function () {
                    me.printReceipt_printBilling(from_source_tipe, 0);
                    me.doClose(me.id + '_dataViewAnywherePrinter');
                }
            }, {
                text: 'Print Multiple QC',
                width: 180,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                id: 'button-print-multiple-qc',
                handler: function () {
                    me.printMultipleQC_printBilling(from_source_tipe);
                    me.doClose(me.id + '_dataViewAnywherePrinter');
                }
            }, '->', {
                text: 'Refresh',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                handler: function () {
                    store_masterPrinter_dataViewAnywhere.load();
                }
            }, ' ', {
                text: 'Tutup',
                width: 100,
                height: 50,
                textAlign: 'center',
                cls: 'button-billing',
                handler: function () {
                    me.doClose(me.id + '_dataViewAnywherePrinter');
                }
            }],
            listeners: {
                show: function () {
                    store_masterPrinter_dataViewAnywhere.load();
                    Ext.getCmp('button-print-multiple-qc').hide();
                    if (!opt_show_multiple_print_qc) {} else {
                        if (from_source == 'qc') {
                            if (opt_show_multiple_print_qc == '1') {
                                Ext.getCmp('button-print-multiple-qc').show();
                            }
                        } else {}
                    }
                },
                boxready: function () {
                    var phpJs = theApp.getHelper('phpJs');
                    var d = store_masterPrinter_dataViewAnywhere.getRange(0);
                    if (d.length > 0) {
                        store_masterPrinter_dataViewAnywhere.loadData(d);
                    } else {
                        store_masterPrinter_dataViewAnywhere.load({
                            callback: function () {}
                        });
                    }
                }
            }
        });
    },
    customerPopup: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Data Customer';
        var phpJs = theApp.getHelper('phpJs');
        var helperGrid = theApp.getHelper('Grid');
        me.store_masterCustomer_payBilling = theApp.getStore('store_masterCustomer_payBilling', false);
        if (me.store_masterCustomer_payBilling == false) {
            me.store_masterCustomer_payBilling = theApp.copyStore('master_pos', 'store_masterCustomer', 'store_masterCustomer_payBilling');
        }
        me.store_masterCustomer_payBilling.proxy.extraParams.limit = 999999;
        me.store_masterCustomer_payBilling.proxy.extraParams.is_dropdown = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.is_active = 1;
        me.store_masterCustomer_payBilling.proxy.extraParams.show_all_text = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.show_choose_text = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.keywords = '';
        me.pagingtb_masterCustomer_payBilling = helperGrid.paging({
            ds: me.store_masterCustomer_payBilling,
            title: 'Customer'
        });
        return desktop.createWindow({
            id: me.id + '_masterCustomer_payBilling',
            title: 'Data Customer',
            width: 600,
            height: 350,
            iconCls: 'btn-users',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'gridpanel',
                border: 0,
                multiSelect: true,
                id: 'grid_masterCustomer_payBilling',
                store: me.store_masterCustomer_payBilling,
                scroll: true,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'ID',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_code',
                    text: 'Code',
                    width: 120
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_name',
                    text: 'Customer',
                    width: 180
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_representative',
                    text: 'Perwakilan',
                    width: 180
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_email',
                    text: 'Email',
                    width: 150
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_phone',
                    text: 'Phone',
                    width: 110
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'customer_address',
                    text: 'Alamat',
                    width: 150
                }, ],
                viewConfig: {
                    stripeRows: true,
                    forceFit: true
                },
                listeners: {
                    itemclick: function (view, rec, item, index, eventObj) {
                        try{
                            var form = Ext.getCmp('form_payBilling').getForm();
                        }
                        catch (err){
                            var form = Ext.getCmp('form_orderProduct').getForm();
                        }
                        form.findField('customer_id').setValue(rec.data.id);
                        if (rec.data.customer_contact_person != '') {
                            form.findField('customer_name').setValue(rec.data.customer_name + '/' + rec.data.customer_contact_person);
                        } else {
                            form.findField('customer_name').setValue(rec.data.customer_name + ', ' + rec.data.customer_representative);
                        }
                        if (opt_send_billing_to_email == 1) {
                            me.sendBillingtoEmail_nama = rec.data.customer_name;
                            me.sendBillingtoEmail_email = rec.data.customer_email;
                            me.sendBillingtoEmail_phone = rec.data.customer_phone;
                        }
                        if (opt_link_customer_dan_sales == 1) {
                            form.findField('sales_id').setValue(rec.data.sales_id);
                            form.findField('sales_name').setValue(rec.data.sales_code_name);
                            form.findField('sales_price').setValue(rec.data.sales_price);
                            form.findField('sales_percentage').setValue(rec.data.sales_percentage);
                            form.findField('sales_type').setValue(rec.data.sales_type);
                        }
                        me.doClose(me.id + '_masterCustomer_payBilling');
                    },
                },
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [{
                        xtype: 'textfield',
                        name: 'keywords',
                        id: 'keywords_masterCustomer_payBilling',
                        width: 200,
                        labelSeparator: '',
                        emptyText: 'Keywords: Name/Group',
                        anchor: '100%',
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.search_masterCustomer_payBilling();
                                }
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Cari',
                        itemId: 'btnFilterSearch_masterCustomer_payBilling',
                        tooltip: 'Cari',
                        iconCls: 'btn-search',
                        handler: function () {
                            me.search_masterCustomer_payBilling();
                        }
                    }, {
                        xtype: 'button',
                        text: 'Reset',
                        itemId: 'btnResetFilterSearch_masterCustomer_payBilling',
                        tooltip: 'Reset',
                        iconCls: 'btn-reset',
                        handler: function () {
                            me.search_masterCustomer_payBilling(true);
                        }
                    }, '->', {
                        text: 'Tambah',
                        itemId: 'addButton_masterCustomer_payBilling',
                        tooltip: 'Tambah Customer/Member',
                        iconCls: 'btn-add',
                        handler: function () {
                            me.createWindow(me, 'addCustomer_payBilling');
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Hapus',
                formBind: true,
                iconCls: 'btn-reset',
                id: 'btnReset_masterCustomer_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    try{
                        var form = Ext.getCmp('form_payBilling').getForm();
                    }
                    catch (err){
                        var form = Ext.getCmp('form_orderProduct').getForm();
                    }
                    form.findField('customer_id').setValue(0);
                    form.findField('customer_name').setValue('');
                    me.doClose(me.id + '_masterCustomer_payBilling');
                },
                hidden: true
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_masterCustomer_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_masterCustomer_payBilling');
                }
            }],
            listeners: {
                show: function () {
                    me.search_masterCustomer_payBilling(true);
                    Ext.getCmp('keywords_masterCustomer_payBilling').focus();
                }
            }
        });
    },
    marketingPopup: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Data Marketing/Sales';
        var phpJs = theApp.getHelper('phpJs');
        var helperGrid = theApp.getHelper('Grid');
        me.store_masterSales_payBilling = theApp.getStore('store_masterSales_payBilling', false);
        if (me.store_masterSales_payBilling == false) {
            me.store_masterSales_payBilling = theApp.copyStore('master_pos', 'store_masterSales', 'store_masterSales_payBilling');
        }
        me.store_masterSales_payBilling.proxy.extraParams.limit = 999999;
        me.store_masterSales_payBilling.proxy.extraParams.show_all_text = 0;
        me.store_masterSales_payBilling.proxy.extraParams.show_valid_date = 1;
        me.store_masterSales_payBilling.proxy.extraParams.is_dropdown = 0;
        me.store_masterSales_payBilling.proxy.extraParams.is_active = 1;
        me.store_masterSales_payBilling.proxy.extraParams.sales_type = 0;
        me.store_masterSales_payBilling.proxy.extraParams.keywords = '';
        me.pagingtb_masterSales_payBilling = helperGrid.paging({
            ds: me.store_masterSales_payBilling,
            title: 'Marketing'
        });
        return desktop.createWindow({
            id: me.id + '_masterSales_payBilling',
            title: 'Data Marketing/Sales',
            width: 500,
            height: 350,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'gridpanel',
                border: 0,
                multiSelect: true,
                id: 'grid_masterSales_payBilling',
                store: me.store_masterSales_payBilling,
                scroll: true,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'ID',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'sales_name_company_fee',
                    text: 'Info Sales/Group',
                    width: 450
                }],
                viewConfig: {
                    stripeRows: true,
                    forceFit: true
                },
                listeners: {
                    itemclick: function (view, rec, item, index, eventObj) {
                        var form = Ext.getCmp('form_payBilling').getForm();
                        form.findField('sales_id').setValue(rec.data.id);
                        form.findField('sales_name').setValue(rec.data.sales_code_name);
                        form.findField('sales_price').setValue(rec.data.sales_price);
                        form.findField('sales_percentage').setValue(rec.data.sales_percentage);
                        form.findField('sales_type').setValue(rec.data.sales_type);
                        me.doClose(me.id + '_masterSales_payBilling');
                    },
                },
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [{
                        xtype: 'textfield',
                        name: 'keywords',
                        id: 'keywords_masterSales_payBilling',
                        width: 200,
                        labelSeparator: '',
                        emptyText: 'Keywords: Nama Sales',
                        anchor: '100%',
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.search_masterSales_payBilling();
                                }
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Cari',
                        itemId: 'btnFilterSearch_masterSales_payBilling',
                        tooltip: 'Cari',
                        iconCls: 'btn-search',
                        handler: function () {
                            me.search_masterSales_payBilling();
                        }
                    }, {
                        xtype: 'button',
                        text: 'Reset',
                        itemId: 'btnResetFilterSearch_masterSales_payBilling',
                        tooltip: 'Reset',
                        iconCls: 'btn-reset',
                        handler: function () {
                            me.search_masterSales_payBilling(true);
                        }
                    }]
                }]
            }],
            buttons: [{
                text: 'Hapus',
                formBind: true,
                iconCls: 'btn-reset',
                id: 'btnReset_masterSales_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    form.findField('sales_id').setValue(0);
                    form.findField('sales_name').setValue('');
                    form.findField('sales_price').setValue('');
                    form.findField('sales_percentage').setValue('');
                    form.findField('sales_type').setValue('');
                    me.doClose(me.id + '_masterSales_payBilling');
                },
                hidden: true
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_masterSales_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_masterSales_payBilling');
                }
            }],
            listeners: {
                show: function () {
                    me.search_masterSales_payBilling(true);
                    Ext.getCmp('keywords_masterSales_payBilling').focus();
                }
            }
        });
    },
    orderNotePopup: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Order Notes';
        var phpJs = theApp.getHelper('phpJs');
        var store_orderNote_payBilling = theApp.getStore('store_orderNote_payBilling', false);
        if (store_orderNote_payBilling == false) {
            store_orderNote_payBilling = theApp.copyStore('master_pos', 'store_orderNote', 'store_orderNote_payBilling');
        }
        store_orderNote_payBilling.proxy.extraParams.limit = 999999;
        store_orderNote_payBilling.proxy.extraParams.show_all_text = 0;
        store_orderNote_payBilling.proxy.extraParams.is_dropdown = 0;
        store_orderNote_payBilling.proxy.extraParams.is_active = 1;
        store_orderNote_payBilling.proxy.extraParams.keywords = '';
        return desktop.createWindow({
            id: me.id + '_orderNote',
            title: 'Order Notes',
            width: 400,
            height: 350,
            iconCls: 'icon-grid-search',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'gridpanel',
                border: 0,
                multiSelect: true,
                id: 'grid_orderNote_payBilling',
                store: store_orderNote_payBilling,
                scroll: true,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'ID',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'order_note_text',
                    text: 'Note',
                    width: 380
                }],
                viewConfig: {
                    stripeRows: true,
                    forceFit: true
                },
                listeners: {
                    itemclick: function (view, rec, item, index, eventObj) {
                        var form = Ext.getCmp('form_orderProduct').getForm();
                        form.findField('order_notes').setValue(rec.data.order_note_text);
                        me.doClose(me.id + '_orderNote');
                    },
                }
            }],
            buttons: [{
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_orderNote_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_orderNote');
                }
            }],
            listeners: {
                show: function () {
                    store_orderNote_payBilling.load();
                }
            }
        });
    },
    sendBillingtoEmail: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Kirim Billing Ke Email';
        var phpJs = theApp.getHelper('phpJs');
        return desktop.createWindow({
            id: me.id + '_sendBillingtoEmail',
            title: 'Kirim Billing Ke Email',
            width: 400,
            height: 200,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_sendBillingtoEmail_billingCashier',
                width: 400,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'textfield',
                    name: 'email',
                    id: 'email_sendBillingtoEmail',
                    fieldLabel: 'Email Customer',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                    vtype: 'email'
                }, {
                    xtype: 'textfield',
                    name: 'nama',
                    id: 'nama_sendBillingtoEmail',
                    fieldLabel: 'Nama Customer',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }, {
                    xtype: 'textfield',
                    name: 'phone',
                    id: 'phone_sendBillingtoEmail',
                    fieldLabel: 'No.Telp/HP',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }]
            }],
            buttons: [{
                text: 'Kirim Email',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSend_sendBillingtoEmail_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        var form_sendBillingtoEmail = Ext.getCmp('form_sendBillingtoEmail_billingCashier').getForm();
                        me.sendBillingtoEmail_email = form_sendBillingtoEmail.findField('email').getValue();
                        me.sendBillingtoEmail_nama = form_sendBillingtoEmail.findField('nama').getValue();
                        me.sendBillingtoEmail_phone = form_sendBillingtoEmail.findField('phone').getValue();
                        me.doClose(me.id + '_sendBillingtoEmail');
                        me.save_payBilling(2);
                    }
                }
            }, {
                text: 'Kirim & Print',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSendPrint_sendBillingtoEmail_billingCashier',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        var form_sendBillingtoEmail = Ext.getCmp('form_sendBillingtoEmail_billingCashier').getForm();
                        me.sendBillingtoEmail_email = form_sendBillingtoEmail.findField('email').getValue();
                        me.sendBillingtoEmail_nama = form_sendBillingtoEmail.findField('nama').getValue();
                        me.sendBillingtoEmail_phone = form_sendBillingtoEmail.findField('phone').getValue();
                        me.doClose(me.id + '_sendBillingtoEmail');
                        me.save_payBilling(1);
                    }
                }
            }, {
                text: 'Batal Kirim',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_sendBillingtoEmail_billingCashier',
                margin: '0 35 0 0',
                handler: function () {
                    me.sendBillingtoEmail_email = '';
                    me.sendBillingtoEmail_nama = '';
                    me.sendBillingtoEmail_phone = '';
                    me.doClose(me.id + '_sendBillingtoEmail');
                    me.save_payBilling(3);
                }
            }],
            listeners: {
                show: function () {
                    var form_sendBillingtoEmail = Ext.getCmp('form_sendBillingtoEmail_billingCashier').getForm();
                    form_sendBillingtoEmail.reset();
                    form_sendBillingtoEmail.findField('email').setValue(me.sendBillingtoEmail_email);
                    form_sendBillingtoEmail.findField('nama').setValue(me.sendBillingtoEmail_nama);
                    form_sendBillingtoEmail.findField('phone').setValue(me.sendBillingtoEmail_phone);
                }
            }
        });
    },
    addCustomer_payBilling: function (me) {
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Tambah Data Customer';
        var phpJs = theApp.getHelper('phpJs');
        me.store_masterCustomer_payBilling = theApp.getStore('store_masterCustomer_payBilling', false);
        if (me.store_masterCustomer_payBilling == false) {
            me.store_masterCustomer_payBilling = theApp.copyStore('master_pos', 'store_masterCustomer', 'store_masterCustomer_payBilling');
        }
        me.store_masterCustomer_payBilling.proxy.extraParams.limit = 999999;
        me.store_masterCustomer_payBilling.proxy.extraParams.is_dropdown = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.is_active = 1;
        me.store_masterCustomer_payBilling.proxy.extraParams.show_all_text = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.show_choose_text = 0;
        me.store_masterCustomer_payBilling.proxy.extraParams.keywords = '';
        return desktop.createWindow({
            id: me.id + '_addCustomer_payBilling',
            title: Titletext,
            width: 400,
            height: 400,
            iconCls: 'icon-user-data',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'form',
                id: 'form_addCustomer_payBilling',
                width: 400,
                border: false,
                bodyBorder: false,
                bodyPadding: 10,
                items: [{
                    xtype: 'hidden',
                    name: 'form_type_masterCustomer',
                    value: 'add'
                }, {
                    xtype: 'combobox',
                    name: 'customer_name',
                    id: 'nama_addCustomer_payBilling',
                    fieldLabel: 'Nama Customer',
                    anchor: '100%',
                    store: me.store_masterCustomer_payBilling,
                    queryMode: 'local',
                    displayField: 'customer_name',
                    valueField: 'customer_name',
                    typeAhead: true,
                    minChars: 1,
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }, {
                    xtype: 'textfield',
                    name: 'customer_email',
                    id: 'email_addCustomer_payBilling',
                    fieldLabel: 'Email Customer',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    allowBlank: true,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                    vtype: 'email'
                }, {
                    xtype: 'textfield',
                    name: 'customer_representative',
                    id: 'representative_addCustomer_payBilling',
                    fieldLabel: 'Perwakilan',
                    width: 360,
                    heigh: 30,
                    labelWidth: 130,
                    allowBlank: true,
                    fieldStyle: 'font-weight:bold; font-size:14px',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px',
                }, {
                    xtype: 'textfield',
                    name: 'customer_phone',
                    id: 'phone_addCustomer_payBilling',
                    fieldLabel: 'No.Telp/HP',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    allowBlank: false,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }, {
                    xtype: 'textfield',
                    name: 'customer_address',
                    id: 'address_addCustomer_payBilling',
                    fieldLabel: 'Alamat',
                    width: 360,
                    height: 30,
                    labelWidth: 130,
                    allowBlank: true,
                    fieldStyle: 'font-weight:bold; font-size:14px;',
                    labelStyle: 'font-weight:bold; font-size:14px; margin-top:10px;',
                }]
            }],
            buttons: [{
                text: 'Simpan & Pilih',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSavePilih_addCustomer_payBilling',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_addCustomer_payBilling(1);
                    }
                }
            }, {
                text: 'Simpan',
                formBind: true,
                iconCls: 'btn-save',
                id: 'btnSave_addCustomer_payBilling',
                margin: '0 10 0 0',
                listeners: {
                    click: function () {
                        me.save_addCustomer_payBilling(0);
                    }
                }
            }, {
                text: 'Batal',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_addCustomer_payBilling',
                margin: '0 35 0 0',
                handler: function () {
                    me.doClose(me.id + '_addCustomer_payBilling');
                }
            }],
            listeners: {
                show: function () {
                    var form_addCustomer_payBilling = Ext.getCmp('form_addCustomer_payBilling').getForm();
                    form_addCustomer_payBilling.reset();
                }
            }
        });
    },

    //Additions
    representativePopup: function(me){
        var theApp = me.app;
        var desktop = theApp.getDesktop();
        var Titletext = 'Data Perwakilan';
        var phpJs = theApp.getHelper('phpJs');
        var helperGrid = theApp.getHelper('Grid');
        me.store_masterRepresentative_payBilling = theApp.getStore('store_masterRepresentative_payBilling', false);
        if (me.store_masterRepresentative_payBilling == false) {
            me.store_masterRepresentative_payBilling = theApp.copyStore('master_pos', 'store_masterRepresentative', 'store_masterRepresentative_payBilling');
        }
        me.store_masterRepresentative_payBilling.proxy.extraParams.limit = 999999;
        me.store_masterRepresentative_payBilling.proxy.extraParams.is_dropdown = 0;
        me.store_masterRepresentative_payBilling.proxy.extraParams.is_active = 1;
        me.store_masterRepresentative_payBilling.proxy.extraParams.show_all_text = 0;
        me.store_masterRepresentative_payBilling.proxy.extraParams.show_choose_text = 0;
        me.store_masterRepresentative_payBilling.proxy.extraParams.keywords = '';
        me.pagingtb_masterRepresentative_payBilling = helperGrid.paging({
            ds: me.store_masterRepresentative_payBilling,
            title: 'Representative'
        });
        return desktop.createWindow({
            id: me.id + '_masterRepresentative_payBilling',
            title: 'Data Perwakilan',
            width: 600,
            height: 350,
            iconCls: 'btn-users',
            animCollapse: false,
            constrainHeader: true,
            resizable: false,
            closable: true,
            minimizable: false,
            maximizable: false,
            modal: true,
            border: 0,
            layout: {
                type: 'fit'
            },
            items: [{
                xtype: 'gridpanel',
                border: 0,
                multiSelect: true,
                id: 'grid_masterRepresentative_payBilling',
                store: me.store_masterRepresentative_payBilling,
                scroll: true,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'ID',
                    hidden: true,
                    hideable: false
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'representative_name',
                    text: 'Name/Group',
                    width: 180
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'representative_email',
                    text: 'Email',
                    width: 150
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'representative_phone',
                    text: 'Phone',
                    width: 110
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'representative_address',
                    text: 'Alamat',
                    width: 150
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'representative_signature',
                    text: 'Tanda Tangan',
                    width: 100
                }],
                viewConfig: {
                    stripeRows: true,
                    forceFit: true
                },
                listeners: {
                    itemclick: function (view, rec, item, index, eventObj) {
                        var form = Ext.getCmp('form_payBilling').getForm();
                        //form.findField('representative_id').setValue(rec.data.id);
                        form.findField('representative_name').setValue(rec.data.representative_name);
                        me.doClose(me.id + '_masterRepresentative_payBilling');
                    },
                },
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [{
                        xtype: 'textfield',
                        name: 'keywords',
                        id: 'keywords_masterRepresentative_payBilling',
                        width: 200,
                        labelSeparator: '',
                        emptyText: 'Keywords: Nama/Email',
                        anchor: '100%'/*,
                        listeners: {
                            specialkey: function (field, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.search_masterCustomer_payBilling();
                                }
                            }
                        }*/
                    }, {
                        xtype: 'button',
                        text: 'Cari',
                        itemId: 'btnFilterSearch_masterCustomer_payBilling',
                        tooltip: 'Cari',
                        iconCls: 'btn-search',
                        handler: function () {
                            me.search_masterCustomer_payBilling();
                        }
                    }, {
                        xtype: 'button',
                        text: 'Reset',
                        itemId: 'btnResetFilterSearch_masterRepresentative_payBilling',
                        tooltip: 'Reset',
                        iconCls: 'btn-reset'/*,
                        handler: function () {
                            me.search_masterCustomer_payBilling(true);
                        }*/
                    }, '->', {
                        text: 'Tambah',
                        itemId: 'addButton_masterRepresentative_payBilling',
                        tooltip: 'Tambah Perwakilan',
                        iconCls: 'btn-add'/*,
                        handler: function () {
                            me.createWindow(me, 'addRepresentative_payBilling');
                        }*/
                    }]
                }]
            }],
            buttons: [{
                text: 'Hapus',
                formBind: true,
                iconCls: 'btn-reset',
                id: 'btnReset_masterRepresentative_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    var form = Ext.getCmp('form_payBilling').getForm();
                    form.findField('representative_id').setValue(0);
                    form.findField('representative_name').setValue('');
                    me.doClose(me.id + '_masterRepresentative_payBilling');
                },
                hidden: true
            }, {
                text: 'Tutup',
                formBind: true,
                iconCls: 'btn-cancel',
                id: 'btnCancel_masterRepresentative_payBilling',
                margin: '0 15 0 0',
                handler: function () {
                    me.doClose(me.id + '_masterRepresentative_payBilling');
                }
            }],
            listeners: {
                show: function () {
                    //me.search_masterRepresentative_payBilling(true);
                    Ext.getCmp('keywords_masterRepresentative_payBilling').focus();
                }
            }
        });
    }
});